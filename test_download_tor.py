#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ –∏–∑ Flibusta —á–µ—Ä–µ–∑ Tor (onion-–∞–¥—Ä–µ—Å)
"""

import sys
import os
import django
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reader.settings')
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))
django.setup()

from books.external_sources import search_external_books, import_book_from_external_source
from books.models import Book, Author

def test_download_books():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ Tor"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ –∏–∑ Flibusta —á–µ—Ä–µ–∑ Tor ===")
    
    # 1. –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ Tor
    print("\n1. –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ Tor (onion-–∞–¥—Ä–µ—Å):")
    try:
        results = search_external_books("–ü—É—à–∫–∏–Ω", use_tor=True, limit=3)
        
        if results and results.get('flibusta'):
            flibusta_books = results['flibusta']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(flibusta_books)} –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ Tor")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            first_book = flibusta_books[0] if flibusta_books else None
            
            if first_book and isinstance(first_book, dict):
                print(f"\nüìö –í—ã–±—Ä–∞–Ω–∞ –∫–Ω–∏–≥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {first_book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"   –ê–≤—Ç–æ—Ä: {first_book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}")
                print(f"   Source ID: {first_book.get('source_id', '–ù–µ—Ç ID')}")
                print(f"   –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {len(first_book.get('download_links', []))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                for link in first_book.get('download_links', []):
                    print(f"     - {link.get('format', 'unknown')}: {link.get('url', 'no url')}")
                
                # 2. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è
                available_formats = [link.get('format') for link in first_book.get('download_links', [])]
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è: fb2 > epub > txt
                preferred_formats = ['fb2', 'epub', 'txt']
                download_format = None
                
                for fmt in preferred_formats:
                    if fmt in available_formats:
                        download_format = fmt
                        break
                
                # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                if not download_format and available_formats:
                    download_format = available_formats[0]
                elif not download_format:
                    download_format = 'fb2'  # fallback
                
                print(f"\n2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {download_format.upper()}:")
                print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(available_formats)}")
                try:
                    content = import_book_from_external_source(
                        source='flibusta',
                        book_data=first_book,
                        download_format=download_format
                    )
                    
                    if content:
                        print(f"‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                        print(f"   –†–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                        print(f"   –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤: {content[:300]}...")
                        
                        # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        print(f"\n3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
                        try:
                            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞
                            author_name = first_book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
                            author, created = Author.objects.get_or_create(
                                name=author_name,
                                defaults={'bio': f'–ê–≤—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ Flibusta —á–µ—Ä–µ–∑ Tor'}
                            )
                            print(f"   –ê–≤—Ç–æ—Ä: {author.name} (—Å–æ–∑–¥–∞–Ω: {created})")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–Ω–∏–≥–∏
                            book_title = first_book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            existing_book = Book.objects.filter(
                                title=book_title,
                                author=author
                            ).first()
                            
                            if existing_book:
                                print(f"   üìñ –ö–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î: ID {existing_book.id}")
                                print(f"   –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∂–∞–Ω—Ä...")
                                existing_book.content = content
                                existing_book.genre = first_book.get('genre', '')
                                existing_book.save()
                                print(f"   ‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∂–∞–Ω—Ä –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                            else:
                                new_book = Book.objects.create(
                                    title=book_title,
                                    author=author,
                                    content=content,
                                    description=first_book.get('description', '–ö–Ω–∏–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Flibusta —á–µ—Ä–µ–∑ Tor'),
                                    genre=first_book.get('genre', '')
                                )
                                print(f"   ‚úÖ –ù–æ–≤–∞—è –∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î: ID {new_book.id}")
                                
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                            
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–∏–≥–∏")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏: {e}")
                    
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–∏")
                
        else:
            print("‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ Tor")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Tor: {e}")
    
    # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
    print(f"\n4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    try:
        book_count = Book.objects.count()
        author_count = Author.objects.count()
        print(f"   üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥: {book_count}")
        print(f"   üë§ –í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–æ–≤: {author_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
        recent_books = Book.objects.order_by('-id')[:3]
        print(f"   üìñ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–Ω–∏–≥–∏:")
        for book in recent_books:
            print(f"     - {book.title} ({book.author.name}) - ID: {book.id}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")

if __name__ == "__main__":
    test_download_books()