#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏ –∏–∑ –§–ª–∏–±—É—Å—Ç—ã
"""

import os
import sys
import django
import requests
import json
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reader.settings')
django.setup()

from books.external_sources import FlibustaTorClient
from books.models import Book, Author
from django.db import transaction

def find_fantasy_category_url() -> str:
    """–ù–∞—Ö–æ–¥–∏—Ç URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"""
    print("üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏...")
    
    client = FlibustaTorClient(use_tor=False)
    categories = client.browse_categories()
    
    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü–æ –∂–∞–Ω—Ä–∞–º"
    genres_category = None
    for category in categories:
        if any(keyword in category['name'].lower() for keyword in ['–∂–∞–Ω—Ä', 'genre']):
            genres_category = category
            print(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞–Ω—Ä–æ–≤: {category['name']}")
            break
    
    if not genres_category:
        raise Exception("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞–Ω—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã
    genre_items = client._get_categories_from_catalog(genres_category['url'], limit=100)
    
    # –ò—â–µ–º —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É
    for item in genre_items:
        title = item.get('title', '').lower()
        if any(keyword in title for keyword in ['—Ñ—ç–Ω—Ç–µ–∑–∏', 'fantasy', '—Ñ–∞–Ω—Ç–∞—Å—Ç']):
            print(f"üéØ –ù–∞–π–¥–µ–Ω –∂–∞–Ω—Ä: {item.get('title')}")
            return item.get('download_url') or item.get('url')
    
    raise Exception("–ñ–∞–Ω—Ä —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def import_fantasy_books(limit: int = 10) -> List[Dict[str, Any]]:
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–Ω–∏–≥–∏ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"""
    print(f"üìö –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç {limit} –∫–Ω–∏–≥ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏...\n")
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏
        fantasy_url = find_fantasy_category_url()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏
        client = FlibustaTorClient(use_tor=False)
        books = client.browse_books_by_category(fantasy_url, sort_by_popularity=True, limit=limit)
        
        if not books:
            print("‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        print(f"üìñ –ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞\n")
        
        imported_books = []
        
        with transaction.atomic():
            for i, book_data in enumerate(books, 1):
                print(f"üìñ {i}/{len(books)}. –ò–º–ø–æ—Ä—Ç: {book_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {book_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–Ω–∏–≥–∞
                    existing_book = Book.objects.filter(
                        title=book_data.get('title', ''),
                        author__name=book_data.get('author', '')
                    ).first()
                    
                    if existing_book:
                        print(f"   ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ (ID: {existing_book.id})")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞
                    author_name = book_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
                    author, created = Author.objects.get_or_create(
                        name=author_name,
                        defaults={'bio': ''}
                    )
                    
                    if created:
                        print(f"   üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–≤—Ç–æ—Ä: {author_name}")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
                    print(f"   üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –æ–±–ª–æ–∂–∫–∏...")
                    full_book_data = client.get_book_details(book_data.get('id'))
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É —Å –ø–æ–ª–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                    book = Book.objects.create(
                        title=book_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        author=author,
                        description=book_data.get('description', ''),
                        content=full_book_data.get('content', ''),
                        cover_url=full_book_data.get('cover_url', ''),
                        genre='–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'
                    )
                    
                    imported_books.append({
                        'id': book.id,
                        'title': book.title,
                        'author': book.author.name,
                        'genre': book.genre
                    })
                    
                    print(f"   ‚úÖ –ö–Ω–∏–≥–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ (ID: {book.id})")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
                    continue
        
        print(f"\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(imported_books)} –∫–Ω–∏–≥")
        return imported_books
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –†–µ–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫–Ω–∏–≥ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏ ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏
    imported_books = import_fantasy_books(limit=3)
    
    if imported_books:
        print("\nüìã –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:")
        for book in imported_books:
            print(f"   ‚Ä¢ {book['title']} - {book['author']} (ID: {book['id']})")
        
        print(f"\nüí° –í—Å–µ–≥–æ –≤ –±–∞–∑–µ –∫–Ω–∏–≥: {Book.objects.count()}")
        print(f"üí° –í—Å–µ–≥–æ –∞–≤—Ç–æ—Ä–æ–≤: {Author.objects.count()}")
    
    print("\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == '__main__':
    main()