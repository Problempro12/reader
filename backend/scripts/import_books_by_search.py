#!/usr/bin/env python
"""
–ò–º–ø–æ—Ä—Ç –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Å –ø–æ–ª–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏ –æ–±–ª–æ–∂–∫–∞–º–∏
"""

import os
import sys
import django
from typing import List, Dict, Any
from django.db import transaction

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reader.settings')
django.setup()

from books.models import Book, Author
from books.external_sources import FlibustaTorClient
from books.cover_sources import get_book_cover_url

def import_books_by_search(search_queries: List[str], limit_per_query: int = 2) -> List[Dict[str, Any]]:
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Å –ø–æ–ª–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    print(f"üìö –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫...\n")
    
    try:
        client = FlibustaTorClient(use_tor=False)
        all_books = []
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        for query in search_queries:
            print(f"üîç –ü–æ–∏—Å–∫: '{query}'")
            books = client.search_books(query, limit=limit_per_query * 3)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
            if books:
                print(f"üìñ –ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
                all_books.extend(books[:limit_per_query])  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            else:
                print(f"‚ùå –ö–Ω–∏–≥–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        if not all_books:
            print("‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É")
            return []
        
        print(f"\nüìñ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_books)} –∫–Ω–∏–≥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞\n")
        
        imported_books = []
        
        with transaction.atomic():
            for i, book_data in enumerate(all_books, 1):
                print(f"üìñ {i}/{len(all_books)}. –ò–º–ø–æ—Ä—Ç: {book_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {book_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–Ω–∏–≥–∞
                    existing_book = Book.objects.filter(
                        title=book_data.get('title', ''),
                        author__name=book_data.get('author', '')
                    ).first()
                    
                    if existing_book:
                        print(f"   ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_book.id})")
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                    print(f"   üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
                    content = client.download_book(book_data, format_preference='fb2')
                    
                    if not content:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞
                    author_name = book_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
                    author, created = Author.objects.get_or_create(
                        name=author_name,
                        defaults={'bio': f'–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ "{book_data.get("title", "")}"'}
                    )
                    
                    if created:
                        print(f"   üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–≤—Ç–æ—Ä: {author_name}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–æ–∂–∫—É –¥–ª—è –∫–Ω–∏–≥–∏
                    cover_url = get_book_cover_url(
                        book_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        author.name,
                        book_data.get('source_id')
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É —Å –ø–æ–ª–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                    book = Book.objects.create(
                        title=book_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        author=author,
                        description=book_data.get('description', ''),
                        content=content or '',
                        cover_url=cover_url,
                        genre='–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'
                    )
                    
                    imported_books.append({
                        'id': book.id,
                        'title': book.title,
                        'author': book.author.name,
                        'has_content': bool(book.content),
                        'has_cover': bool(book.cover_url)
                    })
                    
                    print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ (ID: {book.id})")
                    print(f"      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {'–î–∞' if book.content else '–ù–µ—Ç'}")
                    print(f"      –û–±–ª–æ–∂–∫–∞: {'–î–∞' if book.cover_url else '–ù–µ—Ç'}")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥–∏: {e}")
                    continue
        
        print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(imported_books)} –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥")
        
        if imported_books:
            print("\nüìã –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:")
            for book in imported_books:
                print(f"   ‚Ä¢ {book['title']} - {book['author']} (ID: {book['id']})")
        
        return imported_books
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return []

if __name__ == '__main__':
    print("=== –ò–º–ø–æ—Ä—Ç –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º ===")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        Book.objects.count()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    search_queries = [
        "–¢–æ–ª–∫–∏–Ω",
        "–°—Ç—Ä—É–≥–∞—Ü–∫–∏–µ",
        "–ê–∑–∏–º–æ–≤",
        "–õ—É–∫—å—è–Ω–µ–Ω–∫–æ",
        "–ñ–µ–ª—è–∑–Ω—ã"
    ]
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏
    imported_books = import_books_by_search(search_queries, limit_per_query=1)
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(imported_books)} –∫–Ω–∏–≥")