#!/usr/bin/env python
"""
–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ –§–ª–∏–±—É—Å—Ç—ã —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
"""

import os
import sys
import django
import requests
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reader.settings')
django.setup()

from books.models import Book, Author
from books.external_sources import FlibustaTorClient

def test_browse_categories():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===\n")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å Tor –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ onion-–∞–¥—Ä–µ—Å—É
        client = FlibustaTorClient(use_tor=True)
        
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {client.opds_url}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = client.browse_categories()
        
        print(f"üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\n")
        
        for i, category in enumerate(categories[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"{i+1:2d}. {category['name']}")
            print(f"    URL: {category['url']}\n")
        
        if len(categories) > 10:
            print(f"... –∏ –µ—â–µ {len(categories) - 10} –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n")
        
        return categories
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []

def test_browse_category_books(category_url: str, category_name: str):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    print(f"=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name} ===\n")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–µ–∑ Tor –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        client = FlibustaTorClient(use_tor=False)
        
        print(f"üîó –ó–∞–ø—Ä–æ—Å –∫: {category_url}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        books = client.browse_books_by_category(category_url, sort_by_popularity=True, limit=10)
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}\n")
        
        for i, book in enumerate(books):
            print(f"{i+1:2d}. {book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"    –ê–≤—Ç–æ—Ä: {book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            print(f"    –û–ø–∏—Å–∞–Ω–∏–µ: {book.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:100]}...")
            print(f"    –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {len(book.get('download_links', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            formats = [link.get('format', 'unknown') for link in book.get('download_links', [])]
            if formats:
                print(f"    –§–æ—Ä–º–∞—Ç—ã: {', '.join(formats)}")
            print()
        
        return books
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        return []

def test_api_endpoints():
    """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("=== –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ ===\n")
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    print("1. –¢–µ—Å—Ç /api/books/browse_categories/")
    try:
        response = requests.get(f"{base_url}/api/books/browse_categories/?use_tor=true", timeout=30)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {data.get('total_found', 0)}")
            
            categories = data.get('categories', [])
            if categories:
                print(f"   –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {categories[0].get('name')}")
                
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                print("\n2. –¢–µ—Å—Ç /api/books/browse_category_books/")
                category_url = categories[0].get('url')
                
                response2 = requests.get(
                    f"{base_url}/api/books/browse_category_books/",
                    params={
                        'category_url': category_url,
                        'use_tor': 'true',
                        'sort_by_popularity': 'true',
                        'limit': '5'
                    },
                    timeout=30
                )
                
                print(f"   –°—Ç–∞—Ç—É—Å: {response2.status_code}")
                
                if response2.status_code == 200:
                    data2 = response2.json()
                    print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {data2.get('total_found', 0)}")
                    print(f"   –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏: {data2.get('sorted_by_popularity', False)}")
                    
                    books = data2.get('books', [])
                    if books:
                        print(f"   –ü–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞: {books[0].get('title')} - {books[0].get('author')}")
                else:
                    print(f"   –û—à–∏–±–∫–∞: {response2.text}")
            
        else:
            print(f"   –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {e}")

def test_mass_import_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥ —Ñ—ç–Ω—Ç–µ–∑–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∞–Ω—Ä–æ–≤"""
    print("=== –°–∏–º—É–ª—è—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥ —Ñ—ç–Ω—Ç–µ–∑–∏ ===\n")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        client = FlibustaTorClient(use_tor=True)
        categories = client.browse_categories()
        
        if not categories:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
            return
        
        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü–æ –∂–∞–Ω—Ä–∞–º"
        genres_category = None
        for category in categories:
            if any(keyword in category['name'].lower() for keyword in ['–∂–∞–Ω—Ä', 'genre']):
                genres_category = category
                print(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞–Ω—Ä–æ–≤: {category['name']}")
                break
        
        if not genres_category:
            print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞–Ω—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∞–Ω—Ä–æ–≤
        print(f"üîç –ò—â–µ–º —Ñ—ç–Ω—Ç–µ–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {genres_category['name']}")
        print(f"üîó URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {genres_category['url']}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π/–∂–∞–Ω—Ä–æ–≤
        genre_items = client._get_categories_from_catalog(genres_category['url'], limit=100)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(genre_items)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if genre_items:
            print("üìù –ü–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for i, item in enumerate(genre_items[:5]):
                print(f"   {i+1}. {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ç–∏–ø: {type(item).__name__})")
        
        # –ò—â–µ–º —Ñ—ç–Ω—Ç–µ–∑–∏ —Å—Ä–µ–¥–∏ –∂–∞–Ω—Ä–æ–≤
        fantasy_genre = None
        for item in genre_items:
            title = item.get('title', '').lower()
            if any(keyword in title for keyword in ['—Ñ—ç–Ω—Ç–µ–∑–∏', 'fantasy', '—Ñ–∞–Ω—Ç–∞—Å—Ç']):
                fantasy_genre = item
                print(f"üéØ –ù–∞–π–¥–µ–Ω –∂–∞–Ω—Ä —Ñ—ç–Ω—Ç–µ–∑–∏: {item.get('title')}")
                break
        
        if not fantasy_genre:
            print("‚ùå –ñ–∞–Ω—Ä —Ñ—ç–Ω—Ç–µ–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∞–Ω—Ä–æ–≤")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∂–∞–Ω—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if genre_items:
                fantasy_genre = genre_items[0]
                print(f"‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∂–∞–Ω—Ä: {fantasy_genre.get('title')}")
            else:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –∏–∑ –∂–∞–Ω—Ä–∞ —Ñ—ç–Ω—Ç–µ–∑–∏
        print(f"üìö –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –∏–∑ –∂–∞–Ω—Ä–∞: {fantasy_genre.get('title')}")
        
        # –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å download_url, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥
        genre_url = fantasy_genre.get('download_url') or fantasy_genre.get('url', '')
        if not genre_url:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω URL –¥–ª—è –∂–∞–Ω—Ä–∞")
            return
        
        books = client.browse_books_by_category(genre_url, sort_by_popularity=True, limit=5)
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {len(books)}\n")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞
        for i, book in enumerate(books):
            print(f"üìñ {i+1}. –ò–º–ø–æ—Ä—Ç: {book.get('title')} - {book.get('author')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–Ω–∏–≥–∞
            existing = Book.objects.filter(
                title=book.get('title', ''),
                author__name=book.get('author', '')
            ).first()
            
            if existing:
                print(f"   ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î (ID: {existing.id})")
            else:
                print(f"   ‚úÖ –ö–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–º–ø–æ—Ä—Ç—É")
                print(f"   üìã –§–æ—Ä–º–∞—Ç—ã: {[link.get('format') for link in book.get('download_links', [])]}")
            
            print()
        
        print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/books/import_category_books/")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞: {e}")

def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ –§–ª–∏–±—É—Å—Ç—ã\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        book_count = Book.objects.count()
        author_count = Author.objects.count()
        print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:")
        print(f"   –ö–Ω–∏–≥: {book_count}")
        print(f"   –ê–≤—Ç–æ—Ä–æ–≤: {author_count}\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")
    
    # 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = test_browse_categories()
    
    if categories:
        # 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        first_category = categories[0]
        test_browse_category_books(first_category['url'], first_category['name'])
    
    # 3. –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    test_api_endpoints()
    
    # 4. –°–∏–º—É–ª—è—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    test_mass_import_simulation()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   GET  /api/books/browse_categories/ - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    print("   GET  /api/books/browse_category_books/ - –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("   POST /api/books/import_category_books/ - –º–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

if __name__ == '__main__':
    main()