#!/usr/bin/env python
"""
–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ API —ç–Ω–¥–ø–æ–∏–Ω—Ç
"""

import requests
import json

def test_category_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ API"""
    
    # URL –¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    api_url = "http://localhost:8001/api/books/import_category_books/"
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö URL –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    test_urls = [
        # –ò—Å—Ç–æ—Ä–∏—è
        "http://flibustaongezhld6dibs2dps6vm4nvqg2kp7vgowbu76tzopgnhazqd.onion/opds/genre/20",
        # –ö–ª–∞—Å—Å–∏–∫–∞
        "http://flibustaongezhld6dibs2dps6vm4nvqg2kp7vgowbu76tzopgnhazqd.onion/opds/genre/21",
        # –ü–æ—ç–∑–∏—è
        "http://flibustaongezhld6dibs2dps6vm4nvqg2kp7vgowbu76tzopgnhazqd.onion/opds/genre/22",
        # –î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
        "http://flibustaongezhld6dibs2dps6vm4nvqg2kp7vgowbu76tzopgnhazqd.onion/opds/genre/23"
    ]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    import_count = 5
    
    all_tests_successful = True
    
    for i, category_url in enumerate(test_urls, 1):
        print(f"\n=== –¢–µ—Å—Ç {i}: {category_url} ===")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
        data = {
            "category_url": category_url,
            "count": import_count
        }
        
        test_passed = False
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–º–ø–æ—Ä—Ç {import_count} –∫–Ω–∏–≥...")
            response = requests.post(api_url, json=data, timeout=120)
            
            print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ!")
                print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result.get('imported_count', 0)}")
                print(f"   –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ: {result.get('total_found', 0)}")
                
                errors = result.get('errors', [])
                if errors:
                    print(f"   –û—à–∏–±–∫–∏ ({len(errors)}):")
                    for error in errors:
                        print(f"     ‚Ä¢ {error}")
                
                # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –æ—Ç–º–µ—á–∞–µ–º —Ç–µ—Å—Ç –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
                test_passed = True
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                except:
                    print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                    
        except requests.exceptions.Timeout:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (120 —Å–µ–∫—É–Ω–¥) –¥–ª—è {category_url}")
            all_tests_successful = False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            all_tests_successful = False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            all_tests_successful = False
        
        if not test_passed:
            all_tests_successful = False
    
    if all_tests_successful:
        print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ URL —Å—Ä–∞–±–æ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(f"\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ URL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
        return False

if __name__ == '__main__':
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ API")
    print("üìã –ë—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    success = test_category_import()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")