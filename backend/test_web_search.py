#!/usr/bin/env python
"""
–¢–µ—Å—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞ Flibusta –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reader.settings')
django.setup()

from books.external_sources import FlibustaTorClient
from books.models import Book, Author
from users.models import User

def test_web_search():
    """–¢–µ—Å—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞ Flibusta"""
    
    print("=== –¢–µ—Å—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞ Flibusta ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = FlibustaTorClient(use_tor=False)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞
    query = "–ü—É—à–∫–∏–Ω"
    print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    
    # 1. OPDS –ø–æ–∏—Å–∫
    print("\n1. OPDS –ø–æ–∏—Å–∫:")
    try:
        opds_results = client._search_via_opds(query, limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(opds_results)} –∫–Ω–∏–≥")
        for i, book in enumerate(opds_results):
            print(f"   üìö {i+1}. {book.get('title')} - {book.get('author')}")
            print(f"      –°—Å—ã–ª–∫–∏: {len(book.get('download_links', []))}")
            for link in book.get('download_links', []):
                print(f"        - {link.get('format')}: {link.get('url')}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ OPDS: {e}")
    
    # 2. –í–µ–±-–ø–æ–∏—Å–∫
    print("\n2. –í–µ–±-–ø–æ–∏—Å–∫:")
    try:
        web_results = client._search_via_web(query, limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(web_results)} –∫–Ω–∏–≥")
        for i, book in enumerate(web_results):
            print(f"   üìö {i+1}. {book.get('title')} - {book.get('author')}")
            print(f"      –°—Å—ã–ª–∫–∏: {len(book.get('download_links', []))}")
            print(f"      Source ID: {book.get('source_id')}")
            for link in book.get('download_links', []):
                print(f"        - {link.get('format')}: {link.get('url')}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    # 3. –û–±—â–∏–π –º–µ—Ç–æ–¥ search_books
    print("\n3. –û–±—â–∏–π –º–µ—Ç–æ–¥ search_books:")
    try:
        all_results = client.search_books(query, limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(all_results)} –∫–Ω–∏–≥")
        for i, book in enumerate(all_results):
            print(f"   üìö {i+1}. {book.get('title')} - {book.get('author')}")
            print(f"      –°—Å—ã–ª–∫–∏: {len(book.get('download_links', []))}")
            print(f"      Source ID: {book.get('source_id')}")
            for link in book.get('download_links', []):
                print(f"        - {link.get('format')}: {link.get('url')}")
                
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É —Å —Å—Å—ã–ª–∫–∞–º–∏
        books_with_links = [book for book in all_results if book.get('download_links')]
        if books_with_links:
            first_book = books_with_links[0]
            print(f"\n4. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {first_book.get('title')}")
            
            try:
                from books.external_sources import import_book_from_external_source
                content = import_book_from_external_source(
                    book_data=first_book,
                    source='flibusta',
                    download_format='fb2',
                    use_tor=True
                )
                
                if content:
                    print(f"   ‚úÖ –ö–Ω–∏–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {content[:200]}...")
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
                    try:
                        author_name = first_book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
                        author, created = Author.objects.get_or_create(
                            name=author_name,
                            defaults={'bio': '–ê–≤—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ Flibusta'}
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–Ω–∏–≥–∏
                        existing_book = Book.objects.filter(
                            title=first_book.get('title'),
                            author=author
                        ).first()
                        
                        if existing_book:
                            print(f"   üìñ –ö–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î: ID {existing_book.id}")
                        else:
                            new_book = Book.objects.create(
                                title=first_book.get('title'),
                                author=author,
                                content=content,
                                description=first_book.get('description', ''),
                                source='flibusta',
                                source_id=first_book.get('source_id')
                            )
                            print(f"   ‚úÖ –ö–Ω–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: ID {new_book.id}")
                            
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                        
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                import traceback
                traceback.print_exc()
        else:
            print("   ‚ùå –ù–µ—Ç –∫–Ω–∏–≥ —Å —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞ Flibusta\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        book_count = Book.objects.count()
        author_count = Author.objects.count()
        user_count = User.objects.count()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:")
        print(f"   –ö–Ω–∏–≥–∏: {book_count}")
        print(f"   –ê–≤—Ç–æ—Ä—ã: {author_count}")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user_count}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_web_search()
    
    print("\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")