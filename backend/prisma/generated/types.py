# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _BookStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.BookStatus']]


class _BookStatusListFilterHasInput(TypedDict):
    has: 'enums.BookStatus'


class _BookStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.BookStatus']


class _BookStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.BookStatus']


class _BookStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BookStatusListFilter = Union[
    _BookStatusListFilterHasInput,
    _BookStatusListFilterEqualsInput,
    _BookStatusListFilterHasSomeInput,
    _BookStatusListFilterIsEmptyInput,
    _BookStatusListFilterHasEveryInput,
]


class _BookStatusListUpdateSet(TypedDict):
    set: List['enums.BookStatus']


class _BookStatusListUpdatePush(TypedDict):
    push: List['enums.BookStatus']


BookStatusListUpdate = Union[
    List['enums.BookStatus'],
    _BookStatusListUpdateSet,
    _BookStatusListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    isPremium: _bool
    premiumExpirationDate: Optional[datetime.datetime]
    hideAds: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    registrationDate: datetime.datetime
    about: Optional[_str]
    avatar: Optional[_str]
    isActive: _bool
    isStaff: _bool
    isSuperuser: _bool
    lastLogin: Optional[datetime.datetime]
    groups: 'UserGroupCreateManyNestedWithoutRelationsInput'
    permissions: 'UserPermissionCreateManyNestedWithoutRelationsInput'
    tokens: 'TokenCreateManyNestedWithoutRelationsInput'
    sessions: 'SessionCreateManyNestedWithoutRelationsInput'
    notifications: 'NotificationCreateManyNestedWithoutRelationsInput'
    readingProgress: 'ReadingProgressCreateManyNestedWithoutRelationsInput'
    userBooks: 'UserBookCreateManyNestedWithoutRelationsInput'
    votes: 'VoteCreateManyNestedWithoutRelationsInput'
    leaderResults: 'WeeklyResultCreateManyNestedWithoutRelationsInput'
    userAchievements: 'UserAchievementCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    username: _str
    passwordHash: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int
    isPremium: _bool
    premiumExpirationDate: Optional[datetime.datetime]
    hideAds: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    registrationDate: datetime.datetime
    about: Optional[_str]
    avatar: Optional[_str]
    isActive: _bool
    isStaff: _bool
    isSuperuser: _bool
    lastLogin: Optional[datetime.datetime]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    username: _str
    passwordHash: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

_UserWhereUnique_username_Input = TypedDict(
    '_UserWhereUnique_username_Input',
    {
        'username': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
    '_UserWhereUnique_username_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    email: _str
    username: _str
    passwordHash: _str
    isPremium: _bool
    premiumExpirationDate: Optional[datetime.datetime]
    hideAds: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    registrationDate: datetime.datetime
    about: Optional[_str]
    avatar: Optional[_str]
    isActive: _bool
    isStaff: _bool
    isSuperuser: _bool
    lastLogin: Optional[datetime.datetime]
    groups: 'UserGroupUpdateManyWithoutRelationsInput'
    permissions: 'UserPermissionUpdateManyWithoutRelationsInput'
    tokens: 'TokenUpdateManyWithoutRelationsInput'
    sessions: 'SessionUpdateManyWithoutRelationsInput'
    notifications: 'NotificationUpdateManyWithoutRelationsInput'
    readingProgress: 'ReadingProgressUpdateManyWithoutRelationsInput'
    userBooks: 'UserBookUpdateManyWithoutRelationsInput'
    votes: 'VoteUpdateManyWithoutRelationsInput'
    leaderResults: 'WeeklyResultUpdateManyWithoutRelationsInput'
    userAchievements: 'UserAchievementUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    email: _str
    username: _str
    passwordHash: _str
    isPremium: _bool
    premiumExpirationDate: Optional[datetime.datetime]
    hideAds: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    registrationDate: datetime.datetime
    about: Optional[_str]
    avatar: Optional[_str]
    isActive: _bool
    isStaff: _bool
    isSuperuser: _bool
    lastLogin: Optional[datetime.datetime]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_passwordHash_OrderByInput = TypedDict(
    '_User_passwordHash_OrderByInput',
    {
        'passwordHash': 'SortOrder',
    },
    total=True
)

_User_isPremium_OrderByInput = TypedDict(
    '_User_isPremium_OrderByInput',
    {
        'isPremium': 'SortOrder',
    },
    total=True
)

_User_premiumExpirationDate_OrderByInput = TypedDict(
    '_User_premiumExpirationDate_OrderByInput',
    {
        'premiumExpirationDate': 'SortOrder',
    },
    total=True
)

_User_hideAds_OrderByInput = TypedDict(
    '_User_hideAds_OrderByInput',
    {
        'hideAds': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_registrationDate_OrderByInput = TypedDict(
    '_User_registrationDate_OrderByInput',
    {
        'registrationDate': 'SortOrder',
    },
    total=True
)

_User_about_OrderByInput = TypedDict(
    '_User_about_OrderByInput',
    {
        'about': 'SortOrder',
    },
    total=True
)

_User_avatar_OrderByInput = TypedDict(
    '_User_avatar_OrderByInput',
    {
        'avatar': 'SortOrder',
    },
    total=True
)

_User_isActive_OrderByInput = TypedDict(
    '_User_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_User_isStaff_OrderByInput = TypedDict(
    '_User_isStaff_OrderByInput',
    {
        'isStaff': 'SortOrder',
    },
    total=True
)

_User_isSuperuser_OrderByInput = TypedDict(
    '_User_isSuperuser_OrderByInput',
    {
        'isSuperuser': 'SortOrder',
    },
    total=True
)

_User_lastLogin_OrderByInput = TypedDict(
    '_User_lastLogin_OrderByInput',
    {
        'lastLogin': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_username_OrderByInput',
    '_User_passwordHash_OrderByInput',
    '_User_isPremium_OrderByInput',
    '_User_premiumExpirationDate_OrderByInput',
    '_User_hideAds_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_registrationDate_OrderByInput',
    '_User_about_OrderByInput',
    '_User_avatar_OrderByInput',
    '_User_isActive_OrderByInput',
    '_User_isStaff_OrderByInput',
    '_User_isSuperuser_OrderByInput',
    '_User_lastLogin_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUser']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUser']
    tokens: Union[bool, 'FindManyTokenArgsFromUser']
    sessions: Union[bool, 'FindManySessionArgsFromUser']
    notifications: Union[bool, 'FindManyNotificationArgsFromUser']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUser']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUser']
    votes: Union[bool, 'FindManyVoteArgsFromUser']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUser']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromUserRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromUserRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromUserRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromUserRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserRecursive1']


class GroupIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserRecursive2']


class GroupIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserRecursive3']


class GroupIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserRecursive4']


class GroupIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class GroupArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyGroupArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserRecursive1']


class PermissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserRecursive2']


class PermissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserRecursive3']


class PermissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserRecursive4']


class PermissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    group: Union[bool, 'GroupArgsFromUserRecursive1']


class UserGroupIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    group: Union[bool, 'GroupArgsFromUserRecursive2']


class UserGroupIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    group: Union[bool, 'GroupArgsFromUserRecursive3']


class UserGroupIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    group: Union[bool, 'GroupArgsFromUserRecursive4']


class UserGroupIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserGroupArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserGroupArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserRecursive1']


class UserPermissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserRecursive2']


class UserPermissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserRecursive3']


class UserPermissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserRecursive4']


class UserPermissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    group: Union[bool, 'GroupArgsFromUserRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserRecursive1']


class GroupPermissionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    group: Union[bool, 'GroupArgsFromUserRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserRecursive2']


class GroupPermissionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    group: Union[bool, 'GroupArgsFromUserRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserRecursive3']


class GroupPermissionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    group: Union[bool, 'GroupArgsFromUserRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserRecursive4']


class GroupPermissionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class GroupPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyGroupPermissionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class TokenIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class TokenIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class TokenIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class TokenIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class SessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class SessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class SessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class SessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive1']
    parent: Union[bool, 'GenreArgsFromUserRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive1']


class GenreIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive2']
    parent: Union[bool, 'GenreArgsFromUserRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive2']


class GenreIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive3']
    parent: Union[bool, 'GenreArgsFromUserRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive3']


class GenreIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive4']
    parent: Union[bool, 'GenreArgsFromUserRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive4']


class GenreIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class GenreArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyGenreArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive1']


class AgeCategoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive2']


class AgeCategoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive3']


class AgeCategoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive4']


class AgeCategoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AgeCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAgeCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive1']


class AuthorIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive2']


class AuthorIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive3']


class AuthorIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive4']


class AuthorIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AuthorArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAuthorArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'AuthorArgsFromUserRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive1']
    genre: Union[bool, 'GenreArgsFromUserRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive1']


class BookIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'AuthorArgsFromUserRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive2']
    genre: Union[bool, 'GenreArgsFromUserRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive2']


class BookIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'AuthorArgsFromUserRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive3']
    genre: Union[bool, 'GenreArgsFromUserRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive3']


class BookIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'AuthorArgsFromUserRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive4']
    genre: Union[bool, 'GenreArgsFromUserRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive4']


class BookIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class BookArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyBookArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class UserBookIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class UserBookIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class UserBookIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class UserBookIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserBookArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserBookArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class VoteIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class VoteIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class VoteIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class VoteIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class VoteArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyVoteArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class ReadingProgressIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class ReadingProgressIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class ReadingProgressIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    book: Union[bool, 'BookArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class ReadingProgressIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ReadingProgressArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyReadingProgressArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive1']
    book: Union[bool, 'BookArgsFromUserRecursive1']
    genre: Union[bool, 'GenreArgsFromUserRecursive1']
    leader: Union[bool, 'UserArgsFromUserRecursive1']


class WeeklyResultIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive2']
    book: Union[bool, 'BookArgsFromUserRecursive2']
    genre: Union[bool, 'GenreArgsFromUserRecursive2']
    leader: Union[bool, 'UserArgsFromUserRecursive2']


class WeeklyResultIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive3']
    book: Union[bool, 'BookArgsFromUserRecursive3']
    genre: Union[bool, 'GenreArgsFromUserRecursive3']
    leader: Union[bool, 'UserArgsFromUserRecursive3']


class WeeklyResultIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive4']
    book: Union[bool, 'BookArgsFromUserRecursive4']
    genre: Union[bool, 'GenreArgsFromUserRecursive4']
    leader: Union[bool, 'UserArgsFromUserRecursive4']


class WeeklyResultIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class WeeklyResultArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyWeeklyResultArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class NotificationIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class NotificationIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class NotificationIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class NotificationIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class NotificationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyNotificationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    partner: Union[bool, 'PartnerArgsFromUserRecursive1']


class AdvertisementIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    partner: Union[bool, 'PartnerArgsFromUserRecursive2']


class AdvertisementIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    partner: Union[bool, 'PartnerArgsFromUserRecursive3']


class AdvertisementIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    partner: Union[bool, 'PartnerArgsFromUserRecursive4']


class AdvertisementIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AdvertisementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAdvertisementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserRecursive1']


class PartnerIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserRecursive2']


class PartnerIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserRecursive3']


class PartnerIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserRecursive4']


class PartnerIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PartnerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPartnerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive1']


class AchievementIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive2']


class AchievementIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive3']


class AchievementIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive4']


class AchievementIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AchievementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAchievementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    achievement: Union[bool, 'AchievementArgsFromUserRecursive1']


class UserAchievementIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    achievement: Union[bool, 'AchievementArgsFromUserRecursive2']


class UserAchievementIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    achievement: Union[bool, 'AchievementArgsFromUserRecursive3']


class UserAchievementIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    achievement: Union[bool, 'AchievementArgsFromUserRecursive4']


class UserAchievementIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserAchievementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserAchievementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    premiumExpirationDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hideAds: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeFilter']
    about: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    isStaff: Union[_bool, 'types.BooleanFilter']
    isSuperuser: Union[_bool, 'types.BooleanFilter']
    lastLogin: Union[None, datetime.datetime, 'types.DateTimeFilter']
    groups: 'UserGroupListRelationFilter'
    permissions: 'UserPermissionListRelationFilter'
    tokens: 'TokenListRelationFilter'
    sessions: 'SessionListRelationFilter'
    notifications: 'NotificationListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    votes: 'VoteListRelationFilter'
    leaderResults: 'WeeklyResultListRelationFilter'
    userAchievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    premiumExpirationDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hideAds: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeFilter']
    about: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    isStaff: Union[_bool, 'types.BooleanFilter']
    isSuperuser: Union[_bool, 'types.BooleanFilter']
    lastLogin: Union[None, datetime.datetime, 'types.DateTimeFilter']
    groups: 'UserGroupListRelationFilter'
    permissions: 'UserPermissionListRelationFilter'
    tokens: 'TokenListRelationFilter'
    sessions: 'SessionListRelationFilter'
    notifications: 'NotificationListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    votes: 'VoteListRelationFilter'
    leaderResults: 'WeeklyResultListRelationFilter'
    userAchievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    premiumExpirationDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hideAds: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeFilter']
    about: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    isStaff: Union[_bool, 'types.BooleanFilter']
    isSuperuser: Union[_bool, 'types.BooleanFilter']
    lastLogin: Union[None, datetime.datetime, 'types.DateTimeFilter']
    groups: 'UserGroupListRelationFilter'
    permissions: 'UserPermissionListRelationFilter'
    tokens: 'TokenListRelationFilter'
    sessions: 'SessionListRelationFilter'
    notifications: 'NotificationListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    votes: 'VoteListRelationFilter'
    leaderResults: 'WeeklyResultListRelationFilter'
    userAchievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    premiumExpirationDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hideAds: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeFilter']
    about: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    isStaff: Union[_bool, 'types.BooleanFilter']
    isSuperuser: Union[_bool, 'types.BooleanFilter']
    lastLogin: Union[None, datetime.datetime, 'types.DateTimeFilter']
    groups: 'UserGroupListRelationFilter'
    permissions: 'UserPermissionListRelationFilter'
    tokens: 'TokenListRelationFilter'
    sessions: 'SessionListRelationFilter'
    notifications: 'NotificationListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    votes: 'VoteListRelationFilter'
    leaderResults: 'WeeklyResultListRelationFilter'
    userAchievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    premiumExpirationDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hideAds: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeFilter']
    about: Union[None, _str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    isStaff: Union[_bool, 'types.BooleanFilter']
    isSuperuser: Union[_bool, 'types.BooleanFilter']
    lastLogin: Union[None, datetime.datetime, 'types.DateTimeFilter']
    groups: 'UserGroupListRelationFilter'
    permissions: 'UserPermissionListRelationFilter'
    tokens: 'TokenListRelationFilter'
    sessions: 'SessionListRelationFilter'
    notifications: 'NotificationListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    votes: 'VoteListRelationFilter'
    leaderResults: 'WeeklyResultListRelationFilter'
    userAchievements: 'UserAchievementListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    premiumExpirationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hideAds: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    about: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isStaff: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isSuperuser: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastLogin: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    premiumExpirationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hideAds: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    about: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isStaff: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isSuperuser: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastLogin: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    premiumExpirationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hideAds: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    about: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isStaff: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isSuperuser: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastLogin: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    premiumExpirationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hideAds: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    about: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isStaff: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isSuperuser: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastLogin: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    premiumExpirationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hideAds: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    about: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isStaff: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isSuperuser: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastLogin: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    email: _str
    username: _str
    passwordHash: _str
    isPremium: _bool
    premiumExpirationDate: datetime.datetime
    hideAds: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    registrationDate: datetime.datetime
    about: _str
    avatar: _str
    isActive: _bool
    isStaff: _bool
    isSuperuser: _bool
    lastLogin: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    email: _str
    username: _str
    passwordHash: _str
    isPremium: _bool
    premiumExpirationDate: datetime.datetime
    hideAds: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    registrationDate: datetime.datetime
    about: _str
    avatar: _str
    isActive: _bool
    isStaff: _bool
    isSuperuser: _bool
    lastLogin: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    username: bool
    passwordHash: bool
    isPremium: bool
    premiumExpirationDate: bool
    hideAds: bool
    createdAt: bool
    updatedAt: bool
    registrationDate: bool
    about: bool
    avatar: bool
    isActive: bool
    isStaff: bool
    isSuperuser: bool
    lastLogin: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    username: bool
    passwordHash: bool
    isPremium: bool
    premiumExpirationDate: bool
    hideAds: bool
    createdAt: bool
    updatedAt: bool
    registrationDate: bool
    about: bool
    avatar: bool
    isActive: bool
    isStaff: bool
    isSuperuser: bool
    lastLogin: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'username': bool,
        'passwordHash': bool,
        'isPremium': bool,
        'premiumExpirationDate': bool,
        'hideAds': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'registrationDate': bool,
        'about': bool,
        'avatar': bool,
        'isActive': bool,
        'isStaff': bool,
        'isSuperuser': bool,
        'lastLogin': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'username': int,
        'passwordHash': int,
        'isPremium': int,
        'premiumExpirationDate': int,
        'hideAds': int,
        'createdAt': int,
        'updatedAt': int,
        'registrationDate': int,
        'about': int,
        'avatar': int,
        'isActive': int,
        'isStaff': int,
        'isSuperuser': int,
        'lastLogin': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'username',
    'passwordHash',
    'isPremium',
    'premiumExpirationDate',
    'hideAds',
    'createdAt',
    'updatedAt',
    'registrationDate',
    'about',
    'avatar',
    'isActive',
    'isStaff',
    'isSuperuser',
    'lastLogin',
    'groups',
    'permissions',
    'tokens',
    'sessions',
    'notifications',
    'readingProgress',
    'userBooks',
    'votes',
    'leaderResults',
    'userAchievements',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'username',
    'passwordHash',
    'isPremium',
    'premiumExpirationDate',
    'hideAds',
    'createdAt',
    'updatedAt',
    'registrationDate',
    'about',
    'avatar',
    'isActive',
    'isStaff',
    'isSuperuser',
    'lastLogin',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'groups',
        'permissions',
        'tokens',
        'sessions',
        'notifications',
        'readingProgress',
        'userBooks',
        'votes',
        'leaderResults',
        'userAchievements',
    ]

# Group types

class GroupOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Group create method"""
    id: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    users: 'UserGroupCreateManyNestedWithoutRelationsInput'
    permissions: 'GroupPermissionCreateManyNestedWithoutRelationsInput'


class GroupCreateInput(GroupOptionalCreateInput):
    """Required arguments to the Group create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class GroupOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Group create method, without relations"""
    id: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class GroupCreateWithoutRelationsInput(GroupOptionalCreateWithoutRelationsInput):
    """Required arguments to the Group create method, without relations"""
    name: _str

class GroupConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'GroupCreateWithoutRelationsInput'
    where: 'GroupWhereUniqueInput'

class GroupCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'GroupCreateWithoutRelationsInput'
    connect: 'GroupWhereUniqueInput'
    connect_or_create: 'GroupConnectOrCreateWithoutRelationsInput'


class GroupCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['GroupCreateWithoutRelationsInput', List['GroupCreateWithoutRelationsInput']]
    connect: Union['GroupWhereUniqueInput', List['GroupWhereUniqueInput']]
    connect_or_create: Union['GroupConnectOrCreateWithoutRelationsInput', List['GroupConnectOrCreateWithoutRelationsInput']]

_GroupWhereUnique_id_Input = TypedDict(
    '_GroupWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_GroupWhereUnique_name_Input = TypedDict(
    '_GroupWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

GroupWhereUniqueInput = Union[
    '_GroupWhereUnique_id_Input',
    '_GroupWhereUnique_name_Input',
]


class GroupUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    users: 'UserGroupUpdateManyWithoutRelationsInput'
    permissions: 'GroupPermissionUpdateManyWithoutRelationsInput'


class GroupUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class GroupUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['GroupCreateWithoutRelationsInput']
    connect: List['GroupWhereUniqueInput']
    connect_or_create: List['GroupConnectOrCreateWithoutRelationsInput']
    set: List['GroupWhereUniqueInput']
    disconnect: List['GroupWhereUniqueInput']
    delete: List['GroupWhereUniqueInput']

    # TODO
    # update: List['GroupUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['GroupUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['GroupScalarWhereInput']
    # upsert: List['GroupUpserteWithWhereUniqueWithoutRelationsInput']


class GroupUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'GroupCreateWithoutRelationsInput'
    connect: 'GroupWhereUniqueInput'
    connect_or_create: 'GroupConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'GroupUpdateInput'
    # upsert: 'GroupUpsertWithoutRelationsInput'


class GroupUpsertInput(TypedDict):
    create: 'GroupCreateInput'
    update: 'GroupUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Group_id_OrderByInput = TypedDict(
    '_Group_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Group_name_OrderByInput = TypedDict(
    '_Group_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Group_createdAt_OrderByInput = TypedDict(
    '_Group_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Group_updatedAt_OrderByInput = TypedDict(
    '_Group_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Group_RelevanceInner = TypedDict(
    '_Group_RelevanceInner',
    {
        'fields': 'List[GroupScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Group_RelevanceOrderByInput = TypedDict(
    '_Group_RelevanceOrderByInput',
    {
        '_relevance': '_Group_RelevanceInner',
    },
    total=True
)

GroupOrderByInput = Union[
    '_Group_id_OrderByInput',
    '_Group_name_OrderByInput',
    '_Group_createdAt_OrderByInput',
    '_Group_updatedAt_OrderByInput',
    '_Group_RelevanceOrderByInput',
]



# recursive Group types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

GroupRelationFilter = TypedDict(
    'GroupRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class GroupListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class GroupInclude(TypedDict, total=False):
    """Group relational arguments"""
    users: Union[bool, 'FindManyUserGroupArgsFromGroup']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGroup']


    

class UserIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGroupRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGroupRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromGroupRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromGroupRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromGroupRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromGroupRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGroupRecursive1']


class UserIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGroupRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGroupRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromGroupRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromGroupRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromGroupRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromGroupRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGroupRecursive2']


class UserIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGroupRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGroupRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromGroupRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromGroupRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromGroupRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromGroupRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGroupRecursive3']


class UserIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGroupRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGroupRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromGroupRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromGroupRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromGroupRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromGroupRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGroupRecursive4']


class UserIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class UserArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyUserArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserGroupArgsFromGroupRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGroupRecursive1']


class GroupIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserGroupArgsFromGroupRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGroupRecursive2']


class GroupIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserGroupArgsFromGroupRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGroupRecursive3']


class GroupIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserGroupArgsFromGroupRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGroupRecursive4']


class GroupIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class GroupArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyGroupArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGroupRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGroupRecursive1']


class PermissionIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGroupRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGroupRecursive2']


class PermissionIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGroupRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGroupRecursive3']


class PermissionIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGroupRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGroupRecursive4']


class PermissionIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class PermissionArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyPermissionArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive1']
    group: Union[bool, 'GroupArgsFromGroupRecursive1']


class UserGroupIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive2']
    group: Union[bool, 'GroupArgsFromGroupRecursive2']


class UserGroupIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive3']
    group: Union[bool, 'GroupArgsFromGroupRecursive3']


class UserGroupIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive4']
    group: Union[bool, 'GroupArgsFromGroupRecursive4']


class UserGroupIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class UserGroupArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyUserGroupArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive1']
    permission: Union[bool, 'PermissionArgsFromGroupRecursive1']


class UserPermissionIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive2']
    permission: Union[bool, 'PermissionArgsFromGroupRecursive2']


class UserPermissionIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive3']
    permission: Union[bool, 'PermissionArgsFromGroupRecursive3']


class UserPermissionIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive4']
    permission: Union[bool, 'PermissionArgsFromGroupRecursive4']


class UserPermissionIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class UserPermissionArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyUserPermissionArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    group: Union[bool, 'GroupArgsFromGroupRecursive1']
    permission: Union[bool, 'PermissionArgsFromGroupRecursive1']


class GroupPermissionIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    group: Union[bool, 'GroupArgsFromGroupRecursive2']
    permission: Union[bool, 'PermissionArgsFromGroupRecursive2']


class GroupPermissionIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    group: Union[bool, 'GroupArgsFromGroupRecursive3']
    permission: Union[bool, 'PermissionArgsFromGroupRecursive3']


class GroupPermissionIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    group: Union[bool, 'GroupArgsFromGroupRecursive4']
    permission: Union[bool, 'PermissionArgsFromGroupRecursive4']


class GroupPermissionIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class GroupPermissionArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyGroupPermissionArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive1']


class TokenIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive2']


class TokenIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive3']


class TokenIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive4']


class TokenIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class TokenArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyTokenArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive1']


class SessionIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive2']


class SessionIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive3']


class SessionIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive4']


class SessionIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class SessionArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManySessionArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive1']
    parent: Union[bool, 'GenreArgsFromGroupRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromGroupRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive1']


class GenreIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive2']
    parent: Union[bool, 'GenreArgsFromGroupRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromGroupRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive2']


class GenreIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive3']
    parent: Union[bool, 'GenreArgsFromGroupRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromGroupRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive3']


class GenreIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive4']
    parent: Union[bool, 'GenreArgsFromGroupRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromGroupRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive4']


class GenreIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class GenreArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyGenreArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive1']


class AgeCategoryIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive2']


class AgeCategoryIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive3']


class AgeCategoryIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive4']


class AgeCategoryIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class AgeCategoryArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyAgeCategoryArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive1']


class AuthorIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive2']


class AuthorIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive3']


class AuthorIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    books: Union[bool, 'FindManyBookArgsFromGroupRecursive4']


class AuthorIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class AuthorArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyAuthorArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    author: Union[bool, 'AuthorArgsFromGroupRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupRecursive1']
    genre: Union[bool, 'GenreArgsFromGroupRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromGroupRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive1']


class BookIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    author: Union[bool, 'AuthorArgsFromGroupRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupRecursive2']
    genre: Union[bool, 'GenreArgsFromGroupRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromGroupRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive2']


class BookIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    author: Union[bool, 'AuthorArgsFromGroupRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupRecursive3']
    genre: Union[bool, 'GenreArgsFromGroupRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromGroupRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive3']


class BookIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    author: Union[bool, 'AuthorArgsFromGroupRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupRecursive4']
    genre: Union[bool, 'GenreArgsFromGroupRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromGroupRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupRecursive4']


class BookIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class BookArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyBookArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive1']
    user: Union[bool, 'UserArgsFromGroupRecursive1']


class UserBookIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive2']
    user: Union[bool, 'UserArgsFromGroupRecursive2']


class UserBookIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive3']
    user: Union[bool, 'UserArgsFromGroupRecursive3']


class UserBookIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive4']
    user: Union[bool, 'UserArgsFromGroupRecursive4']


class UserBookIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class UserBookArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyUserBookArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive1']
    user: Union[bool, 'UserArgsFromGroupRecursive1']


class VoteIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive2']
    user: Union[bool, 'UserArgsFromGroupRecursive2']


class VoteIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive3']
    user: Union[bool, 'UserArgsFromGroupRecursive3']


class VoteIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive4']
    user: Union[bool, 'UserArgsFromGroupRecursive4']


class VoteIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class VoteArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyVoteArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive1']
    user: Union[bool, 'UserArgsFromGroupRecursive1']


class ReadingProgressIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive2']
    user: Union[bool, 'UserArgsFromGroupRecursive2']


class ReadingProgressIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive3']
    user: Union[bool, 'UserArgsFromGroupRecursive3']


class ReadingProgressIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    book: Union[bool, 'BookArgsFromGroupRecursive4']
    user: Union[bool, 'UserArgsFromGroupRecursive4']


class ReadingProgressIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class ReadingProgressArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyReadingProgressArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupRecursive1']
    book: Union[bool, 'BookArgsFromGroupRecursive1']
    genre: Union[bool, 'GenreArgsFromGroupRecursive1']
    leader: Union[bool, 'UserArgsFromGroupRecursive1']


class WeeklyResultIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupRecursive2']
    book: Union[bool, 'BookArgsFromGroupRecursive2']
    genre: Union[bool, 'GenreArgsFromGroupRecursive2']
    leader: Union[bool, 'UserArgsFromGroupRecursive2']


class WeeklyResultIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupRecursive3']
    book: Union[bool, 'BookArgsFromGroupRecursive3']
    genre: Union[bool, 'GenreArgsFromGroupRecursive3']
    leader: Union[bool, 'UserArgsFromGroupRecursive3']


class WeeklyResultIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupRecursive4']
    book: Union[bool, 'BookArgsFromGroupRecursive4']
    genre: Union[bool, 'GenreArgsFromGroupRecursive4']
    leader: Union[bool, 'UserArgsFromGroupRecursive4']


class WeeklyResultIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class WeeklyResultArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyWeeklyResultArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive1']


class NotificationIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive2']


class NotificationIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive3']


class NotificationIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive4']


class NotificationIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class NotificationArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyNotificationArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    partner: Union[bool, 'PartnerArgsFromGroupRecursive1']


class AdvertisementIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    partner: Union[bool, 'PartnerArgsFromGroupRecursive2']


class AdvertisementIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    partner: Union[bool, 'PartnerArgsFromGroupRecursive3']


class AdvertisementIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    partner: Union[bool, 'PartnerArgsFromGroupRecursive4']


class AdvertisementIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class AdvertisementArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyAdvertisementArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGroupRecursive1']


class PartnerIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGroupRecursive2']


class PartnerIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGroupRecursive3']


class PartnerIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGroupRecursive4']


class PartnerIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class PartnerArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyPartnerArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGroupRecursive1']


class AchievementIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGroupRecursive2']


class AchievementIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGroupRecursive3']


class AchievementIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGroupRecursive4']


class AchievementIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class AchievementArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyAchievementArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive1']
    achievement: Union[bool, 'AchievementArgsFromGroupRecursive1']


class UserAchievementIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive2']
    achievement: Union[bool, 'AchievementArgsFromGroupRecursive2']


class UserAchievementIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive3']
    achievement: Union[bool, 'AchievementArgsFromGroupRecursive3']


class UserAchievementIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive4']
    achievement: Union[bool, 'AchievementArgsFromGroupRecursive4']


class UserAchievementIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class UserAchievementArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyUserAchievementArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyGroupArgs = FindManyGroupArgsFromGroup
FindFirstGroupArgs = FindManyGroupArgsFromGroup


    

class GroupWhereInput(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserGroupListRelationFilter'
    permissions: 'GroupPermissionListRelationFilter'

    # should be noted that AND and NOT should be Union['GroupWhereInputRecursive1', List['GroupWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['GroupWhereInputRecursive1']
    OR: List['GroupWhereInputRecursive1']
    NOT: List['GroupWhereInputRecursive1']


class GroupWhereInputRecursive1(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserGroupListRelationFilter'
    permissions: 'GroupPermissionListRelationFilter'

    # should be noted that AND and NOT should be Union['GroupWhereInputRecursive2', List['GroupWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['GroupWhereInputRecursive2']
    OR: List['GroupWhereInputRecursive2']
    NOT: List['GroupWhereInputRecursive2']


class GroupWhereInputRecursive2(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserGroupListRelationFilter'
    permissions: 'GroupPermissionListRelationFilter'

    # should be noted that AND and NOT should be Union['GroupWhereInputRecursive3', List['GroupWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['GroupWhereInputRecursive3']
    OR: List['GroupWhereInputRecursive3']
    NOT: List['GroupWhereInputRecursive3']


class GroupWhereInputRecursive3(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserGroupListRelationFilter'
    permissions: 'GroupPermissionListRelationFilter'

    # should be noted that AND and NOT should be Union['GroupWhereInputRecursive4', List['GroupWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['GroupWhereInputRecursive4']
    OR: List['GroupWhereInputRecursive4']
    NOT: List['GroupWhereInputRecursive4']


class GroupWhereInputRecursive4(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserGroupListRelationFilter'
    permissions: 'GroupPermissionListRelationFilter'



# aggregate Group types


    

class GroupScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupScalarWhereWithAggregatesInputRecursive1']
    OR: List['GroupScalarWhereWithAggregatesInputRecursive1']
    NOT: List['GroupScalarWhereWithAggregatesInputRecursive1']


class GroupScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupScalarWhereWithAggregatesInputRecursive2']
    OR: List['GroupScalarWhereWithAggregatesInputRecursive2']
    NOT: List['GroupScalarWhereWithAggregatesInputRecursive2']


class GroupScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupScalarWhereWithAggregatesInputRecursive3']
    OR: List['GroupScalarWhereWithAggregatesInputRecursive3']
    NOT: List['GroupScalarWhereWithAggregatesInputRecursive3']


class GroupScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupScalarWhereWithAggregatesInputRecursive4']
    OR: List['GroupScalarWhereWithAggregatesInputRecursive4']
    NOT: List['GroupScalarWhereWithAggregatesInputRecursive4']


class GroupScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class GroupGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'GroupSumAggregateOutput'
    _avg: 'GroupAvgAggregateOutput'
    _min: 'GroupMinAggregateOutput'
    _max: 'GroupMaxAggregateOutput'
    _count: 'GroupCountAggregateOutput'


class GroupAvgAggregateOutput(TypedDict, total=False):
    """Group output for aggregating averages"""
    id: float


class GroupSumAggregateOutput(TypedDict, total=False):
    """Group output for aggregating sums"""
    id: _int


class GroupScalarAggregateOutput(TypedDict, total=False):
    """Group output including scalar fields"""
    id: _int
    name: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


GroupMinAggregateOutput = GroupScalarAggregateOutput
GroupMaxAggregateOutput = GroupScalarAggregateOutput


class GroupMaxAggregateInput(TypedDict, total=False):
    """Group input for aggregating by max"""
    id: bool
    name: bool
    createdAt: bool
    updatedAt: bool


class GroupMinAggregateInput(TypedDict, total=False):
    """Group input for aggregating by min"""
    id: bool
    name: bool
    createdAt: bool
    updatedAt: bool


class GroupNumberAggregateInput(TypedDict, total=False):
    """Group input for aggregating numbers"""
    id: bool


GroupAvgAggregateInput = GroupNumberAggregateInput
GroupSumAggregateInput = GroupNumberAggregateInput


GroupCountAggregateInput = TypedDict(
    'GroupCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

GroupCountAggregateOutput = TypedDict(
    'GroupCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


GroupKeys = Literal[
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'users',
    'permissions',
]
GroupScalarFieldKeys = Literal[
    'id',
    'name',
    'createdAt',
    'updatedAt',
]
GroupScalarFieldKeysT = TypeVar('GroupScalarFieldKeysT', bound=GroupScalarFieldKeys)

GroupRelationalFieldKeys = Literal[
        'users',
        'permissions',
    ]

# Permission types

class PermissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Permission create method"""
    id: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    users: 'UserPermissionCreateManyNestedWithoutRelationsInput'
    groups: 'GroupPermissionCreateManyNestedWithoutRelationsInput'


class PermissionCreateInput(PermissionOptionalCreateInput):
    """Required arguments to the Permission create method"""
    name: _str
    codename: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PermissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Permission create method, without relations"""
    id: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PermissionCreateWithoutRelationsInput(PermissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Permission create method, without relations"""
    name: _str
    codename: _str

class PermissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PermissionCreateWithoutRelationsInput'
    where: 'PermissionWhereUniqueInput'

class PermissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PermissionCreateWithoutRelationsInput'
    connect: 'PermissionWhereUniqueInput'
    connect_or_create: 'PermissionConnectOrCreateWithoutRelationsInput'


class PermissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PermissionCreateWithoutRelationsInput', List['PermissionCreateWithoutRelationsInput']]
    connect: Union['PermissionWhereUniqueInput', List['PermissionWhereUniqueInput']]
    connect_or_create: Union['PermissionConnectOrCreateWithoutRelationsInput', List['PermissionConnectOrCreateWithoutRelationsInput']]

_PermissionWhereUnique_id_Input = TypedDict(
    '_PermissionWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_PermissionWhereUnique_name_Input = TypedDict(
    '_PermissionWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

_PermissionWhereUnique_codename_Input = TypedDict(
    '_PermissionWhereUnique_codename_Input',
    {
        'codename': '_str',
    },
    total=True
)

PermissionWhereUniqueInput = Union[
    '_PermissionWhereUnique_id_Input',
    '_PermissionWhereUnique_name_Input',
    '_PermissionWhereUnique_codename_Input',
]


class PermissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    codename: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    users: 'UserPermissionUpdateManyWithoutRelationsInput'
    groups: 'GroupPermissionUpdateManyWithoutRelationsInput'


class PermissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    codename: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PermissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PermissionCreateWithoutRelationsInput']
    connect: List['PermissionWhereUniqueInput']
    connect_or_create: List['PermissionConnectOrCreateWithoutRelationsInput']
    set: List['PermissionWhereUniqueInput']
    disconnect: List['PermissionWhereUniqueInput']
    delete: List['PermissionWhereUniqueInput']

    # TODO
    # update: List['PermissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PermissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PermissionScalarWhereInput']
    # upsert: List['PermissionUpserteWithWhereUniqueWithoutRelationsInput']


class PermissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PermissionCreateWithoutRelationsInput'
    connect: 'PermissionWhereUniqueInput'
    connect_or_create: 'PermissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PermissionUpdateInput'
    # upsert: 'PermissionUpsertWithoutRelationsInput'


class PermissionUpsertInput(TypedDict):
    create: 'PermissionCreateInput'
    update: 'PermissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Permission_id_OrderByInput = TypedDict(
    '_Permission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Permission_name_OrderByInput = TypedDict(
    '_Permission_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Permission_codename_OrderByInput = TypedDict(
    '_Permission_codename_OrderByInput',
    {
        'codename': 'SortOrder',
    },
    total=True
)

_Permission_createdAt_OrderByInput = TypedDict(
    '_Permission_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Permission_updatedAt_OrderByInput = TypedDict(
    '_Permission_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Permission_RelevanceInner = TypedDict(
    '_Permission_RelevanceInner',
    {
        'fields': 'List[PermissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Permission_RelevanceOrderByInput = TypedDict(
    '_Permission_RelevanceOrderByInput',
    {
        '_relevance': '_Permission_RelevanceInner',
    },
    total=True
)

PermissionOrderByInput = Union[
    '_Permission_id_OrderByInput',
    '_Permission_name_OrderByInput',
    '_Permission_codename_OrderByInput',
    '_Permission_createdAt_OrderByInput',
    '_Permission_updatedAt_OrderByInput',
    '_Permission_RelevanceOrderByInput',
]



# recursive Permission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PermissionRelationFilter = TypedDict(
    'PermissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PermissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PermissionInclude(TypedDict, total=False):
    """Permission relational arguments"""
    users: Union[bool, 'FindManyUserPermissionArgsFromPermission']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromPermission']


    

class UserIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromPermissionRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromPermissionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromPermissionRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromPermissionRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPermissionRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPermissionRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromPermissionRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromPermissionRecursive1']


class UserIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromPermissionRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromPermissionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromPermissionRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromPermissionRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPermissionRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPermissionRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromPermissionRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromPermissionRecursive2']


class UserIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromPermissionRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromPermissionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromPermissionRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromPermissionRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPermissionRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPermissionRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromPermissionRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromPermissionRecursive3']


class UserIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromPermissionRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromPermissionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromPermissionRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromPermissionRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPermissionRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPermissionRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromPermissionRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromPermissionRecursive4']


class UserIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class UserArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyUserArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserGroupArgsFromPermissionRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromPermissionRecursive1']


class GroupIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserGroupArgsFromPermissionRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromPermissionRecursive2']


class GroupIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserGroupArgsFromPermissionRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromPermissionRecursive3']


class GroupIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserGroupArgsFromPermissionRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromPermissionRecursive4']


class GroupIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class GroupArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyGroupArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromPermissionRecursive1']


class PermissionIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromPermissionRecursive2']


class PermissionIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromPermissionRecursive3']


class PermissionIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromPermissionRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromPermissionRecursive4']


class PermissionIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class PermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive1']
    group: Union[bool, 'GroupArgsFromPermissionRecursive1']


class UserGroupIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive2']
    group: Union[bool, 'GroupArgsFromPermissionRecursive2']


class UserGroupIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive3']
    group: Union[bool, 'GroupArgsFromPermissionRecursive3']


class UserGroupIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive4']
    group: Union[bool, 'GroupArgsFromPermissionRecursive4']


class UserGroupIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class UserGroupArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyUserGroupArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive1']


class UserPermissionIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive2']


class UserPermissionIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive3']


class UserPermissionIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive4']


class UserPermissionIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class UserPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyUserPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    group: Union[bool, 'GroupArgsFromPermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive1']


class GroupPermissionIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    group: Union[bool, 'GroupArgsFromPermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive2']


class GroupPermissionIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    group: Union[bool, 'GroupArgsFromPermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive3']


class GroupPermissionIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    group: Union[bool, 'GroupArgsFromPermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromPermissionRecursive4']


class GroupPermissionIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class GroupPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyGroupPermissionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive1']


class TokenIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive2']


class TokenIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive3']


class TokenIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive4']


class TokenIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class TokenArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyTokenArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive1']


class SessionIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive2']


class SessionIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive3']


class SessionIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive4']


class SessionIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class SessionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManySessionArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive1']
    parent: Union[bool, 'GenreArgsFromPermissionRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromPermissionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive1']


class GenreIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive2']
    parent: Union[bool, 'GenreArgsFromPermissionRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromPermissionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive2']


class GenreIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive3']
    parent: Union[bool, 'GenreArgsFromPermissionRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromPermissionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive3']


class GenreIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive4']
    parent: Union[bool, 'GenreArgsFromPermissionRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromPermissionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive4']


class GenreIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class GenreArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyGenreArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive1']


class AgeCategoryIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive2']


class AgeCategoryIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive3']


class AgeCategoryIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive4']


class AgeCategoryIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class AgeCategoryArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyAgeCategoryArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive1']


class AuthorIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive2']


class AuthorIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive3']


class AuthorIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    books: Union[bool, 'FindManyBookArgsFromPermissionRecursive4']


class AuthorIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class AuthorArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyAuthorArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    author: Union[bool, 'AuthorArgsFromPermissionRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPermissionRecursive1']
    genre: Union[bool, 'GenreArgsFromPermissionRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPermissionRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPermissionRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromPermissionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive1']


class BookIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    author: Union[bool, 'AuthorArgsFromPermissionRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPermissionRecursive2']
    genre: Union[bool, 'GenreArgsFromPermissionRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPermissionRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPermissionRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromPermissionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive2']


class BookIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    author: Union[bool, 'AuthorArgsFromPermissionRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPermissionRecursive3']
    genre: Union[bool, 'GenreArgsFromPermissionRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPermissionRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPermissionRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromPermissionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive3']


class BookIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    author: Union[bool, 'AuthorArgsFromPermissionRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPermissionRecursive4']
    genre: Union[bool, 'GenreArgsFromPermissionRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPermissionRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPermissionRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromPermissionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPermissionRecursive4']


class BookIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class BookArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyBookArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive1']
    user: Union[bool, 'UserArgsFromPermissionRecursive1']


class UserBookIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive2']
    user: Union[bool, 'UserArgsFromPermissionRecursive2']


class UserBookIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive3']
    user: Union[bool, 'UserArgsFromPermissionRecursive3']


class UserBookIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive4']
    user: Union[bool, 'UserArgsFromPermissionRecursive4']


class UserBookIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class UserBookArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyUserBookArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive1']
    user: Union[bool, 'UserArgsFromPermissionRecursive1']


class VoteIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive2']
    user: Union[bool, 'UserArgsFromPermissionRecursive2']


class VoteIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive3']
    user: Union[bool, 'UserArgsFromPermissionRecursive3']


class VoteIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive4']
    user: Union[bool, 'UserArgsFromPermissionRecursive4']


class VoteIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class VoteArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyVoteArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive1']
    user: Union[bool, 'UserArgsFromPermissionRecursive1']


class ReadingProgressIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive2']
    user: Union[bool, 'UserArgsFromPermissionRecursive2']


class ReadingProgressIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive3']
    user: Union[bool, 'UserArgsFromPermissionRecursive3']


class ReadingProgressIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    book: Union[bool, 'BookArgsFromPermissionRecursive4']
    user: Union[bool, 'UserArgsFromPermissionRecursive4']


class ReadingProgressIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class ReadingProgressArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyReadingProgressArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromPermissionRecursive1']
    book: Union[bool, 'BookArgsFromPermissionRecursive1']
    genre: Union[bool, 'GenreArgsFromPermissionRecursive1']
    leader: Union[bool, 'UserArgsFromPermissionRecursive1']


class WeeklyResultIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromPermissionRecursive2']
    book: Union[bool, 'BookArgsFromPermissionRecursive2']
    genre: Union[bool, 'GenreArgsFromPermissionRecursive2']
    leader: Union[bool, 'UserArgsFromPermissionRecursive2']


class WeeklyResultIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromPermissionRecursive3']
    book: Union[bool, 'BookArgsFromPermissionRecursive3']
    genre: Union[bool, 'GenreArgsFromPermissionRecursive3']
    leader: Union[bool, 'UserArgsFromPermissionRecursive3']


class WeeklyResultIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromPermissionRecursive4']
    book: Union[bool, 'BookArgsFromPermissionRecursive4']
    genre: Union[bool, 'GenreArgsFromPermissionRecursive4']
    leader: Union[bool, 'UserArgsFromPermissionRecursive4']


class WeeklyResultIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class WeeklyResultArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyWeeklyResultArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive1']


class NotificationIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive2']


class NotificationIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive3']


class NotificationIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive4']


class NotificationIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class NotificationArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyNotificationArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    partner: Union[bool, 'PartnerArgsFromPermissionRecursive1']


class AdvertisementIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    partner: Union[bool, 'PartnerArgsFromPermissionRecursive2']


class AdvertisementIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    partner: Union[bool, 'PartnerArgsFromPermissionRecursive3']


class AdvertisementIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    partner: Union[bool, 'PartnerArgsFromPermissionRecursive4']


class AdvertisementIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class AdvertisementArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyAdvertisementArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPermissionRecursive1']


class PartnerIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPermissionRecursive2']


class PartnerIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPermissionRecursive3']


class PartnerIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPermissionRecursive4']


class PartnerIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class PartnerArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyPartnerArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromPermissionRecursive1']


class AchievementIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromPermissionRecursive2']


class AchievementIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromPermissionRecursive3']


class AchievementIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromPermissionRecursive4']


class AchievementIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class AchievementArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyAchievementArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromPermission(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive1']
    achievement: Union[bool, 'AchievementArgsFromPermissionRecursive1']


class UserAchievementIncludeFromPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive2']
    achievement: Union[bool, 'AchievementArgsFromPermissionRecursive2']


class UserAchievementIncludeFromPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive3']
    achievement: Union[bool, 'AchievementArgsFromPermissionRecursive3']


class UserAchievementIncludeFromPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for Permission"""
    user: Union[bool, 'UserArgsFromPermissionRecursive4']
    achievement: Union[bool, 'AchievementArgsFromPermissionRecursive4']


class UserAchievementIncludeFromPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for Permission"""

    

class UserAchievementArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    
    

class FindManyUserAchievementArgsFromPermission(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromPermissionRecursive1(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromPermissionRecursive2(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromPermissionRecursive3(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromPermissionRecursive4(TypedDict, total=False):
    """Arguments for Permission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyPermissionArgs = FindManyPermissionArgsFromPermission
FindFirstPermissionArgs = FindManyPermissionArgsFromPermission


    

class PermissionWhereInput(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    codename: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserPermissionListRelationFilter'
    groups: 'GroupPermissionListRelationFilter'

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive1', List['PermissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive1']
    OR: List['PermissionWhereInputRecursive1']
    NOT: List['PermissionWhereInputRecursive1']


class PermissionWhereInputRecursive1(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    codename: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserPermissionListRelationFilter'
    groups: 'GroupPermissionListRelationFilter'

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive2', List['PermissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive2']
    OR: List['PermissionWhereInputRecursive2']
    NOT: List['PermissionWhereInputRecursive2']


class PermissionWhereInputRecursive2(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    codename: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserPermissionListRelationFilter'
    groups: 'GroupPermissionListRelationFilter'

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive3', List['PermissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive3']
    OR: List['PermissionWhereInputRecursive3']
    NOT: List['PermissionWhereInputRecursive3']


class PermissionWhereInputRecursive3(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    codename: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserPermissionListRelationFilter'
    groups: 'GroupPermissionListRelationFilter'

    # should be noted that AND and NOT should be Union['PermissionWhereInputRecursive4', List['PermissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PermissionWhereInputRecursive4']
    OR: List['PermissionWhereInputRecursive4']
    NOT: List['PermissionWhereInputRecursive4']


class PermissionWhereInputRecursive4(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    codename: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserPermissionListRelationFilter'
    groups: 'GroupPermissionListRelationFilter'



# aggregate Permission types


    

class PermissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    codename: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive1']


class PermissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    codename: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive2']


class PermissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    codename: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive3']


class PermissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    codename: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PermissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['PermissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PermissionScalarWhereWithAggregatesInputRecursive4']


class PermissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Permission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    codename: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PermissionGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    codename: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PermissionSumAggregateOutput'
    _avg: 'PermissionAvgAggregateOutput'
    _min: 'PermissionMinAggregateOutput'
    _max: 'PermissionMaxAggregateOutput'
    _count: 'PermissionCountAggregateOutput'


class PermissionAvgAggregateOutput(TypedDict, total=False):
    """Permission output for aggregating averages"""
    id: float


class PermissionSumAggregateOutput(TypedDict, total=False):
    """Permission output for aggregating sums"""
    id: _int


class PermissionScalarAggregateOutput(TypedDict, total=False):
    """Permission output including scalar fields"""
    id: _int
    name: _str
    codename: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PermissionMinAggregateOutput = PermissionScalarAggregateOutput
PermissionMaxAggregateOutput = PermissionScalarAggregateOutput


class PermissionMaxAggregateInput(TypedDict, total=False):
    """Permission input for aggregating by max"""
    id: bool
    name: bool
    codename: bool
    createdAt: bool
    updatedAt: bool


class PermissionMinAggregateInput(TypedDict, total=False):
    """Permission input for aggregating by min"""
    id: bool
    name: bool
    codename: bool
    createdAt: bool
    updatedAt: bool


class PermissionNumberAggregateInput(TypedDict, total=False):
    """Permission input for aggregating numbers"""
    id: bool


PermissionAvgAggregateInput = PermissionNumberAggregateInput
PermissionSumAggregateInput = PermissionNumberAggregateInput


PermissionCountAggregateInput = TypedDict(
    'PermissionCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'codename': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PermissionCountAggregateOutput = TypedDict(
    'PermissionCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'codename': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PermissionKeys = Literal[
    'id',
    'name',
    'codename',
    'createdAt',
    'updatedAt',
    'users',
    'groups',
]
PermissionScalarFieldKeys = Literal[
    'id',
    'name',
    'codename',
    'createdAt',
    'updatedAt',
]
PermissionScalarFieldKeysT = TypeVar('PermissionScalarFieldKeysT', bound=PermissionScalarFieldKeys)

PermissionRelationalFieldKeys = Literal[
        'users',
        'groups',
    ]

# UserGroup types

class UserGroupOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserGroup create method"""
    id: _int
    userId: _int
    groupId: _int
    createdAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    group: 'GroupCreateNestedWithoutRelationsInput'


class UserGroupCreateInput(UserGroupOptionalCreateInput):
    """Required arguments to the UserGroup create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserGroupOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserGroup create method, without relations"""
    id: _int
    userId: _int
    groupId: _int
    createdAt: datetime.datetime


class UserGroupCreateWithoutRelationsInput(UserGroupOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserGroup create method, without relations"""

class UserGroupConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserGroupCreateWithoutRelationsInput'
    where: 'UserGroupWhereUniqueInput'

class UserGroupCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserGroupCreateWithoutRelationsInput'
    connect: 'UserGroupWhereUniqueInput'
    connect_or_create: 'UserGroupConnectOrCreateWithoutRelationsInput'


class UserGroupCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserGroupCreateWithoutRelationsInput', List['UserGroupCreateWithoutRelationsInput']]
    connect: Union['UserGroupWhereUniqueInput', List['UserGroupWhereUniqueInput']]
    connect_or_create: Union['UserGroupConnectOrCreateWithoutRelationsInput', List['UserGroupConnectOrCreateWithoutRelationsInput']]

_UserGroupWhereUnique_id_Input = TypedDict(
    '_UserGroupWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserGroupCompounduserId_groupIdKeyInner = TypedDict(
    '_UserGroupCompounduserId_groupIdKeyInner',
    {
        'userId': '_int',
        'groupId': '_int',
    },
    total=True
)

_UserGroupCompounduserId_groupIdKey = TypedDict(
    '_UserGroupCompounduserId_groupIdKey',
    {
        'userId_groupId': '_UserGroupCompounduserId_groupIdKeyInner',
    },
    total=True
)

UserGroupWhereUniqueInput = Union[
    '_UserGroupWhereUnique_id_Input',
    '_UserGroupCompounduserId_groupIdKey',
]


class UserGroupUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    group: 'GroupUpdateOneWithoutRelationsInput'


class UserGroupUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime


class UserGroupUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserGroupCreateWithoutRelationsInput']
    connect: List['UserGroupWhereUniqueInput']
    connect_or_create: List['UserGroupConnectOrCreateWithoutRelationsInput']
    set: List['UserGroupWhereUniqueInput']
    disconnect: List['UserGroupWhereUniqueInput']
    delete: List['UserGroupWhereUniqueInput']

    # TODO
    # update: List['UserGroupUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserGroupUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserGroupScalarWhereInput']
    # upsert: List['UserGroupUpserteWithWhereUniqueWithoutRelationsInput']


class UserGroupUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserGroupCreateWithoutRelationsInput'
    connect: 'UserGroupWhereUniqueInput'
    connect_or_create: 'UserGroupConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserGroupUpdateInput'
    # upsert: 'UserGroupUpsertWithoutRelationsInput'


class UserGroupUpsertInput(TypedDict):
    create: 'UserGroupCreateInput'
    update: 'UserGroupUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserGroup_id_OrderByInput = TypedDict(
    '_UserGroup_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserGroup_userId_OrderByInput = TypedDict(
    '_UserGroup_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserGroup_groupId_OrderByInput = TypedDict(
    '_UserGroup_groupId_OrderByInput',
    {
        'groupId': 'SortOrder',
    },
    total=True
)

_UserGroup_createdAt_OrderByInput = TypedDict(
    '_UserGroup_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_UserGroup_RelevanceInner = TypedDict(
    '_UserGroup_RelevanceInner',
    {
        'fields': 'List[UserGroupScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserGroup_RelevanceOrderByInput = TypedDict(
    '_UserGroup_RelevanceOrderByInput',
    {
        '_relevance': '_UserGroup_RelevanceInner',
    },
    total=True
)

UserGroupOrderByInput = Union[
    '_UserGroup_id_OrderByInput',
    '_UserGroup_userId_OrderByInput',
    '_UserGroup_groupId_OrderByInput',
    '_UserGroup_createdAt_OrderByInput',
    '_UserGroup_RelevanceOrderByInput',
]



# recursive UserGroup types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserGroupRelationFilter = TypedDict(
    'UserGroupRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserGroupListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserGroupInclude(TypedDict, total=False):
    """UserGroup relational arguments"""
    user: Union[bool, 'UserArgsFromUserGroup']
    group: Union[bool, 'GroupArgsFromUserGroup']


    

class UserIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserGroupRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserGroupRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromUserGroupRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserGroupRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserGroupRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserGroupRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserGroupRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserGroupRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserGroupRecursive1']


class UserIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserGroupRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserGroupRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromUserGroupRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserGroupRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserGroupRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserGroupRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserGroupRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserGroupRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserGroupRecursive2']


class UserIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserGroupRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserGroupRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromUserGroupRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserGroupRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserGroupRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserGroupRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserGroupRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserGroupRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserGroupRecursive3']


class UserIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserGroupRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserGroupRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromUserGroupRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserGroupRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserGroupRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserGroupRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserGroupRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserGroupRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserGroupRecursive4']


class UserIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class UserArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyUserArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserGroupRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserGroupRecursive1']


class GroupIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserGroupRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserGroupRecursive2']


class GroupIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserGroupRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserGroupRecursive3']


class GroupIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserGroupRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserGroupRecursive4']


class GroupIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class GroupArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyGroupArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserGroupRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserGroupRecursive1']


class PermissionIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserGroupRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserGroupRecursive2']


class PermissionIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserGroupRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserGroupRecursive3']


class PermissionIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserGroupRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserGroupRecursive4']


class PermissionIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class PermissionArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyPermissionArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive1']
    group: Union[bool, 'GroupArgsFromUserGroupRecursive1']


class UserGroupIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive2']
    group: Union[bool, 'GroupArgsFromUserGroupRecursive2']


class UserGroupIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive3']
    group: Union[bool, 'GroupArgsFromUserGroupRecursive3']


class UserGroupIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive4']
    group: Union[bool, 'GroupArgsFromUserGroupRecursive4']


class UserGroupIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class UserGroupArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyUserGroupArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserGroupRecursive1']


class UserPermissionIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserGroupRecursive2']


class UserPermissionIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserGroupRecursive3']


class UserPermissionIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserGroupRecursive4']


class UserPermissionIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class UserPermissionArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyUserPermissionArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    group: Union[bool, 'GroupArgsFromUserGroupRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserGroupRecursive1']


class GroupPermissionIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    group: Union[bool, 'GroupArgsFromUserGroupRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserGroupRecursive2']


class GroupPermissionIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    group: Union[bool, 'GroupArgsFromUserGroupRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserGroupRecursive3']


class GroupPermissionIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    group: Union[bool, 'GroupArgsFromUserGroupRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserGroupRecursive4']


class GroupPermissionIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class GroupPermissionArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyGroupPermissionArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive1']


class TokenIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive2']


class TokenIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive3']


class TokenIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive4']


class TokenIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class TokenArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyTokenArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive1']


class SessionIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive2']


class SessionIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive3']


class SessionIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive4']


class SessionIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class SessionArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManySessionArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive1']
    parent: Union[bool, 'GenreArgsFromUserGroupRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserGroupRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive1']


class GenreIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive2']
    parent: Union[bool, 'GenreArgsFromUserGroupRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserGroupRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive2']


class GenreIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive3']
    parent: Union[bool, 'GenreArgsFromUserGroupRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserGroupRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive3']


class GenreIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive4']
    parent: Union[bool, 'GenreArgsFromUserGroupRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserGroupRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive4']


class GenreIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class GenreArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyGenreArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive1']


class AgeCategoryIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive2']


class AgeCategoryIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive3']


class AgeCategoryIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive4']


class AgeCategoryIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class AgeCategoryArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyAgeCategoryArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive1']


class AuthorIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive2']


class AuthorIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive3']


class AuthorIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    books: Union[bool, 'FindManyBookArgsFromUserGroupRecursive4']


class AuthorIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class AuthorArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyAuthorArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    author: Union[bool, 'AuthorArgsFromUserGroupRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserGroupRecursive1']
    genre: Union[bool, 'GenreArgsFromUserGroupRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserGroupRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserGroupRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserGroupRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive1']


class BookIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    author: Union[bool, 'AuthorArgsFromUserGroupRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserGroupRecursive2']
    genre: Union[bool, 'GenreArgsFromUserGroupRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserGroupRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserGroupRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserGroupRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive2']


class BookIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    author: Union[bool, 'AuthorArgsFromUserGroupRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserGroupRecursive3']
    genre: Union[bool, 'GenreArgsFromUserGroupRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserGroupRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserGroupRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserGroupRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive3']


class BookIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    author: Union[bool, 'AuthorArgsFromUserGroupRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserGroupRecursive4']
    genre: Union[bool, 'GenreArgsFromUserGroupRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserGroupRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserGroupRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserGroupRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserGroupRecursive4']


class BookIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class BookArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyBookArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive1']
    user: Union[bool, 'UserArgsFromUserGroupRecursive1']


class UserBookIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive2']
    user: Union[bool, 'UserArgsFromUserGroupRecursive2']


class UserBookIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive3']
    user: Union[bool, 'UserArgsFromUserGroupRecursive3']


class UserBookIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive4']
    user: Union[bool, 'UserArgsFromUserGroupRecursive4']


class UserBookIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class UserBookArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyUserBookArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive1']
    user: Union[bool, 'UserArgsFromUserGroupRecursive1']


class VoteIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive2']
    user: Union[bool, 'UserArgsFromUserGroupRecursive2']


class VoteIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive3']
    user: Union[bool, 'UserArgsFromUserGroupRecursive3']


class VoteIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive4']
    user: Union[bool, 'UserArgsFromUserGroupRecursive4']


class VoteIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class VoteArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyVoteArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive1']
    user: Union[bool, 'UserArgsFromUserGroupRecursive1']


class ReadingProgressIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive2']
    user: Union[bool, 'UserArgsFromUserGroupRecursive2']


class ReadingProgressIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive3']
    user: Union[bool, 'UserArgsFromUserGroupRecursive3']


class ReadingProgressIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    book: Union[bool, 'BookArgsFromUserGroupRecursive4']
    user: Union[bool, 'UserArgsFromUserGroupRecursive4']


class ReadingProgressIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class ReadingProgressArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyReadingProgressArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserGroupRecursive1']
    book: Union[bool, 'BookArgsFromUserGroupRecursive1']
    genre: Union[bool, 'GenreArgsFromUserGroupRecursive1']
    leader: Union[bool, 'UserArgsFromUserGroupRecursive1']


class WeeklyResultIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserGroupRecursive2']
    book: Union[bool, 'BookArgsFromUserGroupRecursive2']
    genre: Union[bool, 'GenreArgsFromUserGroupRecursive2']
    leader: Union[bool, 'UserArgsFromUserGroupRecursive2']


class WeeklyResultIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserGroupRecursive3']
    book: Union[bool, 'BookArgsFromUserGroupRecursive3']
    genre: Union[bool, 'GenreArgsFromUserGroupRecursive3']
    leader: Union[bool, 'UserArgsFromUserGroupRecursive3']


class WeeklyResultIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserGroupRecursive4']
    book: Union[bool, 'BookArgsFromUserGroupRecursive4']
    genre: Union[bool, 'GenreArgsFromUserGroupRecursive4']
    leader: Union[bool, 'UserArgsFromUserGroupRecursive4']


class WeeklyResultIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class WeeklyResultArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyWeeklyResultArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive1']


class NotificationIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive2']


class NotificationIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive3']


class NotificationIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive4']


class NotificationIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class NotificationArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyNotificationArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    partner: Union[bool, 'PartnerArgsFromUserGroupRecursive1']


class AdvertisementIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    partner: Union[bool, 'PartnerArgsFromUserGroupRecursive2']


class AdvertisementIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    partner: Union[bool, 'PartnerArgsFromUserGroupRecursive3']


class AdvertisementIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    partner: Union[bool, 'PartnerArgsFromUserGroupRecursive4']


class AdvertisementIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class AdvertisementArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyAdvertisementArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserGroupRecursive1']


class PartnerIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserGroupRecursive2']


class PartnerIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserGroupRecursive3']


class PartnerIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserGroupRecursive4']


class PartnerIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class PartnerArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyPartnerArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserGroupRecursive1']


class AchievementIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserGroupRecursive2']


class AchievementIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserGroupRecursive3']


class AchievementIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserGroupRecursive4']


class AchievementIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class AchievementArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyAchievementArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromUserGroup(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive1']
    achievement: Union[bool, 'AchievementArgsFromUserGroupRecursive1']


class UserAchievementIncludeFromUserGroupRecursive1(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive2']
    achievement: Union[bool, 'AchievementArgsFromUserGroupRecursive2']


class UserAchievementIncludeFromUserGroupRecursive2(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive3']
    achievement: Union[bool, 'AchievementArgsFromUserGroupRecursive3']


class UserAchievementIncludeFromUserGroupRecursive3(TypedDict, total=False):
    """Relational arguments for UserGroup"""
    user: Union[bool, 'UserArgsFromUserGroupRecursive4']
    achievement: Union[bool, 'AchievementArgsFromUserGroupRecursive4']


class UserAchievementIncludeFromUserGroupRecursive4(TypedDict, total=False):
    """Relational arguments for UserGroup"""

    

class UserAchievementArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    
    

class FindManyUserAchievementArgsFromUserGroup(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromUserGroupRecursive1(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromUserGroupRecursive2(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromUserGroupRecursive3(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromUserGroupRecursive4(TypedDict, total=False):
    """Arguments for UserGroup"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyUserGroupArgs = FindManyUserGroupArgsFromUserGroup
FindFirstUserGroupArgs = FindManyUserGroupArgsFromUserGroup


    

class UserGroupWhereInput(TypedDict, total=False):
    """UserGroup arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    groupId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    group: 'GroupRelationFilter'

    # should be noted that AND and NOT should be Union['UserGroupWhereInputRecursive1', List['UserGroupWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserGroupWhereInputRecursive1']
    OR: List['UserGroupWhereInputRecursive1']
    NOT: List['UserGroupWhereInputRecursive1']


class UserGroupWhereInputRecursive1(TypedDict, total=False):
    """UserGroup arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    groupId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    group: 'GroupRelationFilter'

    # should be noted that AND and NOT should be Union['UserGroupWhereInputRecursive2', List['UserGroupWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserGroupWhereInputRecursive2']
    OR: List['UserGroupWhereInputRecursive2']
    NOT: List['UserGroupWhereInputRecursive2']


class UserGroupWhereInputRecursive2(TypedDict, total=False):
    """UserGroup arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    groupId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    group: 'GroupRelationFilter'

    # should be noted that AND and NOT should be Union['UserGroupWhereInputRecursive3', List['UserGroupWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserGroupWhereInputRecursive3']
    OR: List['UserGroupWhereInputRecursive3']
    NOT: List['UserGroupWhereInputRecursive3']


class UserGroupWhereInputRecursive3(TypedDict, total=False):
    """UserGroup arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    groupId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    group: 'GroupRelationFilter'

    # should be noted that AND and NOT should be Union['UserGroupWhereInputRecursive4', List['UserGroupWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserGroupWhereInputRecursive4']
    OR: List['UserGroupWhereInputRecursive4']
    NOT: List['UserGroupWhereInputRecursive4']


class UserGroupWhereInputRecursive4(TypedDict, total=False):
    """UserGroup arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    groupId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    group: 'GroupRelationFilter'



# aggregate UserGroup types


    

class UserGroupScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserGroup arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    groupId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserGroupScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserGroupScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserGroupScalarWhereWithAggregatesInputRecursive1']


class UserGroupScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserGroup arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    groupId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserGroupScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserGroupScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserGroupScalarWhereWithAggregatesInputRecursive2']


class UserGroupScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserGroup arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    groupId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserGroupScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserGroupScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserGroupScalarWhereWithAggregatesInputRecursive3']


class UserGroupScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserGroup arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    groupId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserGroupScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserGroupScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserGroupScalarWhereWithAggregatesInputRecursive4']


class UserGroupScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserGroup arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    groupId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    groupId: _int
    createdAt: datetime.datetime
    _sum: 'UserGroupSumAggregateOutput'
    _avg: 'UserGroupAvgAggregateOutput'
    _min: 'UserGroupMinAggregateOutput'
    _max: 'UserGroupMaxAggregateOutput'
    _count: 'UserGroupCountAggregateOutput'


class UserGroupAvgAggregateOutput(TypedDict, total=False):
    """UserGroup output for aggregating averages"""
    id: float
    userId: float
    groupId: float


class UserGroupSumAggregateOutput(TypedDict, total=False):
    """UserGroup output for aggregating sums"""
    id: _int
    userId: _int
    groupId: _int


class UserGroupScalarAggregateOutput(TypedDict, total=False):
    """UserGroup output including scalar fields"""
    id: _int
    userId: _int
    groupId: _int
    createdAt: datetime.datetime


UserGroupMinAggregateOutput = UserGroupScalarAggregateOutput
UserGroupMaxAggregateOutput = UserGroupScalarAggregateOutput


class UserGroupMaxAggregateInput(TypedDict, total=False):
    """UserGroup input for aggregating by max"""
    id: bool
    userId: bool
    groupId: bool
    createdAt: bool


class UserGroupMinAggregateInput(TypedDict, total=False):
    """UserGroup input for aggregating by min"""
    id: bool
    userId: bool
    groupId: bool
    createdAt: bool


class UserGroupNumberAggregateInput(TypedDict, total=False):
    """UserGroup input for aggregating numbers"""
    id: bool
    userId: bool
    groupId: bool


UserGroupAvgAggregateInput = UserGroupNumberAggregateInput
UserGroupSumAggregateInput = UserGroupNumberAggregateInput


UserGroupCountAggregateInput = TypedDict(
    'UserGroupCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'groupId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

UserGroupCountAggregateOutput = TypedDict(
    'UserGroupCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'groupId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


UserGroupKeys = Literal[
    'id',
    'userId',
    'groupId',
    'createdAt',
    'user',
    'group',
]
UserGroupScalarFieldKeys = Literal[
    'id',
    'userId',
    'groupId',
    'createdAt',
]
UserGroupScalarFieldKeysT = TypeVar('UserGroupScalarFieldKeysT', bound=UserGroupScalarFieldKeys)

UserGroupRelationalFieldKeys = Literal[
        'user',
        'group',
    ]

# UserPermission types

class UserPermissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserPermission create method"""
    id: _int
    userId: _int
    permissionId: _int
    createdAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    permission: 'PermissionCreateNestedWithoutRelationsInput'


class UserPermissionCreateInput(UserPermissionOptionalCreateInput):
    """Required arguments to the UserPermission create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserPermissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserPermission create method, without relations"""
    id: _int
    userId: _int
    permissionId: _int
    createdAt: datetime.datetime


class UserPermissionCreateWithoutRelationsInput(UserPermissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserPermission create method, without relations"""

class UserPermissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserPermissionCreateWithoutRelationsInput'
    where: 'UserPermissionWhereUniqueInput'

class UserPermissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserPermissionCreateWithoutRelationsInput'
    connect: 'UserPermissionWhereUniqueInput'
    connect_or_create: 'UserPermissionConnectOrCreateWithoutRelationsInput'


class UserPermissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserPermissionCreateWithoutRelationsInput', List['UserPermissionCreateWithoutRelationsInput']]
    connect: Union['UserPermissionWhereUniqueInput', List['UserPermissionWhereUniqueInput']]
    connect_or_create: Union['UserPermissionConnectOrCreateWithoutRelationsInput', List['UserPermissionConnectOrCreateWithoutRelationsInput']]

_UserPermissionWhereUnique_id_Input = TypedDict(
    '_UserPermissionWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserPermissionCompounduserId_permissionIdKeyInner = TypedDict(
    '_UserPermissionCompounduserId_permissionIdKeyInner',
    {
        'userId': '_int',
        'permissionId': '_int',
    },
    total=True
)

_UserPermissionCompounduserId_permissionIdKey = TypedDict(
    '_UserPermissionCompounduserId_permissionIdKey',
    {
        'userId_permissionId': '_UserPermissionCompounduserId_permissionIdKeyInner',
    },
    total=True
)

UserPermissionWhereUniqueInput = Union[
    '_UserPermissionWhereUnique_id_Input',
    '_UserPermissionCompounduserId_permissionIdKey',
]


class UserPermissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    permission: 'PermissionUpdateOneWithoutRelationsInput'


class UserPermissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime


class UserPermissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserPermissionCreateWithoutRelationsInput']
    connect: List['UserPermissionWhereUniqueInput']
    connect_or_create: List['UserPermissionConnectOrCreateWithoutRelationsInput']
    set: List['UserPermissionWhereUniqueInput']
    disconnect: List['UserPermissionWhereUniqueInput']
    delete: List['UserPermissionWhereUniqueInput']

    # TODO
    # update: List['UserPermissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserPermissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserPermissionScalarWhereInput']
    # upsert: List['UserPermissionUpserteWithWhereUniqueWithoutRelationsInput']


class UserPermissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserPermissionCreateWithoutRelationsInput'
    connect: 'UserPermissionWhereUniqueInput'
    connect_or_create: 'UserPermissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserPermissionUpdateInput'
    # upsert: 'UserPermissionUpsertWithoutRelationsInput'


class UserPermissionUpsertInput(TypedDict):
    create: 'UserPermissionCreateInput'
    update: 'UserPermissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserPermission_id_OrderByInput = TypedDict(
    '_UserPermission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserPermission_userId_OrderByInput = TypedDict(
    '_UserPermission_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserPermission_permissionId_OrderByInput = TypedDict(
    '_UserPermission_permissionId_OrderByInput',
    {
        'permissionId': 'SortOrder',
    },
    total=True
)

_UserPermission_createdAt_OrderByInput = TypedDict(
    '_UserPermission_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_UserPermission_RelevanceInner = TypedDict(
    '_UserPermission_RelevanceInner',
    {
        'fields': 'List[UserPermissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserPermission_RelevanceOrderByInput = TypedDict(
    '_UserPermission_RelevanceOrderByInput',
    {
        '_relevance': '_UserPermission_RelevanceInner',
    },
    total=True
)

UserPermissionOrderByInput = Union[
    '_UserPermission_id_OrderByInput',
    '_UserPermission_userId_OrderByInput',
    '_UserPermission_permissionId_OrderByInput',
    '_UserPermission_createdAt_OrderByInput',
    '_UserPermission_RelevanceOrderByInput',
]



# recursive UserPermission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserPermissionRelationFilter = TypedDict(
    'UserPermissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserPermissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserPermissionInclude(TypedDict, total=False):
    """UserPermission relational arguments"""
    user: Union[bool, 'UserArgsFromUserPermission']
    permission: Union[bool, 'PermissionArgsFromUserPermission']


    

class UserIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserPermissionRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromUserPermissionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserPermissionRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserPermissionRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserPermissionRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserPermissionRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserPermissionRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserPermissionRecursive1']


class UserIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserPermissionRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromUserPermissionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserPermissionRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserPermissionRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserPermissionRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserPermissionRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserPermissionRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserPermissionRecursive2']


class UserIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserPermissionRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromUserPermissionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserPermissionRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserPermissionRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserPermissionRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserPermissionRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserPermissionRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserPermissionRecursive3']


class UserIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserPermissionRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromUserPermissionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserPermissionRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserPermissionRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserPermissionRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserPermissionRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserPermissionRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserPermissionRecursive4']


class UserIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class UserArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyUserArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserPermissionRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserPermissionRecursive1']


class GroupIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserPermissionRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserPermissionRecursive2']


class GroupIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserPermissionRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserPermissionRecursive3']


class GroupIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserPermissionRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserPermissionRecursive4']


class GroupIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class GroupArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyGroupArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserPermissionRecursive1']


class PermissionIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserPermissionRecursive2']


class PermissionIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserPermissionRecursive3']


class PermissionIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserPermissionRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserPermissionRecursive4']


class PermissionIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class PermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']
    group: Union[bool, 'GroupArgsFromUserPermissionRecursive1']


class UserGroupIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']
    group: Union[bool, 'GroupArgsFromUserPermissionRecursive2']


class UserGroupIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']
    group: Union[bool, 'GroupArgsFromUserPermissionRecursive3']


class UserGroupIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']
    group: Union[bool, 'GroupArgsFromUserPermissionRecursive4']


class UserGroupIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class UserGroupArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyUserGroupArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive1']


class UserPermissionIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive2']


class UserPermissionIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive3']


class UserPermissionIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive4']


class UserPermissionIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class UserPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyUserPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    group: Union[bool, 'GroupArgsFromUserPermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive1']


class GroupPermissionIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    group: Union[bool, 'GroupArgsFromUserPermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive2']


class GroupPermissionIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    group: Union[bool, 'GroupArgsFromUserPermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive3']


class GroupPermissionIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    group: Union[bool, 'GroupArgsFromUserPermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserPermissionRecursive4']


class GroupPermissionIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class GroupPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyGroupPermissionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']


class TokenIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']


class TokenIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']


class TokenIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']


class TokenIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class TokenArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyTokenArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']


class SessionIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']


class SessionIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']


class SessionIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']


class SessionIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class SessionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManySessionArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive1']
    parent: Union[bool, 'GenreArgsFromUserPermissionRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserPermissionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive1']


class GenreIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive2']
    parent: Union[bool, 'GenreArgsFromUserPermissionRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserPermissionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive2']


class GenreIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive3']
    parent: Union[bool, 'GenreArgsFromUserPermissionRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserPermissionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive3']


class GenreIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive4']
    parent: Union[bool, 'GenreArgsFromUserPermissionRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserPermissionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive4']


class GenreIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class GenreArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyGenreArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive1']


class AgeCategoryIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive2']


class AgeCategoryIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive3']


class AgeCategoryIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive4']


class AgeCategoryIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class AgeCategoryArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyAgeCategoryArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive1']


class AuthorIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive2']


class AuthorIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive3']


class AuthorIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    books: Union[bool, 'FindManyBookArgsFromUserPermissionRecursive4']


class AuthorIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class AuthorArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyAuthorArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    author: Union[bool, 'AuthorArgsFromUserPermissionRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserPermissionRecursive1']
    genre: Union[bool, 'GenreArgsFromUserPermissionRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserPermissionRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserPermissionRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserPermissionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive1']


class BookIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    author: Union[bool, 'AuthorArgsFromUserPermissionRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserPermissionRecursive2']
    genre: Union[bool, 'GenreArgsFromUserPermissionRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserPermissionRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserPermissionRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserPermissionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive2']


class BookIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    author: Union[bool, 'AuthorArgsFromUserPermissionRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserPermissionRecursive3']
    genre: Union[bool, 'GenreArgsFromUserPermissionRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserPermissionRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserPermissionRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserPermissionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive3']


class BookIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    author: Union[bool, 'AuthorArgsFromUserPermissionRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserPermissionRecursive4']
    genre: Union[bool, 'GenreArgsFromUserPermissionRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserPermissionRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserPermissionRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserPermissionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserPermissionRecursive4']


class BookIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class BookArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyBookArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive1']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']


class UserBookIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive2']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']


class UserBookIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive3']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']


class UserBookIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive4']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']


class UserBookIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class UserBookArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyUserBookArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive1']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']


class VoteIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive2']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']


class VoteIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive3']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']


class VoteIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive4']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']


class VoteIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class VoteArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyVoteArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive1']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']


class ReadingProgressIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive2']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']


class ReadingProgressIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive3']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']


class ReadingProgressIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    book: Union[bool, 'BookArgsFromUserPermissionRecursive4']
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']


class ReadingProgressIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class ReadingProgressArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyReadingProgressArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserPermissionRecursive1']
    book: Union[bool, 'BookArgsFromUserPermissionRecursive1']
    genre: Union[bool, 'GenreArgsFromUserPermissionRecursive1']
    leader: Union[bool, 'UserArgsFromUserPermissionRecursive1']


class WeeklyResultIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserPermissionRecursive2']
    book: Union[bool, 'BookArgsFromUserPermissionRecursive2']
    genre: Union[bool, 'GenreArgsFromUserPermissionRecursive2']
    leader: Union[bool, 'UserArgsFromUserPermissionRecursive2']


class WeeklyResultIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserPermissionRecursive3']
    book: Union[bool, 'BookArgsFromUserPermissionRecursive3']
    genre: Union[bool, 'GenreArgsFromUserPermissionRecursive3']
    leader: Union[bool, 'UserArgsFromUserPermissionRecursive3']


class WeeklyResultIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserPermissionRecursive4']
    book: Union[bool, 'BookArgsFromUserPermissionRecursive4']
    genre: Union[bool, 'GenreArgsFromUserPermissionRecursive4']
    leader: Union[bool, 'UserArgsFromUserPermissionRecursive4']


class WeeklyResultIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class WeeklyResultArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyWeeklyResultArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']


class NotificationIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']


class NotificationIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']


class NotificationIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']


class NotificationIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class NotificationArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyNotificationArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    partner: Union[bool, 'PartnerArgsFromUserPermissionRecursive1']


class AdvertisementIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    partner: Union[bool, 'PartnerArgsFromUserPermissionRecursive2']


class AdvertisementIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    partner: Union[bool, 'PartnerArgsFromUserPermissionRecursive3']


class AdvertisementIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    partner: Union[bool, 'PartnerArgsFromUserPermissionRecursive4']


class AdvertisementIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class AdvertisementArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyAdvertisementArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserPermissionRecursive1']


class PartnerIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserPermissionRecursive2']


class PartnerIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserPermissionRecursive3']


class PartnerIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserPermissionRecursive4']


class PartnerIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class PartnerArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyPartnerArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserPermissionRecursive1']


class AchievementIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserPermissionRecursive2']


class AchievementIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserPermissionRecursive3']


class AchievementIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserPermissionRecursive4']


class AchievementIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class AchievementArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyAchievementArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromUserPermission(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive1']
    achievement: Union[bool, 'AchievementArgsFromUserPermissionRecursive1']


class UserAchievementIncludeFromUserPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive2']
    achievement: Union[bool, 'AchievementArgsFromUserPermissionRecursive2']


class UserAchievementIncludeFromUserPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive3']
    achievement: Union[bool, 'AchievementArgsFromUserPermissionRecursive3']


class UserAchievementIncludeFromUserPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for UserPermission"""
    user: Union[bool, 'UserArgsFromUserPermissionRecursive4']
    achievement: Union[bool, 'AchievementArgsFromUserPermissionRecursive4']


class UserAchievementIncludeFromUserPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for UserPermission"""

    

class UserAchievementArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    
    

class FindManyUserAchievementArgsFromUserPermission(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromUserPermissionRecursive1(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromUserPermissionRecursive2(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromUserPermissionRecursive3(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromUserPermissionRecursive4(TypedDict, total=False):
    """Arguments for UserPermission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyUserPermissionArgs = FindManyUserPermissionArgsFromUserPermission
FindFirstUserPermissionArgs = FindManyUserPermissionArgsFromUserPermission


    

class UserPermissionWhereInput(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    permissionId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive1', List['UserPermissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive1']
    OR: List['UserPermissionWhereInputRecursive1']
    NOT: List['UserPermissionWhereInputRecursive1']


class UserPermissionWhereInputRecursive1(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    permissionId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive2', List['UserPermissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive2']
    OR: List['UserPermissionWhereInputRecursive2']
    NOT: List['UserPermissionWhereInputRecursive2']


class UserPermissionWhereInputRecursive2(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    permissionId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive3', List['UserPermissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive3']
    OR: List['UserPermissionWhereInputRecursive3']
    NOT: List['UserPermissionWhereInputRecursive3']


class UserPermissionWhereInputRecursive3(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    permissionId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'

    # should be noted that AND and NOT should be Union['UserPermissionWhereInputRecursive4', List['UserPermissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserPermissionWhereInputRecursive4']
    OR: List['UserPermissionWhereInputRecursive4']
    NOT: List['UserPermissionWhereInputRecursive4']


class UserPermissionWhereInputRecursive4(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    permissionId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    permission: 'PermissionRelationFilter'



# aggregate UserPermission types


    

class UserPermissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    permissionId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive1']


class UserPermissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    permissionId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive2']


class UserPermissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    permissionId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive3']


class UserPermissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    permissionId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserPermissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserPermissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserPermissionScalarWhereWithAggregatesInputRecursive4']


class UserPermissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserPermission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    permissionId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserPermissionGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    permissionId: _int
    createdAt: datetime.datetime
    _sum: 'UserPermissionSumAggregateOutput'
    _avg: 'UserPermissionAvgAggregateOutput'
    _min: 'UserPermissionMinAggregateOutput'
    _max: 'UserPermissionMaxAggregateOutput'
    _count: 'UserPermissionCountAggregateOutput'


class UserPermissionAvgAggregateOutput(TypedDict, total=False):
    """UserPermission output for aggregating averages"""
    id: float
    userId: float
    permissionId: float


class UserPermissionSumAggregateOutput(TypedDict, total=False):
    """UserPermission output for aggregating sums"""
    id: _int
    userId: _int
    permissionId: _int


class UserPermissionScalarAggregateOutput(TypedDict, total=False):
    """UserPermission output including scalar fields"""
    id: _int
    userId: _int
    permissionId: _int
    createdAt: datetime.datetime


UserPermissionMinAggregateOutput = UserPermissionScalarAggregateOutput
UserPermissionMaxAggregateOutput = UserPermissionScalarAggregateOutput


class UserPermissionMaxAggregateInput(TypedDict, total=False):
    """UserPermission input for aggregating by max"""
    id: bool
    userId: bool
    permissionId: bool
    createdAt: bool


class UserPermissionMinAggregateInput(TypedDict, total=False):
    """UserPermission input for aggregating by min"""
    id: bool
    userId: bool
    permissionId: bool
    createdAt: bool


class UserPermissionNumberAggregateInput(TypedDict, total=False):
    """UserPermission input for aggregating numbers"""
    id: bool
    userId: bool
    permissionId: bool


UserPermissionAvgAggregateInput = UserPermissionNumberAggregateInput
UserPermissionSumAggregateInput = UserPermissionNumberAggregateInput


UserPermissionCountAggregateInput = TypedDict(
    'UserPermissionCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'permissionId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

UserPermissionCountAggregateOutput = TypedDict(
    'UserPermissionCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'permissionId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


UserPermissionKeys = Literal[
    'id',
    'userId',
    'permissionId',
    'createdAt',
    'user',
    'permission',
]
UserPermissionScalarFieldKeys = Literal[
    'id',
    'userId',
    'permissionId',
    'createdAt',
]
UserPermissionScalarFieldKeysT = TypeVar('UserPermissionScalarFieldKeysT', bound=UserPermissionScalarFieldKeys)

UserPermissionRelationalFieldKeys = Literal[
        'user',
        'permission',
    ]

# GroupPermission types

class GroupPermissionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the GroupPermission create method"""
    id: _int
    groupId: _int
    permissionId: _int
    createdAt: datetime.datetime
    group: 'GroupCreateNestedWithoutRelationsInput'
    permission: 'PermissionCreateNestedWithoutRelationsInput'


class GroupPermissionCreateInput(GroupPermissionOptionalCreateInput):
    """Required arguments to the GroupPermission create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class GroupPermissionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the GroupPermission create method, without relations"""
    id: _int
    groupId: _int
    permissionId: _int
    createdAt: datetime.datetime


class GroupPermissionCreateWithoutRelationsInput(GroupPermissionOptionalCreateWithoutRelationsInput):
    """Required arguments to the GroupPermission create method, without relations"""

class GroupPermissionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'GroupPermissionCreateWithoutRelationsInput'
    where: 'GroupPermissionWhereUniqueInput'

class GroupPermissionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'GroupPermissionCreateWithoutRelationsInput'
    connect: 'GroupPermissionWhereUniqueInput'
    connect_or_create: 'GroupPermissionConnectOrCreateWithoutRelationsInput'


class GroupPermissionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['GroupPermissionCreateWithoutRelationsInput', List['GroupPermissionCreateWithoutRelationsInput']]
    connect: Union['GroupPermissionWhereUniqueInput', List['GroupPermissionWhereUniqueInput']]
    connect_or_create: Union['GroupPermissionConnectOrCreateWithoutRelationsInput', List['GroupPermissionConnectOrCreateWithoutRelationsInput']]

_GroupPermissionWhereUnique_id_Input = TypedDict(
    '_GroupPermissionWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_GroupPermissionCompoundgroupId_permissionIdKeyInner = TypedDict(
    '_GroupPermissionCompoundgroupId_permissionIdKeyInner',
    {
        'groupId': '_int',
        'permissionId': '_int',
    },
    total=True
)

_GroupPermissionCompoundgroupId_permissionIdKey = TypedDict(
    '_GroupPermissionCompoundgroupId_permissionIdKey',
    {
        'groupId_permissionId': '_GroupPermissionCompoundgroupId_permissionIdKeyInner',
    },
    total=True
)

GroupPermissionWhereUniqueInput = Union[
    '_GroupPermissionWhereUnique_id_Input',
    '_GroupPermissionCompoundgroupId_permissionIdKey',
]


class GroupPermissionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    group: 'GroupUpdateOneWithoutRelationsInput'
    permission: 'PermissionUpdateOneWithoutRelationsInput'


class GroupPermissionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime


class GroupPermissionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['GroupPermissionCreateWithoutRelationsInput']
    connect: List['GroupPermissionWhereUniqueInput']
    connect_or_create: List['GroupPermissionConnectOrCreateWithoutRelationsInput']
    set: List['GroupPermissionWhereUniqueInput']
    disconnect: List['GroupPermissionWhereUniqueInput']
    delete: List['GroupPermissionWhereUniqueInput']

    # TODO
    # update: List['GroupPermissionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['GroupPermissionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['GroupPermissionScalarWhereInput']
    # upsert: List['GroupPermissionUpserteWithWhereUniqueWithoutRelationsInput']


class GroupPermissionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'GroupPermissionCreateWithoutRelationsInput'
    connect: 'GroupPermissionWhereUniqueInput'
    connect_or_create: 'GroupPermissionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'GroupPermissionUpdateInput'
    # upsert: 'GroupPermissionUpsertWithoutRelationsInput'


class GroupPermissionUpsertInput(TypedDict):
    create: 'GroupPermissionCreateInput'
    update: 'GroupPermissionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_GroupPermission_id_OrderByInput = TypedDict(
    '_GroupPermission_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_GroupPermission_groupId_OrderByInput = TypedDict(
    '_GroupPermission_groupId_OrderByInput',
    {
        'groupId': 'SortOrder',
    },
    total=True
)

_GroupPermission_permissionId_OrderByInput = TypedDict(
    '_GroupPermission_permissionId_OrderByInput',
    {
        'permissionId': 'SortOrder',
    },
    total=True
)

_GroupPermission_createdAt_OrderByInput = TypedDict(
    '_GroupPermission_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_GroupPermission_RelevanceInner = TypedDict(
    '_GroupPermission_RelevanceInner',
    {
        'fields': 'List[GroupPermissionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_GroupPermission_RelevanceOrderByInput = TypedDict(
    '_GroupPermission_RelevanceOrderByInput',
    {
        '_relevance': '_GroupPermission_RelevanceInner',
    },
    total=True
)

GroupPermissionOrderByInput = Union[
    '_GroupPermission_id_OrderByInput',
    '_GroupPermission_groupId_OrderByInput',
    '_GroupPermission_permissionId_OrderByInput',
    '_GroupPermission_createdAt_OrderByInput',
    '_GroupPermission_RelevanceOrderByInput',
]



# recursive GroupPermission types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

GroupPermissionRelationFilter = TypedDict(
    'GroupPermissionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class GroupPermissionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class GroupPermissionInclude(TypedDict, total=False):
    """GroupPermission relational arguments"""
    group: Union[bool, 'GroupArgsFromGroupPermission']
    permission: Union[bool, 'PermissionArgsFromGroupPermission']


    

class UserIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGroupPermissionRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGroupPermissionRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromGroupPermissionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromGroupPermissionRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromGroupPermissionRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupPermissionRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupPermissionRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromGroupPermissionRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGroupPermissionRecursive1']


class UserIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGroupPermissionRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGroupPermissionRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromGroupPermissionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromGroupPermissionRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromGroupPermissionRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupPermissionRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupPermissionRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromGroupPermissionRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGroupPermissionRecursive2']


class UserIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGroupPermissionRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGroupPermissionRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromGroupPermissionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromGroupPermissionRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromGroupPermissionRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupPermissionRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupPermissionRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromGroupPermissionRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGroupPermissionRecursive3']


class UserIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGroupPermissionRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGroupPermissionRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromGroupPermissionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromGroupPermissionRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromGroupPermissionRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupPermissionRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupPermissionRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromGroupPermissionRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGroupPermissionRecursive4']


class UserIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class UserArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyUserArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserGroupArgsFromGroupPermissionRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGroupPermissionRecursive1']


class GroupIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserGroupArgsFromGroupPermissionRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGroupPermissionRecursive2']


class GroupIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserGroupArgsFromGroupPermissionRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGroupPermissionRecursive3']


class GroupIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserGroupArgsFromGroupPermissionRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGroupPermissionRecursive4']


class GroupIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class GroupArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyGroupArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGroupPermissionRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGroupPermissionRecursive1']


class PermissionIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGroupPermissionRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGroupPermissionRecursive2']


class PermissionIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGroupPermissionRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGroupPermissionRecursive3']


class PermissionIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGroupPermissionRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGroupPermissionRecursive4']


class PermissionIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class PermissionArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyPermissionArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive1']
    group: Union[bool, 'GroupArgsFromGroupPermissionRecursive1']


class UserGroupIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive2']
    group: Union[bool, 'GroupArgsFromGroupPermissionRecursive2']


class UserGroupIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive3']
    group: Union[bool, 'GroupArgsFromGroupPermissionRecursive3']


class UserGroupIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive4']
    group: Union[bool, 'GroupArgsFromGroupPermissionRecursive4']


class UserGroupIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class UserGroupArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyUserGroupArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromGroupPermissionRecursive1']


class UserPermissionIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromGroupPermissionRecursive2']


class UserPermissionIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromGroupPermissionRecursive3']


class UserPermissionIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromGroupPermissionRecursive4']


class UserPermissionIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class UserPermissionArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyUserPermissionArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    group: Union[bool, 'GroupArgsFromGroupPermissionRecursive1']
    permission: Union[bool, 'PermissionArgsFromGroupPermissionRecursive1']


class GroupPermissionIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    group: Union[bool, 'GroupArgsFromGroupPermissionRecursive2']
    permission: Union[bool, 'PermissionArgsFromGroupPermissionRecursive2']


class GroupPermissionIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    group: Union[bool, 'GroupArgsFromGroupPermissionRecursive3']
    permission: Union[bool, 'PermissionArgsFromGroupPermissionRecursive3']


class GroupPermissionIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    group: Union[bool, 'GroupArgsFromGroupPermissionRecursive4']
    permission: Union[bool, 'PermissionArgsFromGroupPermissionRecursive4']


class GroupPermissionIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class GroupPermissionArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyGroupPermissionArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive1']


class TokenIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive2']


class TokenIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive3']


class TokenIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive4']


class TokenIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class TokenArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyTokenArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive1']


class SessionIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive2']


class SessionIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive3']


class SessionIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive4']


class SessionIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class SessionArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManySessionArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive1']
    parent: Union[bool, 'GenreArgsFromGroupPermissionRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromGroupPermissionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive1']


class GenreIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive2']
    parent: Union[bool, 'GenreArgsFromGroupPermissionRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromGroupPermissionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive2']


class GenreIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive3']
    parent: Union[bool, 'GenreArgsFromGroupPermissionRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromGroupPermissionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive3']


class GenreIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive4']
    parent: Union[bool, 'GenreArgsFromGroupPermissionRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromGroupPermissionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive4']


class GenreIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class GenreArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyGenreArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive1']


class AgeCategoryIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive2']


class AgeCategoryIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive3']


class AgeCategoryIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive4']


class AgeCategoryIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class AgeCategoryArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyAgeCategoryArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive1']


class AuthorIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive2']


class AuthorIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive3']


class AuthorIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    books: Union[bool, 'FindManyBookArgsFromGroupPermissionRecursive4']


class AuthorIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class AuthorArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyAuthorArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    author: Union[bool, 'AuthorArgsFromGroupPermissionRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupPermissionRecursive1']
    genre: Union[bool, 'GenreArgsFromGroupPermissionRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupPermissionRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupPermissionRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromGroupPermissionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive1']


class BookIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    author: Union[bool, 'AuthorArgsFromGroupPermissionRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupPermissionRecursive2']
    genre: Union[bool, 'GenreArgsFromGroupPermissionRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupPermissionRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupPermissionRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromGroupPermissionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive2']


class BookIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    author: Union[bool, 'AuthorArgsFromGroupPermissionRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupPermissionRecursive3']
    genre: Union[bool, 'GenreArgsFromGroupPermissionRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupPermissionRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupPermissionRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromGroupPermissionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive3']


class BookIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    author: Union[bool, 'AuthorArgsFromGroupPermissionRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupPermissionRecursive4']
    genre: Union[bool, 'GenreArgsFromGroupPermissionRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGroupPermissionRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGroupPermissionRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromGroupPermissionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGroupPermissionRecursive4']


class BookIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class BookArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyBookArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive1']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive1']


class UserBookIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive2']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive2']


class UserBookIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive3']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive3']


class UserBookIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive4']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive4']


class UserBookIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class UserBookArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyUserBookArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive1']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive1']


class VoteIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive2']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive2']


class VoteIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive3']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive3']


class VoteIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive4']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive4']


class VoteIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class VoteArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyVoteArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive1']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive1']


class ReadingProgressIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive2']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive2']


class ReadingProgressIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive3']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive3']


class ReadingProgressIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive4']
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive4']


class ReadingProgressIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class ReadingProgressArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyReadingProgressArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupPermissionRecursive1']
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive1']
    genre: Union[bool, 'GenreArgsFromGroupPermissionRecursive1']
    leader: Union[bool, 'UserArgsFromGroupPermissionRecursive1']


class WeeklyResultIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupPermissionRecursive2']
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive2']
    genre: Union[bool, 'GenreArgsFromGroupPermissionRecursive2']
    leader: Union[bool, 'UserArgsFromGroupPermissionRecursive2']


class WeeklyResultIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupPermissionRecursive3']
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive3']
    genre: Union[bool, 'GenreArgsFromGroupPermissionRecursive3']
    leader: Union[bool, 'UserArgsFromGroupPermissionRecursive3']


class WeeklyResultIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGroupPermissionRecursive4']
    book: Union[bool, 'BookArgsFromGroupPermissionRecursive4']
    genre: Union[bool, 'GenreArgsFromGroupPermissionRecursive4']
    leader: Union[bool, 'UserArgsFromGroupPermissionRecursive4']


class WeeklyResultIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class WeeklyResultArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyWeeklyResultArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive1']


class NotificationIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive2']


class NotificationIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive3']


class NotificationIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive4']


class NotificationIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class NotificationArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyNotificationArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    partner: Union[bool, 'PartnerArgsFromGroupPermissionRecursive1']


class AdvertisementIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    partner: Union[bool, 'PartnerArgsFromGroupPermissionRecursive2']


class AdvertisementIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    partner: Union[bool, 'PartnerArgsFromGroupPermissionRecursive3']


class AdvertisementIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    partner: Union[bool, 'PartnerArgsFromGroupPermissionRecursive4']


class AdvertisementIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class AdvertisementArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyAdvertisementArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGroupPermissionRecursive1']


class PartnerIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGroupPermissionRecursive2']


class PartnerIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGroupPermissionRecursive3']


class PartnerIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGroupPermissionRecursive4']


class PartnerIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class PartnerArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyPartnerArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGroupPermissionRecursive1']


class AchievementIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGroupPermissionRecursive2']


class AchievementIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGroupPermissionRecursive3']


class AchievementIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGroupPermissionRecursive4']


class AchievementIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class AchievementArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyAchievementArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromGroupPermission(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive1']
    achievement: Union[bool, 'AchievementArgsFromGroupPermissionRecursive1']


class UserAchievementIncludeFromGroupPermissionRecursive1(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive2']
    achievement: Union[bool, 'AchievementArgsFromGroupPermissionRecursive2']


class UserAchievementIncludeFromGroupPermissionRecursive2(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive3']
    achievement: Union[bool, 'AchievementArgsFromGroupPermissionRecursive3']


class UserAchievementIncludeFromGroupPermissionRecursive3(TypedDict, total=False):
    """Relational arguments for GroupPermission"""
    user: Union[bool, 'UserArgsFromGroupPermissionRecursive4']
    achievement: Union[bool, 'AchievementArgsFromGroupPermissionRecursive4']


class UserAchievementIncludeFromGroupPermissionRecursive4(TypedDict, total=False):
    """Relational arguments for GroupPermission"""

    

class UserAchievementArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    
    

class FindManyUserAchievementArgsFromGroupPermission(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromGroupPermissionRecursive1(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromGroupPermissionRecursive2(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromGroupPermissionRecursive3(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromGroupPermissionRecursive4(TypedDict, total=False):
    """Arguments for GroupPermission"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyGroupPermissionArgs = FindManyGroupPermissionArgsFromGroupPermission
FindFirstGroupPermissionArgs = FindManyGroupPermissionArgsFromGroupPermission


    

class GroupPermissionWhereInput(TypedDict, total=False):
    """GroupPermission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    groupId: Union[_int, 'types.IntFilter']
    permissionId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    group: 'GroupRelationFilter'
    permission: 'PermissionRelationFilter'

    # should be noted that AND and NOT should be Union['GroupPermissionWhereInputRecursive1', List['GroupPermissionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['GroupPermissionWhereInputRecursive1']
    OR: List['GroupPermissionWhereInputRecursive1']
    NOT: List['GroupPermissionWhereInputRecursive1']


class GroupPermissionWhereInputRecursive1(TypedDict, total=False):
    """GroupPermission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    groupId: Union[_int, 'types.IntFilter']
    permissionId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    group: 'GroupRelationFilter'
    permission: 'PermissionRelationFilter'

    # should be noted that AND and NOT should be Union['GroupPermissionWhereInputRecursive2', List['GroupPermissionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['GroupPermissionWhereInputRecursive2']
    OR: List['GroupPermissionWhereInputRecursive2']
    NOT: List['GroupPermissionWhereInputRecursive2']


class GroupPermissionWhereInputRecursive2(TypedDict, total=False):
    """GroupPermission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    groupId: Union[_int, 'types.IntFilter']
    permissionId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    group: 'GroupRelationFilter'
    permission: 'PermissionRelationFilter'

    # should be noted that AND and NOT should be Union['GroupPermissionWhereInputRecursive3', List['GroupPermissionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['GroupPermissionWhereInputRecursive3']
    OR: List['GroupPermissionWhereInputRecursive3']
    NOT: List['GroupPermissionWhereInputRecursive3']


class GroupPermissionWhereInputRecursive3(TypedDict, total=False):
    """GroupPermission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    groupId: Union[_int, 'types.IntFilter']
    permissionId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    group: 'GroupRelationFilter'
    permission: 'PermissionRelationFilter'

    # should be noted that AND and NOT should be Union['GroupPermissionWhereInputRecursive4', List['GroupPermissionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['GroupPermissionWhereInputRecursive4']
    OR: List['GroupPermissionWhereInputRecursive4']
    NOT: List['GroupPermissionWhereInputRecursive4']


class GroupPermissionWhereInputRecursive4(TypedDict, total=False):
    """GroupPermission arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    groupId: Union[_int, 'types.IntFilter']
    permissionId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    group: 'GroupRelationFilter'
    permission: 'PermissionRelationFilter'



# aggregate GroupPermission types


    

class GroupPermissionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """GroupPermission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    groupId: Union[_int, 'types.IntWithAggregatesFilter']
    permissionId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupPermissionScalarWhereWithAggregatesInputRecursive1']
    OR: List['GroupPermissionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['GroupPermissionScalarWhereWithAggregatesInputRecursive1']


class GroupPermissionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """GroupPermission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    groupId: Union[_int, 'types.IntWithAggregatesFilter']
    permissionId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupPermissionScalarWhereWithAggregatesInputRecursive2']
    OR: List['GroupPermissionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['GroupPermissionScalarWhereWithAggregatesInputRecursive2']


class GroupPermissionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """GroupPermission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    groupId: Union[_int, 'types.IntWithAggregatesFilter']
    permissionId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupPermissionScalarWhereWithAggregatesInputRecursive3']
    OR: List['GroupPermissionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['GroupPermissionScalarWhereWithAggregatesInputRecursive3']


class GroupPermissionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """GroupPermission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    groupId: Union[_int, 'types.IntWithAggregatesFilter']
    permissionId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupPermissionScalarWhereWithAggregatesInputRecursive4']
    OR: List['GroupPermissionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['GroupPermissionScalarWhereWithAggregatesInputRecursive4']


class GroupPermissionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """GroupPermission arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    groupId: Union[_int, 'types.IntWithAggregatesFilter']
    permissionId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class GroupPermissionGroupByOutput(TypedDict, total=False):
    id: _int
    groupId: _int
    permissionId: _int
    createdAt: datetime.datetime
    _sum: 'GroupPermissionSumAggregateOutput'
    _avg: 'GroupPermissionAvgAggregateOutput'
    _min: 'GroupPermissionMinAggregateOutput'
    _max: 'GroupPermissionMaxAggregateOutput'
    _count: 'GroupPermissionCountAggregateOutput'


class GroupPermissionAvgAggregateOutput(TypedDict, total=False):
    """GroupPermission output for aggregating averages"""
    id: float
    groupId: float
    permissionId: float


class GroupPermissionSumAggregateOutput(TypedDict, total=False):
    """GroupPermission output for aggregating sums"""
    id: _int
    groupId: _int
    permissionId: _int


class GroupPermissionScalarAggregateOutput(TypedDict, total=False):
    """GroupPermission output including scalar fields"""
    id: _int
    groupId: _int
    permissionId: _int
    createdAt: datetime.datetime


GroupPermissionMinAggregateOutput = GroupPermissionScalarAggregateOutput
GroupPermissionMaxAggregateOutput = GroupPermissionScalarAggregateOutput


class GroupPermissionMaxAggregateInput(TypedDict, total=False):
    """GroupPermission input for aggregating by max"""
    id: bool
    groupId: bool
    permissionId: bool
    createdAt: bool


class GroupPermissionMinAggregateInput(TypedDict, total=False):
    """GroupPermission input for aggregating by min"""
    id: bool
    groupId: bool
    permissionId: bool
    createdAt: bool


class GroupPermissionNumberAggregateInput(TypedDict, total=False):
    """GroupPermission input for aggregating numbers"""
    id: bool
    groupId: bool
    permissionId: bool


GroupPermissionAvgAggregateInput = GroupPermissionNumberAggregateInput
GroupPermissionSumAggregateInput = GroupPermissionNumberAggregateInput


GroupPermissionCountAggregateInput = TypedDict(
    'GroupPermissionCountAggregateInput',
    {
        'id': bool,
        'groupId': bool,
        'permissionId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

GroupPermissionCountAggregateOutput = TypedDict(
    'GroupPermissionCountAggregateOutput',
    {
        'id': int,
        'groupId': int,
        'permissionId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


GroupPermissionKeys = Literal[
    'id',
    'groupId',
    'permissionId',
    'createdAt',
    'group',
    'permission',
]
GroupPermissionScalarFieldKeys = Literal[
    'id',
    'groupId',
    'permissionId',
    'createdAt',
]
GroupPermissionScalarFieldKeysT = TypeVar('GroupPermissionScalarFieldKeysT', bound=GroupPermissionScalarFieldKeys)

GroupPermissionRelationalFieldKeys = Literal[
        'group',
        'permission',
    ]

# Token types

class TokenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Token create method"""
    id: _int
    userId: _int
    createdAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class TokenCreateInput(TokenOptionalCreateInput):
    """Required arguments to the Token create method"""
    token: _str
    expiresAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TokenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Token create method, without relations"""
    id: _int
    userId: _int
    createdAt: datetime.datetime


class TokenCreateWithoutRelationsInput(TokenOptionalCreateWithoutRelationsInput):
    """Required arguments to the Token create method, without relations"""
    token: _str
    expiresAt: datetime.datetime

class TokenConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TokenCreateWithoutRelationsInput'
    where: 'TokenWhereUniqueInput'

class TokenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TokenCreateWithoutRelationsInput'
    connect: 'TokenWhereUniqueInput'
    connect_or_create: 'TokenConnectOrCreateWithoutRelationsInput'


class TokenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TokenCreateWithoutRelationsInput', List['TokenCreateWithoutRelationsInput']]
    connect: Union['TokenWhereUniqueInput', List['TokenWhereUniqueInput']]
    connect_or_create: Union['TokenConnectOrCreateWithoutRelationsInput', List['TokenConnectOrCreateWithoutRelationsInput']]

_TokenWhereUnique_id_Input = TypedDict(
    '_TokenWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_TokenWhereUnique_token_Input = TypedDict(
    '_TokenWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

TokenWhereUniqueInput = Union[
    '_TokenWhereUnique_id_Input',
    '_TokenWhereUnique_token_Input',
]


class TokenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    token: _str
    createdAt: datetime.datetime
    expiresAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class TokenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    token: _str
    createdAt: datetime.datetime
    expiresAt: datetime.datetime


class TokenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TokenCreateWithoutRelationsInput']
    connect: List['TokenWhereUniqueInput']
    connect_or_create: List['TokenConnectOrCreateWithoutRelationsInput']
    set: List['TokenWhereUniqueInput']
    disconnect: List['TokenWhereUniqueInput']
    delete: List['TokenWhereUniqueInput']

    # TODO
    # update: List['TokenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TokenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TokenScalarWhereInput']
    # upsert: List['TokenUpserteWithWhereUniqueWithoutRelationsInput']


class TokenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TokenCreateWithoutRelationsInput'
    connect: 'TokenWhereUniqueInput'
    connect_or_create: 'TokenConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TokenUpdateInput'
    # upsert: 'TokenUpsertWithoutRelationsInput'


class TokenUpsertInput(TypedDict):
    create: 'TokenCreateInput'
    update: 'TokenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Token_id_OrderByInput = TypedDict(
    '_Token_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Token_userId_OrderByInput = TypedDict(
    '_Token_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Token_token_OrderByInput = TypedDict(
    '_Token_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_Token_createdAt_OrderByInput = TypedDict(
    '_Token_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Token_expiresAt_OrderByInput = TypedDict(
    '_Token_expiresAt_OrderByInput',
    {
        'expiresAt': 'SortOrder',
    },
    total=True
)

_Token_RelevanceInner = TypedDict(
    '_Token_RelevanceInner',
    {
        'fields': 'List[TokenScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Token_RelevanceOrderByInput = TypedDict(
    '_Token_RelevanceOrderByInput',
    {
        '_relevance': '_Token_RelevanceInner',
    },
    total=True
)

TokenOrderByInput = Union[
    '_Token_id_OrderByInput',
    '_Token_userId_OrderByInput',
    '_Token_token_OrderByInput',
    '_Token_createdAt_OrderByInput',
    '_Token_expiresAt_OrderByInput',
    '_Token_RelevanceOrderByInput',
]



# recursive Token types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TokenRelationFilter = TypedDict(
    'TokenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TokenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TokenInclude(TypedDict, total=False):
    """Token relational arguments"""
    user: Union[bool, 'UserArgsFromToken']


    

class UserIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    groups: Union[bool, 'FindManyUserGroupArgsFromTokenRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromTokenRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromTokenRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromTokenRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromTokenRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromTokenRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromTokenRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromTokenRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromTokenRecursive1']


class UserIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    groups: Union[bool, 'FindManyUserGroupArgsFromTokenRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromTokenRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromTokenRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromTokenRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromTokenRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromTokenRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromTokenRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromTokenRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromTokenRecursive2']


class UserIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    groups: Union[bool, 'FindManyUserGroupArgsFromTokenRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromTokenRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromTokenRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromTokenRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromTokenRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromTokenRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromTokenRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromTokenRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromTokenRecursive3']


class UserIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    groups: Union[bool, 'FindManyUserGroupArgsFromTokenRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromTokenRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromTokenRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromTokenRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromTokenRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromTokenRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromTokenRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromTokenRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromTokenRecursive4']


class UserIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class UserArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyUserArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserGroupArgsFromTokenRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromTokenRecursive1']


class GroupIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserGroupArgsFromTokenRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromTokenRecursive2']


class GroupIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserGroupArgsFromTokenRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromTokenRecursive3']


class GroupIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserGroupArgsFromTokenRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromTokenRecursive4']


class GroupIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class GroupArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyGroupArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserPermissionArgsFromTokenRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromTokenRecursive1']


class PermissionIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserPermissionArgsFromTokenRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromTokenRecursive2']


class PermissionIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserPermissionArgsFromTokenRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromTokenRecursive3']


class PermissionIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserPermissionArgsFromTokenRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromTokenRecursive4']


class PermissionIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class PermissionArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyPermissionArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive1']
    group: Union[bool, 'GroupArgsFromTokenRecursive1']


class UserGroupIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive2']
    group: Union[bool, 'GroupArgsFromTokenRecursive2']


class UserGroupIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive3']
    group: Union[bool, 'GroupArgsFromTokenRecursive3']


class UserGroupIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive4']
    group: Union[bool, 'GroupArgsFromTokenRecursive4']


class UserGroupIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class UserGroupArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyUserGroupArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive1']
    permission: Union[bool, 'PermissionArgsFromTokenRecursive1']


class UserPermissionIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive2']
    permission: Union[bool, 'PermissionArgsFromTokenRecursive2']


class UserPermissionIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive3']
    permission: Union[bool, 'PermissionArgsFromTokenRecursive3']


class UserPermissionIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive4']
    permission: Union[bool, 'PermissionArgsFromTokenRecursive4']


class UserPermissionIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class UserPermissionArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyUserPermissionArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    group: Union[bool, 'GroupArgsFromTokenRecursive1']
    permission: Union[bool, 'PermissionArgsFromTokenRecursive1']


class GroupPermissionIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    group: Union[bool, 'GroupArgsFromTokenRecursive2']
    permission: Union[bool, 'PermissionArgsFromTokenRecursive2']


class GroupPermissionIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    group: Union[bool, 'GroupArgsFromTokenRecursive3']
    permission: Union[bool, 'PermissionArgsFromTokenRecursive3']


class GroupPermissionIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    group: Union[bool, 'GroupArgsFromTokenRecursive4']
    permission: Union[bool, 'PermissionArgsFromTokenRecursive4']


class GroupPermissionIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class GroupPermissionArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyGroupPermissionArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive1']


class TokenIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive2']


class TokenIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive3']


class TokenIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive4']


class TokenIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class TokenArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyTokenArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive1']


class SessionIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive2']


class SessionIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive3']


class SessionIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive4']


class SessionIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class SessionArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManySessionArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive1']
    parent: Union[bool, 'GenreArgsFromTokenRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromTokenRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive1']


class GenreIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive2']
    parent: Union[bool, 'GenreArgsFromTokenRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromTokenRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive2']


class GenreIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive3']
    parent: Union[bool, 'GenreArgsFromTokenRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromTokenRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive3']


class GenreIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive4']
    parent: Union[bool, 'GenreArgsFromTokenRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromTokenRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive4']


class GenreIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class GenreArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyGenreArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive1']


class AgeCategoryIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive2']


class AgeCategoryIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive3']


class AgeCategoryIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive4']


class AgeCategoryIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class AgeCategoryArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyAgeCategoryArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive1']


class AuthorIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive2']


class AuthorIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive3']


class AuthorIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    books: Union[bool, 'FindManyBookArgsFromTokenRecursive4']


class AuthorIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class AuthorArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyAuthorArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    author: Union[bool, 'AuthorArgsFromTokenRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromTokenRecursive1']
    genre: Union[bool, 'GenreArgsFromTokenRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromTokenRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromTokenRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromTokenRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive1']


class BookIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    author: Union[bool, 'AuthorArgsFromTokenRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromTokenRecursive2']
    genre: Union[bool, 'GenreArgsFromTokenRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromTokenRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromTokenRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromTokenRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive2']


class BookIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    author: Union[bool, 'AuthorArgsFromTokenRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromTokenRecursive3']
    genre: Union[bool, 'GenreArgsFromTokenRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromTokenRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromTokenRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromTokenRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive3']


class BookIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    author: Union[bool, 'AuthorArgsFromTokenRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromTokenRecursive4']
    genre: Union[bool, 'GenreArgsFromTokenRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromTokenRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromTokenRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromTokenRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromTokenRecursive4']


class BookIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class BookArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyBookArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive1']
    user: Union[bool, 'UserArgsFromTokenRecursive1']


class UserBookIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive2']
    user: Union[bool, 'UserArgsFromTokenRecursive2']


class UserBookIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive3']
    user: Union[bool, 'UserArgsFromTokenRecursive3']


class UserBookIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive4']
    user: Union[bool, 'UserArgsFromTokenRecursive4']


class UserBookIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class UserBookArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyUserBookArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive1']
    user: Union[bool, 'UserArgsFromTokenRecursive1']


class VoteIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive2']
    user: Union[bool, 'UserArgsFromTokenRecursive2']


class VoteIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive3']
    user: Union[bool, 'UserArgsFromTokenRecursive3']


class VoteIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive4']
    user: Union[bool, 'UserArgsFromTokenRecursive4']


class VoteIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class VoteArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyVoteArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive1']
    user: Union[bool, 'UserArgsFromTokenRecursive1']


class ReadingProgressIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive2']
    user: Union[bool, 'UserArgsFromTokenRecursive2']


class ReadingProgressIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive3']
    user: Union[bool, 'UserArgsFromTokenRecursive3']


class ReadingProgressIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    book: Union[bool, 'BookArgsFromTokenRecursive4']
    user: Union[bool, 'UserArgsFromTokenRecursive4']


class ReadingProgressIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class ReadingProgressArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyReadingProgressArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromTokenRecursive1']
    book: Union[bool, 'BookArgsFromTokenRecursive1']
    genre: Union[bool, 'GenreArgsFromTokenRecursive1']
    leader: Union[bool, 'UserArgsFromTokenRecursive1']


class WeeklyResultIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromTokenRecursive2']
    book: Union[bool, 'BookArgsFromTokenRecursive2']
    genre: Union[bool, 'GenreArgsFromTokenRecursive2']
    leader: Union[bool, 'UserArgsFromTokenRecursive2']


class WeeklyResultIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromTokenRecursive3']
    book: Union[bool, 'BookArgsFromTokenRecursive3']
    genre: Union[bool, 'GenreArgsFromTokenRecursive3']
    leader: Union[bool, 'UserArgsFromTokenRecursive3']


class WeeklyResultIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromTokenRecursive4']
    book: Union[bool, 'BookArgsFromTokenRecursive4']
    genre: Union[bool, 'GenreArgsFromTokenRecursive4']
    leader: Union[bool, 'UserArgsFromTokenRecursive4']


class WeeklyResultIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class WeeklyResultArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyWeeklyResultArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive1']


class NotificationIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive2']


class NotificationIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive3']


class NotificationIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive4']


class NotificationIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class NotificationArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyNotificationArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    partner: Union[bool, 'PartnerArgsFromTokenRecursive1']


class AdvertisementIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    partner: Union[bool, 'PartnerArgsFromTokenRecursive2']


class AdvertisementIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    partner: Union[bool, 'PartnerArgsFromTokenRecursive3']


class AdvertisementIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    partner: Union[bool, 'PartnerArgsFromTokenRecursive4']


class AdvertisementIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class AdvertisementArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyAdvertisementArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromTokenRecursive1']


class PartnerIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromTokenRecursive2']


class PartnerIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromTokenRecursive3']


class PartnerIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromTokenRecursive4']


class PartnerIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class PartnerArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyPartnerArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserAchievementArgsFromTokenRecursive1']


class AchievementIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserAchievementArgsFromTokenRecursive2']


class AchievementIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserAchievementArgsFromTokenRecursive3']


class AchievementIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    users: Union[bool, 'FindManyUserAchievementArgsFromTokenRecursive4']


class AchievementIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class AchievementArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyAchievementArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromToken(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive1']
    achievement: Union[bool, 'AchievementArgsFromTokenRecursive1']


class UserAchievementIncludeFromTokenRecursive1(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive2']
    achievement: Union[bool, 'AchievementArgsFromTokenRecursive2']


class UserAchievementIncludeFromTokenRecursive2(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive3']
    achievement: Union[bool, 'AchievementArgsFromTokenRecursive3']


class UserAchievementIncludeFromTokenRecursive3(TypedDict, total=False):
    """Relational arguments for Token"""
    user: Union[bool, 'UserArgsFromTokenRecursive4']
    achievement: Union[bool, 'AchievementArgsFromTokenRecursive4']


class UserAchievementIncludeFromTokenRecursive4(TypedDict, total=False):
    """Relational arguments for Token"""

    

class UserAchievementArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    
    

class FindManyUserAchievementArgsFromToken(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromTokenRecursive1(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromTokenRecursive2(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromTokenRecursive3(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromTokenRecursive4(TypedDict, total=False):
    """Arguments for Token"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyTokenArgs = FindManyTokenArgsFromToken
FindFirstTokenArgs = FindManyTokenArgsFromToken


    

class TokenWhereInput(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    token: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TokenWhereInputRecursive1', List['TokenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TokenWhereInputRecursive1']
    OR: List['TokenWhereInputRecursive1']
    NOT: List['TokenWhereInputRecursive1']


class TokenWhereInputRecursive1(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    token: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TokenWhereInputRecursive2', List['TokenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TokenWhereInputRecursive2']
    OR: List['TokenWhereInputRecursive2']
    NOT: List['TokenWhereInputRecursive2']


class TokenWhereInputRecursive2(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    token: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TokenWhereInputRecursive3', List['TokenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TokenWhereInputRecursive3']
    OR: List['TokenWhereInputRecursive3']
    NOT: List['TokenWhereInputRecursive3']


class TokenWhereInputRecursive3(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    token: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TokenWhereInputRecursive4', List['TokenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TokenWhereInputRecursive4']
    OR: List['TokenWhereInputRecursive4']
    NOT: List['TokenWhereInputRecursive4']


class TokenWhereInputRecursive4(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    token: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Token types


    

class TokenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TokenScalarWhereWithAggregatesInputRecursive1']
    OR: List['TokenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TokenScalarWhereWithAggregatesInputRecursive1']


class TokenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TokenScalarWhereWithAggregatesInputRecursive2']
    OR: List['TokenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TokenScalarWhereWithAggregatesInputRecursive2']


class TokenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TokenScalarWhereWithAggregatesInputRecursive3']
    OR: List['TokenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TokenScalarWhereWithAggregatesInputRecursive3']


class TokenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TokenScalarWhereWithAggregatesInputRecursive4']
    OR: List['TokenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TokenScalarWhereWithAggregatesInputRecursive4']


class TokenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Token arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class TokenGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    token: _str
    createdAt: datetime.datetime
    expiresAt: datetime.datetime
    _sum: 'TokenSumAggregateOutput'
    _avg: 'TokenAvgAggregateOutput'
    _min: 'TokenMinAggregateOutput'
    _max: 'TokenMaxAggregateOutput'
    _count: 'TokenCountAggregateOutput'


class TokenAvgAggregateOutput(TypedDict, total=False):
    """Token output for aggregating averages"""
    id: float
    userId: float


class TokenSumAggregateOutput(TypedDict, total=False):
    """Token output for aggregating sums"""
    id: _int
    userId: _int


class TokenScalarAggregateOutput(TypedDict, total=False):
    """Token output including scalar fields"""
    id: _int
    userId: _int
    token: _str
    createdAt: datetime.datetime
    expiresAt: datetime.datetime


TokenMinAggregateOutput = TokenScalarAggregateOutput
TokenMaxAggregateOutput = TokenScalarAggregateOutput


class TokenMaxAggregateInput(TypedDict, total=False):
    """Token input for aggregating by max"""
    id: bool
    userId: bool
    token: bool
    createdAt: bool
    expiresAt: bool


class TokenMinAggregateInput(TypedDict, total=False):
    """Token input for aggregating by min"""
    id: bool
    userId: bool
    token: bool
    createdAt: bool
    expiresAt: bool


class TokenNumberAggregateInput(TypedDict, total=False):
    """Token input for aggregating numbers"""
    id: bool
    userId: bool


TokenAvgAggregateInput = TokenNumberAggregateInput
TokenSumAggregateInput = TokenNumberAggregateInput


TokenCountAggregateInput = TypedDict(
    'TokenCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'token': bool,
        'createdAt': bool,
        'expiresAt': bool,
        '_all': bool,
    },
    total=False,
)

TokenCountAggregateOutput = TypedDict(
    'TokenCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'token': int,
        'createdAt': int,
        'expiresAt': int,
        '_all': int,
    },
    total=False,
)


TokenKeys = Literal[
    'id',
    'userId',
    'token',
    'createdAt',
    'expiresAt',
    'user',
]
TokenScalarFieldKeys = Literal[
    'id',
    'userId',
    'token',
    'createdAt',
    'expiresAt',
]
TokenScalarFieldKeysT = TypeVar('TokenScalarFieldKeysT', bound=TokenScalarFieldKeys)

TokenRelationalFieldKeys = Literal[
        'user',
    ]

# Session types

class SessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Session create method"""
    id: _int
    userId: _int
    createdAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class SessionCreateInput(SessionOptionalCreateInput):
    """Required arguments to the Session create method"""
    sessionKey: _str
    expiresAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Session create method, without relations"""
    id: _int
    userId: _int
    createdAt: datetime.datetime


class SessionCreateWithoutRelationsInput(SessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Session create method, without relations"""
    sessionKey: _str
    expiresAt: datetime.datetime

class SessionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SessionCreateWithoutRelationsInput'
    where: 'SessionWhereUniqueInput'

class SessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'


class SessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SessionCreateWithoutRelationsInput', List['SessionCreateWithoutRelationsInput']]
    connect: Union['SessionWhereUniqueInput', List['SessionWhereUniqueInput']]
    connect_or_create: Union['SessionConnectOrCreateWithoutRelationsInput', List['SessionConnectOrCreateWithoutRelationsInput']]

_SessionWhereUnique_id_Input = TypedDict(
    '_SessionWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_SessionWhereUnique_sessionKey_Input = TypedDict(
    '_SessionWhereUnique_sessionKey_Input',
    {
        'sessionKey': '_str',
    },
    total=True
)

SessionWhereUniqueInput = Union[
    '_SessionWhereUnique_id_Input',
    '_SessionWhereUnique_sessionKey_Input',
]


class SessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    sessionKey: _str
    createdAt: datetime.datetime
    expiresAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class SessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    sessionKey: _str
    createdAt: datetime.datetime
    expiresAt: datetime.datetime


class SessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SessionCreateWithoutRelationsInput']
    connect: List['SessionWhereUniqueInput']
    connect_or_create: List['SessionConnectOrCreateWithoutRelationsInput']
    set: List['SessionWhereUniqueInput']
    disconnect: List['SessionWhereUniqueInput']
    delete: List['SessionWhereUniqueInput']

    # TODO
    # update: List['SessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SessionScalarWhereInput']
    # upsert: List['SessionUpserteWithWhereUniqueWithoutRelationsInput']


class SessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SessionUpdateInput'
    # upsert: 'SessionUpsertWithoutRelationsInput'


class SessionUpsertInput(TypedDict):
    create: 'SessionCreateInput'
    update: 'SessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Session_id_OrderByInput = TypedDict(
    '_Session_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Session_userId_OrderByInput = TypedDict(
    '_Session_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Session_sessionKey_OrderByInput = TypedDict(
    '_Session_sessionKey_OrderByInput',
    {
        'sessionKey': 'SortOrder',
    },
    total=True
)

_Session_createdAt_OrderByInput = TypedDict(
    '_Session_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Session_expiresAt_OrderByInput = TypedDict(
    '_Session_expiresAt_OrderByInput',
    {
        'expiresAt': 'SortOrder',
    },
    total=True
)

_Session_RelevanceInner = TypedDict(
    '_Session_RelevanceInner',
    {
        'fields': 'List[SessionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Session_RelevanceOrderByInput = TypedDict(
    '_Session_RelevanceOrderByInput',
    {
        '_relevance': '_Session_RelevanceInner',
    },
    total=True
)

SessionOrderByInput = Union[
    '_Session_id_OrderByInput',
    '_Session_userId_OrderByInput',
    '_Session_sessionKey_OrderByInput',
    '_Session_createdAt_OrderByInput',
    '_Session_expiresAt_OrderByInput',
    '_Session_RelevanceOrderByInput',
]



# recursive Session types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SessionRelationFilter = TypedDict(
    'SessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SessionInclude(TypedDict, total=False):
    """Session relational arguments"""
    user: Union[bool, 'UserArgsFromSession']


    

class UserIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    groups: Union[bool, 'FindManyUserGroupArgsFromSessionRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromSessionRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromSessionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromSessionRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromSessionRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromSessionRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromSessionRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromSessionRecursive1']


class UserIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    groups: Union[bool, 'FindManyUserGroupArgsFromSessionRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromSessionRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromSessionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromSessionRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromSessionRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromSessionRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromSessionRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromSessionRecursive2']


class UserIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    groups: Union[bool, 'FindManyUserGroupArgsFromSessionRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromSessionRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromSessionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromSessionRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromSessionRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromSessionRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromSessionRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromSessionRecursive3']


class UserIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    groups: Union[bool, 'FindManyUserGroupArgsFromSessionRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromSessionRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromSessionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromSessionRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromSessionRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromSessionRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromSessionRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromSessionRecursive4']


class UserIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserGroupArgsFromSessionRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromSessionRecursive1']


class GroupIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserGroupArgsFromSessionRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromSessionRecursive2']


class GroupIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserGroupArgsFromSessionRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromSessionRecursive3']


class GroupIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserGroupArgsFromSessionRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromSessionRecursive4']


class GroupIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class GroupArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyGroupArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserPermissionArgsFromSessionRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromSessionRecursive1']


class PermissionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserPermissionArgsFromSessionRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromSessionRecursive2']


class PermissionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserPermissionArgsFromSessionRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromSessionRecursive3']


class PermissionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserPermissionArgsFromSessionRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromSessionRecursive4']


class PermissionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class PermissionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyPermissionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    group: Union[bool, 'GroupArgsFromSessionRecursive1']


class UserGroupIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    group: Union[bool, 'GroupArgsFromSessionRecursive2']


class UserGroupIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    group: Union[bool, 'GroupArgsFromSessionRecursive3']


class UserGroupIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    group: Union[bool, 'GroupArgsFromSessionRecursive4']


class UserGroupIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserGroupArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserGroupArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    permission: Union[bool, 'PermissionArgsFromSessionRecursive1']


class UserPermissionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    permission: Union[bool, 'PermissionArgsFromSessionRecursive2']


class UserPermissionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    permission: Union[bool, 'PermissionArgsFromSessionRecursive3']


class UserPermissionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    permission: Union[bool, 'PermissionArgsFromSessionRecursive4']


class UserPermissionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserPermissionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserPermissionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    group: Union[bool, 'GroupArgsFromSessionRecursive1']
    permission: Union[bool, 'PermissionArgsFromSessionRecursive1']


class GroupPermissionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    group: Union[bool, 'GroupArgsFromSessionRecursive2']
    permission: Union[bool, 'PermissionArgsFromSessionRecursive2']


class GroupPermissionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    group: Union[bool, 'GroupArgsFromSessionRecursive3']
    permission: Union[bool, 'PermissionArgsFromSessionRecursive3']


class GroupPermissionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    group: Union[bool, 'GroupArgsFromSessionRecursive4']
    permission: Union[bool, 'PermissionArgsFromSessionRecursive4']


class GroupPermissionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class GroupPermissionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyGroupPermissionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class TokenIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class TokenIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class TokenIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class TokenIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class TokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class SessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class SessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class SessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class SessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive1']
    parent: Union[bool, 'GenreArgsFromSessionRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromSessionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive1']


class GenreIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive2']
    parent: Union[bool, 'GenreArgsFromSessionRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromSessionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive2']


class GenreIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive3']
    parent: Union[bool, 'GenreArgsFromSessionRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromSessionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive3']


class GenreIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive4']
    parent: Union[bool, 'GenreArgsFromSessionRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromSessionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive4']


class GenreIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class GenreArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyGenreArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive1']


class AgeCategoryIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive2']


class AgeCategoryIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive3']


class AgeCategoryIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive4']


class AgeCategoryIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AgeCategoryArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAgeCategoryArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive1']


class AuthorIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive2']


class AuthorIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive3']


class AuthorIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    books: Union[bool, 'FindManyBookArgsFromSessionRecursive4']


class AuthorIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AuthorArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAuthorArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    author: Union[bool, 'AuthorArgsFromSessionRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromSessionRecursive1']
    genre: Union[bool, 'GenreArgsFromSessionRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromSessionRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromSessionRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromSessionRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive1']


class BookIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    author: Union[bool, 'AuthorArgsFromSessionRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromSessionRecursive2']
    genre: Union[bool, 'GenreArgsFromSessionRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromSessionRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromSessionRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromSessionRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive2']


class BookIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    author: Union[bool, 'AuthorArgsFromSessionRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromSessionRecursive3']
    genre: Union[bool, 'GenreArgsFromSessionRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromSessionRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromSessionRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromSessionRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive3']


class BookIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    author: Union[bool, 'AuthorArgsFromSessionRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromSessionRecursive4']
    genre: Union[bool, 'GenreArgsFromSessionRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromSessionRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromSessionRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromSessionRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromSessionRecursive4']


class BookIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class BookArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyBookArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive1']
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class UserBookIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive2']
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class UserBookIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive3']
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class UserBookIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive4']
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class UserBookIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserBookArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserBookArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive1']
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class VoteIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive2']
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class VoteIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive3']
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class VoteIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive4']
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class VoteIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class VoteArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyVoteArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive1']
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class ReadingProgressIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive2']
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class ReadingProgressIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive3']
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class ReadingProgressIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    book: Union[bool, 'BookArgsFromSessionRecursive4']
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class ReadingProgressIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class ReadingProgressArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyReadingProgressArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromSessionRecursive1']
    book: Union[bool, 'BookArgsFromSessionRecursive1']
    genre: Union[bool, 'GenreArgsFromSessionRecursive1']
    leader: Union[bool, 'UserArgsFromSessionRecursive1']


class WeeklyResultIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromSessionRecursive2']
    book: Union[bool, 'BookArgsFromSessionRecursive2']
    genre: Union[bool, 'GenreArgsFromSessionRecursive2']
    leader: Union[bool, 'UserArgsFromSessionRecursive2']


class WeeklyResultIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromSessionRecursive3']
    book: Union[bool, 'BookArgsFromSessionRecursive3']
    genre: Union[bool, 'GenreArgsFromSessionRecursive3']
    leader: Union[bool, 'UserArgsFromSessionRecursive3']


class WeeklyResultIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromSessionRecursive4']
    book: Union[bool, 'BookArgsFromSessionRecursive4']
    genre: Union[bool, 'GenreArgsFromSessionRecursive4']
    leader: Union[bool, 'UserArgsFromSessionRecursive4']


class WeeklyResultIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class WeeklyResultArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyWeeklyResultArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class NotificationIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class NotificationIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class NotificationIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class NotificationIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class NotificationArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyNotificationArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    partner: Union[bool, 'PartnerArgsFromSessionRecursive1']


class AdvertisementIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    partner: Union[bool, 'PartnerArgsFromSessionRecursive2']


class AdvertisementIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    partner: Union[bool, 'PartnerArgsFromSessionRecursive3']


class AdvertisementIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    partner: Union[bool, 'PartnerArgsFromSessionRecursive4']


class AdvertisementIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AdvertisementArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAdvertisementArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromSessionRecursive1']


class PartnerIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromSessionRecursive2']


class PartnerIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromSessionRecursive3']


class PartnerIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromSessionRecursive4']


class PartnerIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class PartnerArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyPartnerArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserAchievementArgsFromSessionRecursive1']


class AchievementIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserAchievementArgsFromSessionRecursive2']


class AchievementIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserAchievementArgsFromSessionRecursive3']


class AchievementIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    users: Union[bool, 'FindManyUserAchievementArgsFromSessionRecursive4']


class AchievementIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AchievementArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAchievementArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    achievement: Union[bool, 'AchievementArgsFromSessionRecursive1']


class UserAchievementIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    achievement: Union[bool, 'AchievementArgsFromSessionRecursive2']


class UserAchievementIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    achievement: Union[bool, 'AchievementArgsFromSessionRecursive3']


class UserAchievementIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    achievement: Union[bool, 'AchievementArgsFromSessionRecursive4']


class UserAchievementIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserAchievementArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserAchievementArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManySessionArgs = FindManySessionArgsFromSession
FindFirstSessionArgs = FindManySessionArgsFromSession


    

class SessionWhereInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    sessionKey: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive1', List['SessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive1']
    OR: List['SessionWhereInputRecursive1']
    NOT: List['SessionWhereInputRecursive1']


class SessionWhereInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    sessionKey: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive2', List['SessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive2']
    OR: List['SessionWhereInputRecursive2']
    NOT: List['SessionWhereInputRecursive2']


class SessionWhereInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    sessionKey: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive3', List['SessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive3']
    OR: List['SessionWhereInputRecursive3']
    NOT: List['SessionWhereInputRecursive3']


class SessionWhereInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    sessionKey: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive4', List['SessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive4']
    OR: List['SessionWhereInputRecursive4']
    NOT: List['SessionWhereInputRecursive4']


class SessionWhereInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    sessionKey: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Session types


    

class SessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    sessionKey: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive1']


class SessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    sessionKey: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive2']


class SessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    sessionKey: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive3']


class SessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    sessionKey: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive4']


class SessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    sessionKey: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SessionGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    sessionKey: _str
    createdAt: datetime.datetime
    expiresAt: datetime.datetime
    _sum: 'SessionSumAggregateOutput'
    _avg: 'SessionAvgAggregateOutput'
    _min: 'SessionMinAggregateOutput'
    _max: 'SessionMaxAggregateOutput'
    _count: 'SessionCountAggregateOutput'


class SessionAvgAggregateOutput(TypedDict, total=False):
    """Session output for aggregating averages"""
    id: float
    userId: float


class SessionSumAggregateOutput(TypedDict, total=False):
    """Session output for aggregating sums"""
    id: _int
    userId: _int


class SessionScalarAggregateOutput(TypedDict, total=False):
    """Session output including scalar fields"""
    id: _int
    userId: _int
    sessionKey: _str
    createdAt: datetime.datetime
    expiresAt: datetime.datetime


SessionMinAggregateOutput = SessionScalarAggregateOutput
SessionMaxAggregateOutput = SessionScalarAggregateOutput


class SessionMaxAggregateInput(TypedDict, total=False):
    """Session input for aggregating by max"""
    id: bool
    userId: bool
    sessionKey: bool
    createdAt: bool
    expiresAt: bool


class SessionMinAggregateInput(TypedDict, total=False):
    """Session input for aggregating by min"""
    id: bool
    userId: bool
    sessionKey: bool
    createdAt: bool
    expiresAt: bool


class SessionNumberAggregateInput(TypedDict, total=False):
    """Session input for aggregating numbers"""
    id: bool
    userId: bool


SessionAvgAggregateInput = SessionNumberAggregateInput
SessionSumAggregateInput = SessionNumberAggregateInput


SessionCountAggregateInput = TypedDict(
    'SessionCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'sessionKey': bool,
        'createdAt': bool,
        'expiresAt': bool,
        '_all': bool,
    },
    total=False,
)

SessionCountAggregateOutput = TypedDict(
    'SessionCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'sessionKey': int,
        'createdAt': int,
        'expiresAt': int,
        '_all': int,
    },
    total=False,
)


SessionKeys = Literal[
    'id',
    'userId',
    'sessionKey',
    'createdAt',
    'expiresAt',
    'user',
]
SessionScalarFieldKeys = Literal[
    'id',
    'userId',
    'sessionKey',
    'createdAt',
    'expiresAt',
]
SessionScalarFieldKeysT = TypeVar('SessionScalarFieldKeysT', bound=SessionScalarFieldKeys)

SessionRelationalFieldKeys = Literal[
        'user',
    ]

# Genre types

class GenreOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Genre create method"""
    createdAt: Optional[datetime.datetime]
    updatedAt: Optional[datetime.datetime]
    id: _int
    parentId: Optional[_int]
    books: 'BookCreateManyNestedWithoutRelationsInput'
    parent: 'GenreCreateNestedWithoutRelationsInput'
    subgenres: 'GenreCreateManyNestedWithoutRelationsInput'
    weeklyResults: 'WeeklyResultCreateManyNestedWithoutRelationsInput'


class GenreCreateInput(GenreOptionalCreateInput):
    """Required arguments to the Genre create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class GenreOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Genre create method, without relations"""
    createdAt: Optional[datetime.datetime]
    updatedAt: Optional[datetime.datetime]
    id: _int
    parentId: Optional[_int]


class GenreCreateWithoutRelationsInput(GenreOptionalCreateWithoutRelationsInput):
    """Required arguments to the Genre create method, without relations"""
    name: _str

class GenreConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'GenreCreateWithoutRelationsInput'
    where: 'GenreWhereUniqueInput'

class GenreCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'GenreCreateWithoutRelationsInput'
    connect: 'GenreWhereUniqueInput'
    connect_or_create: 'GenreConnectOrCreateWithoutRelationsInput'


class GenreCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['GenreCreateWithoutRelationsInput', List['GenreCreateWithoutRelationsInput']]
    connect: Union['GenreWhereUniqueInput', List['GenreWhereUniqueInput']]
    connect_or_create: Union['GenreConnectOrCreateWithoutRelationsInput', List['GenreConnectOrCreateWithoutRelationsInput']]

_GenreWhereUnique_id_Input = TypedDict(
    '_GenreWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

GenreWhereUniqueInput = _GenreWhereUnique_id_Input


class GenreUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    name: _str
    createdAt: Optional[datetime.datetime]
    updatedAt: Optional[datetime.datetime]
    id: Union[AtomicIntInput, _int]
    books: 'BookUpdateManyWithoutRelationsInput'
    parent: 'GenreUpdateOneWithoutRelationsInput'
    subgenres: 'GenreUpdateManyWithoutRelationsInput'
    weeklyResults: 'WeeklyResultUpdateManyWithoutRelationsInput'


class GenreUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    name: _str
    createdAt: Optional[datetime.datetime]
    updatedAt: Optional[datetime.datetime]
    id: Union[AtomicIntInput, _int]


class GenreUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['GenreCreateWithoutRelationsInput']
    connect: List['GenreWhereUniqueInput']
    connect_or_create: List['GenreConnectOrCreateWithoutRelationsInput']
    set: List['GenreWhereUniqueInput']
    disconnect: List['GenreWhereUniqueInput']
    delete: List['GenreWhereUniqueInput']

    # TODO
    # update: List['GenreUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['GenreUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['GenreScalarWhereInput']
    # upsert: List['GenreUpserteWithWhereUniqueWithoutRelationsInput']


class GenreUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'GenreCreateWithoutRelationsInput'
    connect: 'GenreWhereUniqueInput'
    connect_or_create: 'GenreConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'GenreUpdateInput'
    # upsert: 'GenreUpsertWithoutRelationsInput'


class GenreUpsertInput(TypedDict):
    create: 'GenreCreateInput'
    update: 'GenreUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Genre_name_OrderByInput = TypedDict(
    '_Genre_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Genre_createdAt_OrderByInput = TypedDict(
    '_Genre_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Genre_updatedAt_OrderByInput = TypedDict(
    '_Genre_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Genre_id_OrderByInput = TypedDict(
    '_Genre_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Genre_parentId_OrderByInput = TypedDict(
    '_Genre_parentId_OrderByInput',
    {
        'parentId': 'SortOrder',
    },
    total=True
)

_Genre_RelevanceInner = TypedDict(
    '_Genre_RelevanceInner',
    {
        'fields': 'List[GenreScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Genre_RelevanceOrderByInput = TypedDict(
    '_Genre_RelevanceOrderByInput',
    {
        '_relevance': '_Genre_RelevanceInner',
    },
    total=True
)

GenreOrderByInput = Union[
    '_Genre_name_OrderByInput',
    '_Genre_createdAt_OrderByInput',
    '_Genre_updatedAt_OrderByInput',
    '_Genre_id_OrderByInput',
    '_Genre_parentId_OrderByInput',
    '_Genre_RelevanceOrderByInput',
]



# recursive Genre types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

GenreRelationFilter = TypedDict(
    'GenreRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class GenreListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class GenreInclude(TypedDict, total=False):
    """Genre relational arguments"""
    books: Union[bool, 'FindManyBookArgsFromGenre']
    parent: Union[bool, 'GenreArgsFromGenre']
    subgenres: Union[bool, 'FindManyGenreArgsFromGenre']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenre']


    

class UserIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGenreRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGenreRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromGenreRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromGenreRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromGenreRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGenreRecursive1']


class UserIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGenreRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGenreRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromGenreRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromGenreRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromGenreRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGenreRecursive2']


class UserIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGenreRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGenreRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromGenreRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromGenreRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromGenreRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGenreRecursive3']


class UserIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    groups: Union[bool, 'FindManyUserGroupArgsFromGenreRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromGenreRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromGenreRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromGenreRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromGenreRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromGenreRecursive4']


class UserIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class UserArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyUserArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserGroupArgsFromGenreRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGenreRecursive1']


class GroupIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserGroupArgsFromGenreRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGenreRecursive2']


class GroupIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserGroupArgsFromGenreRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGenreRecursive3']


class GroupIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserGroupArgsFromGenreRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromGenreRecursive4']


class GroupIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class GroupArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyGroupArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGenreRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGenreRecursive1']


class PermissionIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGenreRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGenreRecursive2']


class PermissionIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGenreRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGenreRecursive3']


class PermissionIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserPermissionArgsFromGenreRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromGenreRecursive4']


class PermissionIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class PermissionArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyPermissionArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive1']
    group: Union[bool, 'GroupArgsFromGenreRecursive1']


class UserGroupIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive2']
    group: Union[bool, 'GroupArgsFromGenreRecursive2']


class UserGroupIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive3']
    group: Union[bool, 'GroupArgsFromGenreRecursive3']


class UserGroupIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive4']
    group: Union[bool, 'GroupArgsFromGenreRecursive4']


class UserGroupIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class UserGroupArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyUserGroupArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive1']
    permission: Union[bool, 'PermissionArgsFromGenreRecursive1']


class UserPermissionIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive2']
    permission: Union[bool, 'PermissionArgsFromGenreRecursive2']


class UserPermissionIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive3']
    permission: Union[bool, 'PermissionArgsFromGenreRecursive3']


class UserPermissionIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive4']
    permission: Union[bool, 'PermissionArgsFromGenreRecursive4']


class UserPermissionIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class UserPermissionArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyUserPermissionArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    group: Union[bool, 'GroupArgsFromGenreRecursive1']
    permission: Union[bool, 'PermissionArgsFromGenreRecursive1']


class GroupPermissionIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    group: Union[bool, 'GroupArgsFromGenreRecursive2']
    permission: Union[bool, 'PermissionArgsFromGenreRecursive2']


class GroupPermissionIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    group: Union[bool, 'GroupArgsFromGenreRecursive3']
    permission: Union[bool, 'PermissionArgsFromGenreRecursive3']


class GroupPermissionIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    group: Union[bool, 'GroupArgsFromGenreRecursive4']
    permission: Union[bool, 'PermissionArgsFromGenreRecursive4']


class GroupPermissionIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class GroupPermissionArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyGroupPermissionArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive1']


class TokenIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive2']


class TokenIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive3']


class TokenIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive4']


class TokenIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class TokenArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyTokenArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive1']


class SessionIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive2']


class SessionIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive3']


class SessionIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive4']


class SessionIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class SessionArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManySessionArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive1']
    parent: Union[bool, 'GenreArgsFromGenreRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromGenreRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive1']


class GenreIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive2']
    parent: Union[bool, 'GenreArgsFromGenreRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromGenreRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive2']


class GenreIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive3']
    parent: Union[bool, 'GenreArgsFromGenreRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromGenreRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive3']


class GenreIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive4']
    parent: Union[bool, 'GenreArgsFromGenreRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromGenreRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive4']


class GenreIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class GenreArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyGenreArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive1']


class AgeCategoryIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive2']


class AgeCategoryIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive3']


class AgeCategoryIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive4']


class AgeCategoryIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class AgeCategoryArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyAgeCategoryArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive1']


class AuthorIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive2']


class AuthorIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive3']


class AuthorIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive4']


class AuthorIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class AuthorArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyAuthorArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    author: Union[bool, 'AuthorArgsFromGenreRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive1']
    genre: Union[bool, 'GenreArgsFromGenreRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive1']


class BookIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    author: Union[bool, 'AuthorArgsFromGenreRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive2']
    genre: Union[bool, 'GenreArgsFromGenreRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive2']


class BookIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    author: Union[bool, 'AuthorArgsFromGenreRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive3']
    genre: Union[bool, 'GenreArgsFromGenreRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive3']


class BookIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    author: Union[bool, 'AuthorArgsFromGenreRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive4']
    genre: Union[bool, 'GenreArgsFromGenreRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive4']


class BookIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class BookArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyBookArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive1']
    user: Union[bool, 'UserArgsFromGenreRecursive1']


class UserBookIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive2']
    user: Union[bool, 'UserArgsFromGenreRecursive2']


class UserBookIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive3']
    user: Union[bool, 'UserArgsFromGenreRecursive3']


class UserBookIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive4']
    user: Union[bool, 'UserArgsFromGenreRecursive4']


class UserBookIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class UserBookArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyUserBookArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive1']
    user: Union[bool, 'UserArgsFromGenreRecursive1']


class VoteIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive2']
    user: Union[bool, 'UserArgsFromGenreRecursive2']


class VoteIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive3']
    user: Union[bool, 'UserArgsFromGenreRecursive3']


class VoteIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive4']
    user: Union[bool, 'UserArgsFromGenreRecursive4']


class VoteIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class VoteArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyVoteArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive1']
    user: Union[bool, 'UserArgsFromGenreRecursive1']


class ReadingProgressIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive2']
    user: Union[bool, 'UserArgsFromGenreRecursive2']


class ReadingProgressIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive3']
    user: Union[bool, 'UserArgsFromGenreRecursive3']


class ReadingProgressIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    book: Union[bool, 'BookArgsFromGenreRecursive4']
    user: Union[bool, 'UserArgsFromGenreRecursive4']


class ReadingProgressIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class ReadingProgressArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyReadingProgressArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive1']
    book: Union[bool, 'BookArgsFromGenreRecursive1']
    genre: Union[bool, 'GenreArgsFromGenreRecursive1']
    leader: Union[bool, 'UserArgsFromGenreRecursive1']


class WeeklyResultIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive2']
    book: Union[bool, 'BookArgsFromGenreRecursive2']
    genre: Union[bool, 'GenreArgsFromGenreRecursive2']
    leader: Union[bool, 'UserArgsFromGenreRecursive2']


class WeeklyResultIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive3']
    book: Union[bool, 'BookArgsFromGenreRecursive3']
    genre: Union[bool, 'GenreArgsFromGenreRecursive3']
    leader: Union[bool, 'UserArgsFromGenreRecursive3']


class WeeklyResultIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive4']
    book: Union[bool, 'BookArgsFromGenreRecursive4']
    genre: Union[bool, 'GenreArgsFromGenreRecursive4']
    leader: Union[bool, 'UserArgsFromGenreRecursive4']


class WeeklyResultIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class WeeklyResultArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyWeeklyResultArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive1']


class NotificationIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive2']


class NotificationIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive3']


class NotificationIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive4']


class NotificationIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class NotificationArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyNotificationArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    partner: Union[bool, 'PartnerArgsFromGenreRecursive1']


class AdvertisementIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    partner: Union[bool, 'PartnerArgsFromGenreRecursive2']


class AdvertisementIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    partner: Union[bool, 'PartnerArgsFromGenreRecursive3']


class AdvertisementIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    partner: Union[bool, 'PartnerArgsFromGenreRecursive4']


class AdvertisementIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class AdvertisementArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyAdvertisementArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGenreRecursive1']


class PartnerIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGenreRecursive2']


class PartnerIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGenreRecursive3']


class PartnerIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGenreRecursive4']


class PartnerIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class PartnerArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyPartnerArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGenreRecursive1']


class AchievementIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGenreRecursive2']


class AchievementIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGenreRecursive3']


class AchievementIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    users: Union[bool, 'FindManyUserAchievementArgsFromGenreRecursive4']


class AchievementIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class AchievementArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyAchievementArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive1']
    achievement: Union[bool, 'AchievementArgsFromGenreRecursive1']


class UserAchievementIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive2']
    achievement: Union[bool, 'AchievementArgsFromGenreRecursive2']


class UserAchievementIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive3']
    achievement: Union[bool, 'AchievementArgsFromGenreRecursive3']


class UserAchievementIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive4']
    achievement: Union[bool, 'AchievementArgsFromGenreRecursive4']


class UserAchievementIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class UserAchievementArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyUserAchievementArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyGenreArgs = FindManyGenreArgsFromGenre
FindFirstGenreArgs = FindManyGenreArgsFromGenre


    

class GenreWhereInput(TypedDict, total=False):
    """Genre arguments for searching"""
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    parentId: Union[None, _int, 'types.IntFilter']
    books: 'BookListRelationFilter'
    parent: 'GenreRelationFilter'
    subgenres: 'GenreListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['GenreWhereInputRecursive1', List['GenreWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['GenreWhereInputRecursive1']
    OR: List['GenreWhereInputRecursive1']
    NOT: List['GenreWhereInputRecursive1']


class GenreWhereInputRecursive1(TypedDict, total=False):
    """Genre arguments for searching"""
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    parentId: Union[None, _int, 'types.IntFilter']
    books: 'BookListRelationFilter'
    parent: 'GenreRelationFilter'
    subgenres: 'GenreListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['GenreWhereInputRecursive2', List['GenreWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['GenreWhereInputRecursive2']
    OR: List['GenreWhereInputRecursive2']
    NOT: List['GenreWhereInputRecursive2']


class GenreWhereInputRecursive2(TypedDict, total=False):
    """Genre arguments for searching"""
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    parentId: Union[None, _int, 'types.IntFilter']
    books: 'BookListRelationFilter'
    parent: 'GenreRelationFilter'
    subgenres: 'GenreListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['GenreWhereInputRecursive3', List['GenreWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['GenreWhereInputRecursive3']
    OR: List['GenreWhereInputRecursive3']
    NOT: List['GenreWhereInputRecursive3']


class GenreWhereInputRecursive3(TypedDict, total=False):
    """Genre arguments for searching"""
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    parentId: Union[None, _int, 'types.IntFilter']
    books: 'BookListRelationFilter'
    parent: 'GenreRelationFilter'
    subgenres: 'GenreListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['GenreWhereInputRecursive4', List['GenreWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['GenreWhereInputRecursive4']
    OR: List['GenreWhereInputRecursive4']
    NOT: List['GenreWhereInputRecursive4']


class GenreWhereInputRecursive4(TypedDict, total=False):
    """Genre arguments for searching"""
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    id: Union[_int, 'types.IntFilter']
    parentId: Union[None, _int, 'types.IntFilter']
    books: 'BookListRelationFilter'
    parent: 'GenreRelationFilter'
    subgenres: 'GenreListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'



# aggregate Genre types


    

class GenreScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Genre arguments for searching"""
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    parentId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['GenreScalarWhereWithAggregatesInputRecursive1']
    OR: List['GenreScalarWhereWithAggregatesInputRecursive1']
    NOT: List['GenreScalarWhereWithAggregatesInputRecursive1']


class GenreScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Genre arguments for searching"""
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    parentId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['GenreScalarWhereWithAggregatesInputRecursive2']
    OR: List['GenreScalarWhereWithAggregatesInputRecursive2']
    NOT: List['GenreScalarWhereWithAggregatesInputRecursive2']


class GenreScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Genre arguments for searching"""
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    parentId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['GenreScalarWhereWithAggregatesInputRecursive3']
    OR: List['GenreScalarWhereWithAggregatesInputRecursive3']
    NOT: List['GenreScalarWhereWithAggregatesInputRecursive3']


class GenreScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Genre arguments for searching"""
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    parentId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['GenreScalarWhereWithAggregatesInputRecursive4']
    OR: List['GenreScalarWhereWithAggregatesInputRecursive4']
    NOT: List['GenreScalarWhereWithAggregatesInputRecursive4']


class GenreScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Genre arguments for searching"""
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    id: Union[_int, 'types.IntWithAggregatesFilter']
    parentId: Union[_int, 'types.IntWithAggregatesFilter']



class GenreGroupByOutput(TypedDict, total=False):
    name: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: _int
    parentId: _int
    _sum: 'GenreSumAggregateOutput'
    _avg: 'GenreAvgAggregateOutput'
    _min: 'GenreMinAggregateOutput'
    _max: 'GenreMaxAggregateOutput'
    _count: 'GenreCountAggregateOutput'


class GenreAvgAggregateOutput(TypedDict, total=False):
    """Genre output for aggregating averages"""
    id: float
    parentId: float


class GenreSumAggregateOutput(TypedDict, total=False):
    """Genre output for aggregating sums"""
    id: _int
    parentId: _int


class GenreScalarAggregateOutput(TypedDict, total=False):
    """Genre output including scalar fields"""
    name: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    id: _int
    parentId: _int


GenreMinAggregateOutput = GenreScalarAggregateOutput
GenreMaxAggregateOutput = GenreScalarAggregateOutput


class GenreMaxAggregateInput(TypedDict, total=False):
    """Genre input for aggregating by max"""
    name: bool
    createdAt: bool
    updatedAt: bool
    id: bool
    parentId: bool


class GenreMinAggregateInput(TypedDict, total=False):
    """Genre input for aggregating by min"""
    name: bool
    createdAt: bool
    updatedAt: bool
    id: bool
    parentId: bool


class GenreNumberAggregateInput(TypedDict, total=False):
    """Genre input for aggregating numbers"""
    id: bool
    parentId: bool


GenreAvgAggregateInput = GenreNumberAggregateInput
GenreSumAggregateInput = GenreNumberAggregateInput


GenreCountAggregateInput = TypedDict(
    'GenreCountAggregateInput',
    {
        'name': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'id': bool,
        'parentId': bool,
        '_all': bool,
    },
    total=False,
)

GenreCountAggregateOutput = TypedDict(
    'GenreCountAggregateOutput',
    {
        'name': int,
        'createdAt': int,
        'updatedAt': int,
        'id': int,
        'parentId': int,
        '_all': int,
    },
    total=False,
)


GenreKeys = Literal[
    'name',
    'createdAt',
    'updatedAt',
    'id',
    'parentId',
    'books',
    'parent',
    'subgenres',
    'weeklyResults',
]
GenreScalarFieldKeys = Literal[
    'name',
    'createdAt',
    'updatedAt',
    'id',
    'parentId',
]
GenreScalarFieldKeysT = TypeVar('GenreScalarFieldKeysT', bound=GenreScalarFieldKeys)

GenreRelationalFieldKeys = Literal[
        'books',
        'parent',
        'subgenres',
        'weeklyResults',
    ]

# AgeCategory types

class AgeCategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the AgeCategory create method"""
    id: _int
    books: 'BookCreateManyNestedWithoutRelationsInput'
    weeklyResults: 'WeeklyResultCreateManyNestedWithoutRelationsInput'


class AgeCategoryCreateInput(AgeCategoryOptionalCreateInput):
    """Required arguments to the AgeCategory create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AgeCategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the AgeCategory create method, without relations"""
    id: _int


class AgeCategoryCreateWithoutRelationsInput(AgeCategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the AgeCategory create method, without relations"""
    name: _str

class AgeCategoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AgeCategoryCreateWithoutRelationsInput'
    where: 'AgeCategoryWhereUniqueInput'

class AgeCategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AgeCategoryCreateWithoutRelationsInput'
    connect: 'AgeCategoryWhereUniqueInput'
    connect_or_create: 'AgeCategoryConnectOrCreateWithoutRelationsInput'


class AgeCategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AgeCategoryCreateWithoutRelationsInput', List['AgeCategoryCreateWithoutRelationsInput']]
    connect: Union['AgeCategoryWhereUniqueInput', List['AgeCategoryWhereUniqueInput']]
    connect_or_create: Union['AgeCategoryConnectOrCreateWithoutRelationsInput', List['AgeCategoryConnectOrCreateWithoutRelationsInput']]

_AgeCategoryWhereUnique_id_Input = TypedDict(
    '_AgeCategoryWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

AgeCategoryWhereUniqueInput = _AgeCategoryWhereUnique_id_Input


class AgeCategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    books: 'BookUpdateManyWithoutRelationsInput'
    weeklyResults: 'WeeklyResultUpdateManyWithoutRelationsInput'


class AgeCategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str


class AgeCategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AgeCategoryCreateWithoutRelationsInput']
    connect: List['AgeCategoryWhereUniqueInput']
    connect_or_create: List['AgeCategoryConnectOrCreateWithoutRelationsInput']
    set: List['AgeCategoryWhereUniqueInput']
    disconnect: List['AgeCategoryWhereUniqueInput']
    delete: List['AgeCategoryWhereUniqueInput']

    # TODO
    # update: List['AgeCategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AgeCategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AgeCategoryScalarWhereInput']
    # upsert: List['AgeCategoryUpserteWithWhereUniqueWithoutRelationsInput']


class AgeCategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AgeCategoryCreateWithoutRelationsInput'
    connect: 'AgeCategoryWhereUniqueInput'
    connect_or_create: 'AgeCategoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AgeCategoryUpdateInput'
    # upsert: 'AgeCategoryUpsertWithoutRelationsInput'


class AgeCategoryUpsertInput(TypedDict):
    create: 'AgeCategoryCreateInput'
    update: 'AgeCategoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_AgeCategory_id_OrderByInput = TypedDict(
    '_AgeCategory_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_AgeCategory_name_OrderByInput = TypedDict(
    '_AgeCategory_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_AgeCategory_RelevanceInner = TypedDict(
    '_AgeCategory_RelevanceInner',
    {
        'fields': 'List[AgeCategoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_AgeCategory_RelevanceOrderByInput = TypedDict(
    '_AgeCategory_RelevanceOrderByInput',
    {
        '_relevance': '_AgeCategory_RelevanceInner',
    },
    total=True
)

AgeCategoryOrderByInput = Union[
    '_AgeCategory_id_OrderByInput',
    '_AgeCategory_name_OrderByInput',
    '_AgeCategory_RelevanceOrderByInput',
]



# recursive AgeCategory types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AgeCategoryRelationFilter = TypedDict(
    'AgeCategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AgeCategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AgeCategoryInclude(TypedDict, total=False):
    """AgeCategory relational arguments"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategory']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategory']


    

class UserIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAgeCategoryRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAgeCategoryRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromAgeCategoryRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAgeCategoryRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromAgeCategoryRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAgeCategoryRecursive1']


class UserIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAgeCategoryRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAgeCategoryRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromAgeCategoryRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAgeCategoryRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromAgeCategoryRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAgeCategoryRecursive2']


class UserIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAgeCategoryRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAgeCategoryRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromAgeCategoryRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAgeCategoryRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromAgeCategoryRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAgeCategoryRecursive3']


class UserIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAgeCategoryRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAgeCategoryRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromAgeCategoryRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAgeCategoryRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromAgeCategoryRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAgeCategoryRecursive4']


class UserIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class UserArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyUserArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserGroupArgsFromAgeCategoryRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAgeCategoryRecursive1']


class GroupIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserGroupArgsFromAgeCategoryRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAgeCategoryRecursive2']


class GroupIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserGroupArgsFromAgeCategoryRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAgeCategoryRecursive3']


class GroupIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserGroupArgsFromAgeCategoryRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAgeCategoryRecursive4']


class GroupIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class GroupArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyGroupArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAgeCategoryRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAgeCategoryRecursive1']


class PermissionIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAgeCategoryRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAgeCategoryRecursive2']


class PermissionIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAgeCategoryRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAgeCategoryRecursive3']


class PermissionIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAgeCategoryRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAgeCategoryRecursive4']


class PermissionIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class PermissionArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyPermissionArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']
    group: Union[bool, 'GroupArgsFromAgeCategoryRecursive1']


class UserGroupIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']
    group: Union[bool, 'GroupArgsFromAgeCategoryRecursive2']


class UserGroupIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']
    group: Union[bool, 'GroupArgsFromAgeCategoryRecursive3']


class UserGroupIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']
    group: Union[bool, 'GroupArgsFromAgeCategoryRecursive4']


class UserGroupIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class UserGroupArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyUserGroupArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']
    permission: Union[bool, 'PermissionArgsFromAgeCategoryRecursive1']


class UserPermissionIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']
    permission: Union[bool, 'PermissionArgsFromAgeCategoryRecursive2']


class UserPermissionIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']
    permission: Union[bool, 'PermissionArgsFromAgeCategoryRecursive3']


class UserPermissionIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']
    permission: Union[bool, 'PermissionArgsFromAgeCategoryRecursive4']


class UserPermissionIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class UserPermissionArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyUserPermissionArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    group: Union[bool, 'GroupArgsFromAgeCategoryRecursive1']
    permission: Union[bool, 'PermissionArgsFromAgeCategoryRecursive1']


class GroupPermissionIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    group: Union[bool, 'GroupArgsFromAgeCategoryRecursive2']
    permission: Union[bool, 'PermissionArgsFromAgeCategoryRecursive2']


class GroupPermissionIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    group: Union[bool, 'GroupArgsFromAgeCategoryRecursive3']
    permission: Union[bool, 'PermissionArgsFromAgeCategoryRecursive3']


class GroupPermissionIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    group: Union[bool, 'GroupArgsFromAgeCategoryRecursive4']
    permission: Union[bool, 'PermissionArgsFromAgeCategoryRecursive4']


class GroupPermissionIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class GroupPermissionArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyGroupPermissionArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']


class TokenIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']


class TokenIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']


class TokenIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']


class TokenIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class TokenArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyTokenArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']


class SessionIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']


class SessionIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']


class SessionIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']


class SessionIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class SessionArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManySessionArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive1']
    parent: Union[bool, 'GenreArgsFromAgeCategoryRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromAgeCategoryRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive1']


class GenreIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive2']
    parent: Union[bool, 'GenreArgsFromAgeCategoryRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromAgeCategoryRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive2']


class GenreIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive3']
    parent: Union[bool, 'GenreArgsFromAgeCategoryRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromAgeCategoryRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive3']


class GenreIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive4']
    parent: Union[bool, 'GenreArgsFromAgeCategoryRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromAgeCategoryRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive4']


class GenreIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class GenreArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyGenreArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive1']


class AgeCategoryIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive2']


class AgeCategoryIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive3']


class AgeCategoryIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive4']


class AgeCategoryIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class AgeCategoryArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyAgeCategoryArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive1']


class AuthorIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive2']


class AuthorIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive3']


class AuthorIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive4']


class AuthorIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class AuthorArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyAuthorArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    author: Union[bool, 'AuthorArgsFromAgeCategoryRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive1']
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive1']


class BookIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    author: Union[bool, 'AuthorArgsFromAgeCategoryRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive2']
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive2']


class BookIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    author: Union[bool, 'AuthorArgsFromAgeCategoryRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive3']
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive3']


class BookIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    author: Union[bool, 'AuthorArgsFromAgeCategoryRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive4']
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive4']


class BookIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class BookArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyBookArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive1']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']


class UserBookIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive2']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']


class UserBookIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive3']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']


class UserBookIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive4']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']


class UserBookIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class UserBookArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyUserBookArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive1']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']


class VoteIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive2']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']


class VoteIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive3']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']


class VoteIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive4']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']


class VoteIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class VoteArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyVoteArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive1']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']


class ReadingProgressIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive2']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']


class ReadingProgressIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive3']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']


class ReadingProgressIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive4']
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']


class ReadingProgressIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class ReadingProgressArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyReadingProgressArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive1']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive1']
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive1']
    leader: Union[bool, 'UserArgsFromAgeCategoryRecursive1']


class WeeklyResultIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive2']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive2']
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive2']
    leader: Union[bool, 'UserArgsFromAgeCategoryRecursive2']


class WeeklyResultIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive3']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive3']
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive3']
    leader: Union[bool, 'UserArgsFromAgeCategoryRecursive3']


class WeeklyResultIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive4']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive4']
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive4']
    leader: Union[bool, 'UserArgsFromAgeCategoryRecursive4']


class WeeklyResultIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class WeeklyResultArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyWeeklyResultArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']


class NotificationIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']


class NotificationIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']


class NotificationIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']


class NotificationIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class NotificationArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyNotificationArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    partner: Union[bool, 'PartnerArgsFromAgeCategoryRecursive1']


class AdvertisementIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    partner: Union[bool, 'PartnerArgsFromAgeCategoryRecursive2']


class AdvertisementIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    partner: Union[bool, 'PartnerArgsFromAgeCategoryRecursive3']


class AdvertisementIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    partner: Union[bool, 'PartnerArgsFromAgeCategoryRecursive4']


class AdvertisementIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class AdvertisementArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyAdvertisementArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAgeCategoryRecursive1']


class PartnerIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAgeCategoryRecursive2']


class PartnerIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAgeCategoryRecursive3']


class PartnerIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAgeCategoryRecursive4']


class PartnerIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class PartnerArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyPartnerArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAgeCategoryRecursive1']


class AchievementIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAgeCategoryRecursive2']


class AchievementIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAgeCategoryRecursive3']


class AchievementIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAgeCategoryRecursive4']


class AchievementIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class AchievementArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyAchievementArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']
    achievement: Union[bool, 'AchievementArgsFromAgeCategoryRecursive1']


class UserAchievementIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']
    achievement: Union[bool, 'AchievementArgsFromAgeCategoryRecursive2']


class UserAchievementIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']
    achievement: Union[bool, 'AchievementArgsFromAgeCategoryRecursive3']


class UserAchievementIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']
    achievement: Union[bool, 'AchievementArgsFromAgeCategoryRecursive4']


class UserAchievementIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class UserAchievementArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyUserAchievementArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyAgeCategoryArgs = FindManyAgeCategoryArgsFromAgeCategory
FindFirstAgeCategoryArgs = FindManyAgeCategoryArgsFromAgeCategory


    

class AgeCategoryWhereInput(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['AgeCategoryWhereInputRecursive1', List['AgeCategoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AgeCategoryWhereInputRecursive1']
    OR: List['AgeCategoryWhereInputRecursive1']
    NOT: List['AgeCategoryWhereInputRecursive1']


class AgeCategoryWhereInputRecursive1(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['AgeCategoryWhereInputRecursive2', List['AgeCategoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AgeCategoryWhereInputRecursive2']
    OR: List['AgeCategoryWhereInputRecursive2']
    NOT: List['AgeCategoryWhereInputRecursive2']


class AgeCategoryWhereInputRecursive2(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['AgeCategoryWhereInputRecursive3', List['AgeCategoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AgeCategoryWhereInputRecursive3']
    OR: List['AgeCategoryWhereInputRecursive3']
    NOT: List['AgeCategoryWhereInputRecursive3']


class AgeCategoryWhereInputRecursive3(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['AgeCategoryWhereInputRecursive4', List['AgeCategoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AgeCategoryWhereInputRecursive4']
    OR: List['AgeCategoryWhereInputRecursive4']
    NOT: List['AgeCategoryWhereInputRecursive4']


class AgeCategoryWhereInputRecursive4(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'



# aggregate AgeCategory types


    

class AgeCategoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AgeCategoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['AgeCategoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AgeCategoryScalarWhereWithAggregatesInputRecursive1']


class AgeCategoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AgeCategoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['AgeCategoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AgeCategoryScalarWhereWithAggregatesInputRecursive2']


class AgeCategoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AgeCategoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['AgeCategoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AgeCategoryScalarWhereWithAggregatesInputRecursive3']


class AgeCategoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AgeCategoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['AgeCategoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AgeCategoryScalarWhereWithAggregatesInputRecursive4']


class AgeCategoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class AgeCategoryGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'AgeCategorySumAggregateOutput'
    _avg: 'AgeCategoryAvgAggregateOutput'
    _min: 'AgeCategoryMinAggregateOutput'
    _max: 'AgeCategoryMaxAggregateOutput'
    _count: 'AgeCategoryCountAggregateOutput'


class AgeCategoryAvgAggregateOutput(TypedDict, total=False):
    """AgeCategory output for aggregating averages"""
    id: float


class AgeCategorySumAggregateOutput(TypedDict, total=False):
    """AgeCategory output for aggregating sums"""
    id: _int


class AgeCategoryScalarAggregateOutput(TypedDict, total=False):
    """AgeCategory output including scalar fields"""
    id: _int
    name: _str


AgeCategoryMinAggregateOutput = AgeCategoryScalarAggregateOutput
AgeCategoryMaxAggregateOutput = AgeCategoryScalarAggregateOutput


class AgeCategoryMaxAggregateInput(TypedDict, total=False):
    """AgeCategory input for aggregating by max"""
    id: bool
    name: bool


class AgeCategoryMinAggregateInput(TypedDict, total=False):
    """AgeCategory input for aggregating by min"""
    id: bool
    name: bool


class AgeCategoryNumberAggregateInput(TypedDict, total=False):
    """AgeCategory input for aggregating numbers"""
    id: bool


AgeCategoryAvgAggregateInput = AgeCategoryNumberAggregateInput
AgeCategorySumAggregateInput = AgeCategoryNumberAggregateInput


AgeCategoryCountAggregateInput = TypedDict(
    'AgeCategoryCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

AgeCategoryCountAggregateOutput = TypedDict(
    'AgeCategoryCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


AgeCategoryKeys = Literal[
    'id',
    'name',
    'books',
    'weeklyResults',
]
AgeCategoryScalarFieldKeys = Literal[
    'id',
    'name',
]
AgeCategoryScalarFieldKeysT = TypeVar('AgeCategoryScalarFieldKeysT', bound=AgeCategoryScalarFieldKeys)

AgeCategoryRelationalFieldKeys = Literal[
        'books',
        'weeklyResults',
    ]

# Author types

class AuthorOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Author create method"""
    id: _int
    books: 'BookCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AuthorCreateInput(AuthorOptionalCreateInput):
    """Required arguments to the Author create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AuthorOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Author create method, without relations"""
    id: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AuthorCreateWithoutRelationsInput(AuthorOptionalCreateWithoutRelationsInput):
    """Required arguments to the Author create method, without relations"""
    name: _str

class AuthorConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AuthorCreateWithoutRelationsInput'
    where: 'AuthorWhereUniqueInput'

class AuthorCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AuthorCreateWithoutRelationsInput'
    connect: 'AuthorWhereUniqueInput'
    connect_or_create: 'AuthorConnectOrCreateWithoutRelationsInput'


class AuthorCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AuthorCreateWithoutRelationsInput', List['AuthorCreateWithoutRelationsInput']]
    connect: Union['AuthorWhereUniqueInput', List['AuthorWhereUniqueInput']]
    connect_or_create: Union['AuthorConnectOrCreateWithoutRelationsInput', List['AuthorConnectOrCreateWithoutRelationsInput']]

_AuthorWhereUnique_id_Input = TypedDict(
    '_AuthorWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_AuthorWhereUnique_name_Input = TypedDict(
    '_AuthorWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

AuthorWhereUniqueInput = Union[
    '_AuthorWhereUnique_id_Input',
    '_AuthorWhereUnique_name_Input',
]


class AuthorUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    books: 'BookUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AuthorUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AuthorUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AuthorCreateWithoutRelationsInput']
    connect: List['AuthorWhereUniqueInput']
    connect_or_create: List['AuthorConnectOrCreateWithoutRelationsInput']
    set: List['AuthorWhereUniqueInput']
    disconnect: List['AuthorWhereUniqueInput']
    delete: List['AuthorWhereUniqueInput']

    # TODO
    # update: List['AuthorUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AuthorUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AuthorScalarWhereInput']
    # upsert: List['AuthorUpserteWithWhereUniqueWithoutRelationsInput']


class AuthorUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AuthorCreateWithoutRelationsInput'
    connect: 'AuthorWhereUniqueInput'
    connect_or_create: 'AuthorConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AuthorUpdateInput'
    # upsert: 'AuthorUpsertWithoutRelationsInput'


class AuthorUpsertInput(TypedDict):
    create: 'AuthorCreateInput'
    update: 'AuthorUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Author_id_OrderByInput = TypedDict(
    '_Author_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Author_name_OrderByInput = TypedDict(
    '_Author_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Author_createdAt_OrderByInput = TypedDict(
    '_Author_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Author_updatedAt_OrderByInput = TypedDict(
    '_Author_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Author_RelevanceInner = TypedDict(
    '_Author_RelevanceInner',
    {
        'fields': 'List[AuthorScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Author_RelevanceOrderByInput = TypedDict(
    '_Author_RelevanceOrderByInput',
    {
        '_relevance': '_Author_RelevanceInner',
    },
    total=True
)

AuthorOrderByInput = Union[
    '_Author_id_OrderByInput',
    '_Author_name_OrderByInput',
    '_Author_createdAt_OrderByInput',
    '_Author_updatedAt_OrderByInput',
    '_Author_RelevanceOrderByInput',
]



# recursive Author types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AuthorRelationFilter = TypedDict(
    'AuthorRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AuthorListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AuthorInclude(TypedDict, total=False):
    """Author relational arguments"""
    books: Union[bool, 'FindManyBookArgsFromAuthor']


    

class UserIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAuthorRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAuthorRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromAuthorRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAuthorRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromAuthorRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAuthorRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAuthorRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromAuthorRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAuthorRecursive1']


class UserIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAuthorRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAuthorRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromAuthorRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAuthorRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromAuthorRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAuthorRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAuthorRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromAuthorRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAuthorRecursive2']


class UserIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAuthorRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAuthorRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromAuthorRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAuthorRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromAuthorRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAuthorRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAuthorRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromAuthorRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAuthorRecursive3']


class UserIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAuthorRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAuthorRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromAuthorRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAuthorRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromAuthorRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAuthorRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAuthorRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromAuthorRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAuthorRecursive4']


class UserIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class UserArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyUserArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserGroupArgsFromAuthorRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAuthorRecursive1']


class GroupIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserGroupArgsFromAuthorRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAuthorRecursive2']


class GroupIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserGroupArgsFromAuthorRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAuthorRecursive3']


class GroupIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserGroupArgsFromAuthorRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAuthorRecursive4']


class GroupIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class GroupArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyGroupArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAuthorRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAuthorRecursive1']


class PermissionIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAuthorRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAuthorRecursive2']


class PermissionIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAuthorRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAuthorRecursive3']


class PermissionIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAuthorRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAuthorRecursive4']


class PermissionIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class PermissionArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyPermissionArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive1']
    group: Union[bool, 'GroupArgsFromAuthorRecursive1']


class UserGroupIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive2']
    group: Union[bool, 'GroupArgsFromAuthorRecursive2']


class UserGroupIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive3']
    group: Union[bool, 'GroupArgsFromAuthorRecursive3']


class UserGroupIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive4']
    group: Union[bool, 'GroupArgsFromAuthorRecursive4']


class UserGroupIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class UserGroupArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyUserGroupArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive1']
    permission: Union[bool, 'PermissionArgsFromAuthorRecursive1']


class UserPermissionIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive2']
    permission: Union[bool, 'PermissionArgsFromAuthorRecursive2']


class UserPermissionIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive3']
    permission: Union[bool, 'PermissionArgsFromAuthorRecursive3']


class UserPermissionIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive4']
    permission: Union[bool, 'PermissionArgsFromAuthorRecursive4']


class UserPermissionIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class UserPermissionArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyUserPermissionArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    group: Union[bool, 'GroupArgsFromAuthorRecursive1']
    permission: Union[bool, 'PermissionArgsFromAuthorRecursive1']


class GroupPermissionIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    group: Union[bool, 'GroupArgsFromAuthorRecursive2']
    permission: Union[bool, 'PermissionArgsFromAuthorRecursive2']


class GroupPermissionIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    group: Union[bool, 'GroupArgsFromAuthorRecursive3']
    permission: Union[bool, 'PermissionArgsFromAuthorRecursive3']


class GroupPermissionIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    group: Union[bool, 'GroupArgsFromAuthorRecursive4']
    permission: Union[bool, 'PermissionArgsFromAuthorRecursive4']


class GroupPermissionIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class GroupPermissionArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyGroupPermissionArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive1']


class TokenIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive2']


class TokenIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive3']


class TokenIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive4']


class TokenIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class TokenArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyTokenArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive1']


class SessionIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive2']


class SessionIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive3']


class SessionIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive4']


class SessionIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class SessionArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManySessionArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive1']
    parent: Union[bool, 'GenreArgsFromAuthorRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromAuthorRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive1']


class GenreIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive2']
    parent: Union[bool, 'GenreArgsFromAuthorRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromAuthorRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive2']


class GenreIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive3']
    parent: Union[bool, 'GenreArgsFromAuthorRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromAuthorRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive3']


class GenreIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive4']
    parent: Union[bool, 'GenreArgsFromAuthorRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromAuthorRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive4']


class GenreIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class GenreArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyGenreArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive1']


class AgeCategoryIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive2']


class AgeCategoryIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive3']


class AgeCategoryIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive4']


class AgeCategoryIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class AgeCategoryArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyAgeCategoryArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive1']


class AuthorIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive2']


class AuthorIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive3']


class AuthorIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    books: Union[bool, 'FindManyBookArgsFromAuthorRecursive4']


class AuthorIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class AuthorArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyAuthorArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    author: Union[bool, 'AuthorArgsFromAuthorRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAuthorRecursive1']
    genre: Union[bool, 'GenreArgsFromAuthorRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAuthorRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAuthorRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromAuthorRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive1']


class BookIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    author: Union[bool, 'AuthorArgsFromAuthorRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAuthorRecursive2']
    genre: Union[bool, 'GenreArgsFromAuthorRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAuthorRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAuthorRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromAuthorRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive2']


class BookIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    author: Union[bool, 'AuthorArgsFromAuthorRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAuthorRecursive3']
    genre: Union[bool, 'GenreArgsFromAuthorRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAuthorRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAuthorRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromAuthorRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive3']


class BookIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    author: Union[bool, 'AuthorArgsFromAuthorRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAuthorRecursive4']
    genre: Union[bool, 'GenreArgsFromAuthorRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAuthorRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAuthorRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromAuthorRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAuthorRecursive4']


class BookIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class BookArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyBookArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive1']
    user: Union[bool, 'UserArgsFromAuthorRecursive1']


class UserBookIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive2']
    user: Union[bool, 'UserArgsFromAuthorRecursive2']


class UserBookIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive3']
    user: Union[bool, 'UserArgsFromAuthorRecursive3']


class UserBookIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive4']
    user: Union[bool, 'UserArgsFromAuthorRecursive4']


class UserBookIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class UserBookArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyUserBookArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive1']
    user: Union[bool, 'UserArgsFromAuthorRecursive1']


class VoteIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive2']
    user: Union[bool, 'UserArgsFromAuthorRecursive2']


class VoteIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive3']
    user: Union[bool, 'UserArgsFromAuthorRecursive3']


class VoteIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive4']
    user: Union[bool, 'UserArgsFromAuthorRecursive4']


class VoteIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class VoteArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyVoteArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive1']
    user: Union[bool, 'UserArgsFromAuthorRecursive1']


class ReadingProgressIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive2']
    user: Union[bool, 'UserArgsFromAuthorRecursive2']


class ReadingProgressIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive3']
    user: Union[bool, 'UserArgsFromAuthorRecursive3']


class ReadingProgressIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    book: Union[bool, 'BookArgsFromAuthorRecursive4']
    user: Union[bool, 'UserArgsFromAuthorRecursive4']


class ReadingProgressIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class ReadingProgressArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyReadingProgressArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAuthorRecursive1']
    book: Union[bool, 'BookArgsFromAuthorRecursive1']
    genre: Union[bool, 'GenreArgsFromAuthorRecursive1']
    leader: Union[bool, 'UserArgsFromAuthorRecursive1']


class WeeklyResultIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAuthorRecursive2']
    book: Union[bool, 'BookArgsFromAuthorRecursive2']
    genre: Union[bool, 'GenreArgsFromAuthorRecursive2']
    leader: Union[bool, 'UserArgsFromAuthorRecursive2']


class WeeklyResultIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAuthorRecursive3']
    book: Union[bool, 'BookArgsFromAuthorRecursive3']
    genre: Union[bool, 'GenreArgsFromAuthorRecursive3']
    leader: Union[bool, 'UserArgsFromAuthorRecursive3']


class WeeklyResultIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAuthorRecursive4']
    book: Union[bool, 'BookArgsFromAuthorRecursive4']
    genre: Union[bool, 'GenreArgsFromAuthorRecursive4']
    leader: Union[bool, 'UserArgsFromAuthorRecursive4']


class WeeklyResultIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class WeeklyResultArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyWeeklyResultArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive1']


class NotificationIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive2']


class NotificationIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive3']


class NotificationIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive4']


class NotificationIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class NotificationArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyNotificationArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    partner: Union[bool, 'PartnerArgsFromAuthorRecursive1']


class AdvertisementIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    partner: Union[bool, 'PartnerArgsFromAuthorRecursive2']


class AdvertisementIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    partner: Union[bool, 'PartnerArgsFromAuthorRecursive3']


class AdvertisementIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    partner: Union[bool, 'PartnerArgsFromAuthorRecursive4']


class AdvertisementIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class AdvertisementArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyAdvertisementArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAuthorRecursive1']


class PartnerIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAuthorRecursive2']


class PartnerIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAuthorRecursive3']


class PartnerIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAuthorRecursive4']


class PartnerIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class PartnerArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyPartnerArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAuthorRecursive1']


class AchievementIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAuthorRecursive2']


class AchievementIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAuthorRecursive3']


class AchievementIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAuthorRecursive4']


class AchievementIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class AchievementArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyAchievementArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromAuthor(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive1']
    achievement: Union[bool, 'AchievementArgsFromAuthorRecursive1']


class UserAchievementIncludeFromAuthorRecursive1(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive2']
    achievement: Union[bool, 'AchievementArgsFromAuthorRecursive2']


class UserAchievementIncludeFromAuthorRecursive2(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive3']
    achievement: Union[bool, 'AchievementArgsFromAuthorRecursive3']


class UserAchievementIncludeFromAuthorRecursive3(TypedDict, total=False):
    """Relational arguments for Author"""
    user: Union[bool, 'UserArgsFromAuthorRecursive4']
    achievement: Union[bool, 'AchievementArgsFromAuthorRecursive4']


class UserAchievementIncludeFromAuthorRecursive4(TypedDict, total=False):
    """Relational arguments for Author"""

    

class UserAchievementArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    
    

class FindManyUserAchievementArgsFromAuthor(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromAuthorRecursive1(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromAuthorRecursive2(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromAuthorRecursive3(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromAuthorRecursive4(TypedDict, total=False):
    """Arguments for Author"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyAuthorArgs = FindManyAuthorArgsFromAuthor
FindFirstAuthorArgs = FindManyAuthorArgsFromAuthor


    

class AuthorWhereInput(TypedDict, total=False):
    """Author arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AuthorWhereInputRecursive1', List['AuthorWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AuthorWhereInputRecursive1']
    OR: List['AuthorWhereInputRecursive1']
    NOT: List['AuthorWhereInputRecursive1']


class AuthorWhereInputRecursive1(TypedDict, total=False):
    """Author arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AuthorWhereInputRecursive2', List['AuthorWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AuthorWhereInputRecursive2']
    OR: List['AuthorWhereInputRecursive2']
    NOT: List['AuthorWhereInputRecursive2']


class AuthorWhereInputRecursive2(TypedDict, total=False):
    """Author arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AuthorWhereInputRecursive3', List['AuthorWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AuthorWhereInputRecursive3']
    OR: List['AuthorWhereInputRecursive3']
    NOT: List['AuthorWhereInputRecursive3']


class AuthorWhereInputRecursive3(TypedDict, total=False):
    """Author arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AuthorWhereInputRecursive4', List['AuthorWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AuthorWhereInputRecursive4']
    OR: List['AuthorWhereInputRecursive4']
    NOT: List['AuthorWhereInputRecursive4']


class AuthorWhereInputRecursive4(TypedDict, total=False):
    """Author arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Author types


    

class AuthorScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Author arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AuthorScalarWhereWithAggregatesInputRecursive1']
    OR: List['AuthorScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AuthorScalarWhereWithAggregatesInputRecursive1']


class AuthorScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Author arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AuthorScalarWhereWithAggregatesInputRecursive2']
    OR: List['AuthorScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AuthorScalarWhereWithAggregatesInputRecursive2']


class AuthorScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Author arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AuthorScalarWhereWithAggregatesInputRecursive3']
    OR: List['AuthorScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AuthorScalarWhereWithAggregatesInputRecursive3']


class AuthorScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Author arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AuthorScalarWhereWithAggregatesInputRecursive4']
    OR: List['AuthorScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AuthorScalarWhereWithAggregatesInputRecursive4']


class AuthorScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Author arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class AuthorGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'AuthorSumAggregateOutput'
    _avg: 'AuthorAvgAggregateOutput'
    _min: 'AuthorMinAggregateOutput'
    _max: 'AuthorMaxAggregateOutput'
    _count: 'AuthorCountAggregateOutput'


class AuthorAvgAggregateOutput(TypedDict, total=False):
    """Author output for aggregating averages"""
    id: float


class AuthorSumAggregateOutput(TypedDict, total=False):
    """Author output for aggregating sums"""
    id: _int


class AuthorScalarAggregateOutput(TypedDict, total=False):
    """Author output including scalar fields"""
    id: _int
    name: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


AuthorMinAggregateOutput = AuthorScalarAggregateOutput
AuthorMaxAggregateOutput = AuthorScalarAggregateOutput


class AuthorMaxAggregateInput(TypedDict, total=False):
    """Author input for aggregating by max"""
    id: bool
    name: bool
    createdAt: bool
    updatedAt: bool


class AuthorMinAggregateInput(TypedDict, total=False):
    """Author input for aggregating by min"""
    id: bool
    name: bool
    createdAt: bool
    updatedAt: bool


class AuthorNumberAggregateInput(TypedDict, total=False):
    """Author input for aggregating numbers"""
    id: bool


AuthorAvgAggregateInput = AuthorNumberAggregateInput
AuthorSumAggregateInput = AuthorNumberAggregateInput


AuthorCountAggregateInput = TypedDict(
    'AuthorCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

AuthorCountAggregateOutput = TypedDict(
    'AuthorCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


AuthorKeys = Literal[
    'id',
    'name',
    'books',
    'createdAt',
    'updatedAt',
]
AuthorScalarFieldKeys = Literal[
    'id',
    'name',
    'createdAt',
    'updatedAt',
]
AuthorScalarFieldKeysT = TypeVar('AuthorScalarFieldKeysT', bound=AuthorScalarFieldKeys)

AuthorRelationalFieldKeys = Literal[
        'books',
    ]

# Book types

class BookOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Book create method"""
    id: _int
    authorId: _int
    author: 'AuthorCreateNestedWithoutRelationsInput'
    description: Optional[_str]
    coverUrl: Optional[_str]
    externalId: Optional[_str]
    ageCategoryId: _int
    rating: _float
    rating_count: _int
    isPremium: _bool
    litresRating: Optional[_float]
    litresRatingCount: Optional[_int]
    series: Optional[_str]
    translator: Optional[_str]
    volume: Optional[_str]
    year: Optional[_str]
    isbn: Optional[_str]
    copyrightHolder: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    genreId: _int
    ageCategory: 'AgeCategoryCreateNestedWithoutRelationsInput'
    genre: 'GenreCreateNestedWithoutRelationsInput'
    readingProgress: 'ReadingProgressCreateManyNestedWithoutRelationsInput'
    userBooks: 'UserBookCreateManyNestedWithoutRelationsInput'
    votes: 'VoteCreateManyNestedWithoutRelationsInput'
    weeklyResults: 'WeeklyResultCreateManyNestedWithoutRelationsInput'


class BookCreateInput(BookOptionalCreateInput):
    """Required arguments to the Book create method"""
    title: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class BookOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Book create method, without relations"""
    id: _int
    authorId: _int
    description: Optional[_str]
    coverUrl: Optional[_str]
    externalId: Optional[_str]
    ageCategoryId: _int
    rating: _float
    rating_count: _int
    isPremium: _bool
    litresRating: Optional[_float]
    litresRatingCount: Optional[_int]
    series: Optional[_str]
    translator: Optional[_str]
    volume: Optional[_str]
    year: Optional[_str]
    isbn: Optional[_str]
    copyrightHolder: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    genreId: _int


class BookCreateWithoutRelationsInput(BookOptionalCreateWithoutRelationsInput):
    """Required arguments to the Book create method, without relations"""
    title: _str

class BookConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'BookCreateWithoutRelationsInput'
    where: 'BookWhereUniqueInput'

class BookCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'BookCreateWithoutRelationsInput'
    connect: 'BookWhereUniqueInput'
    connect_or_create: 'BookConnectOrCreateWithoutRelationsInput'


class BookCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['BookCreateWithoutRelationsInput', List['BookCreateWithoutRelationsInput']]
    connect: Union['BookWhereUniqueInput', List['BookWhereUniqueInput']]
    connect_or_create: Union['BookConnectOrCreateWithoutRelationsInput', List['BookConnectOrCreateWithoutRelationsInput']]

_BookWhereUnique_id_Input = TypedDict(
    '_BookWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_BookWhereUnique_externalId_Input = TypedDict(
    '_BookWhereUnique_externalId_Input',
    {
        'externalId': '_str',
    },
    total=True
)

BookWhereUniqueInput = Union[
    '_BookWhereUnique_id_Input',
    '_BookWhereUnique_externalId_Input',
]


class BookUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    title: _str
    author: 'AuthorUpdateOneWithoutRelationsInput'
    description: Optional[_str]
    coverUrl: Optional[_str]
    externalId: Optional[_str]
    rating: Union[AtomicFloatInput, _float]
    rating_count: Union[AtomicIntInput, _int]
    isPremium: _bool
    litresRating: Optional[Union[AtomicFloatInput, _float]]
    litresRatingCount: Optional[Union[AtomicIntInput, _int]]
    series: Optional[_str]
    translator: Optional[_str]
    volume: Optional[_str]
    year: Optional[_str]
    isbn: Optional[_str]
    copyrightHolder: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    ageCategory: 'AgeCategoryUpdateOneWithoutRelationsInput'
    genre: 'GenreUpdateOneWithoutRelationsInput'
    readingProgress: 'ReadingProgressUpdateManyWithoutRelationsInput'
    userBooks: 'UserBookUpdateManyWithoutRelationsInput'
    votes: 'VoteUpdateManyWithoutRelationsInput'
    weeklyResults: 'WeeklyResultUpdateManyWithoutRelationsInput'


class BookUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    title: _str
    description: Optional[_str]
    coverUrl: Optional[_str]
    externalId: Optional[_str]
    rating: Union[AtomicFloatInput, _float]
    rating_count: Union[AtomicIntInput, _int]
    isPremium: _bool
    litresRating: Optional[Union[AtomicFloatInput, _float]]
    litresRatingCount: Optional[Union[AtomicIntInput, _int]]
    series: Optional[_str]
    translator: Optional[_str]
    volume: Optional[_str]
    year: Optional[_str]
    isbn: Optional[_str]
    copyrightHolder: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BookUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['BookCreateWithoutRelationsInput']
    connect: List['BookWhereUniqueInput']
    connect_or_create: List['BookConnectOrCreateWithoutRelationsInput']
    set: List['BookWhereUniqueInput']
    disconnect: List['BookWhereUniqueInput']
    delete: List['BookWhereUniqueInput']

    # TODO
    # update: List['BookUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['BookUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['BookScalarWhereInput']
    # upsert: List['BookUpserteWithWhereUniqueWithoutRelationsInput']


class BookUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'BookCreateWithoutRelationsInput'
    connect: 'BookWhereUniqueInput'
    connect_or_create: 'BookConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'BookUpdateInput'
    # upsert: 'BookUpsertWithoutRelationsInput'


class BookUpsertInput(TypedDict):
    create: 'BookCreateInput'
    update: 'BookUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Book_id_OrderByInput = TypedDict(
    '_Book_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Book_title_OrderByInput = TypedDict(
    '_Book_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Book_authorId_OrderByInput = TypedDict(
    '_Book_authorId_OrderByInput',
    {
        'authorId': 'SortOrder',
    },
    total=True
)

_Book_description_OrderByInput = TypedDict(
    '_Book_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Book_coverUrl_OrderByInput = TypedDict(
    '_Book_coverUrl_OrderByInput',
    {
        'coverUrl': 'SortOrder',
    },
    total=True
)

_Book_externalId_OrderByInput = TypedDict(
    '_Book_externalId_OrderByInput',
    {
        'externalId': 'SortOrder',
    },
    total=True
)

_Book_ageCategoryId_OrderByInput = TypedDict(
    '_Book_ageCategoryId_OrderByInput',
    {
        'ageCategoryId': 'SortOrder',
    },
    total=True
)

_Book_rating_OrderByInput = TypedDict(
    '_Book_rating_OrderByInput',
    {
        'rating': 'SortOrder',
    },
    total=True
)

_Book_rating_count_OrderByInput = TypedDict(
    '_Book_rating_count_OrderByInput',
    {
        'rating_count': 'SortOrder',
    },
    total=True
)

_Book_isPremium_OrderByInput = TypedDict(
    '_Book_isPremium_OrderByInput',
    {
        'isPremium': 'SortOrder',
    },
    total=True
)

_Book_litresRating_OrderByInput = TypedDict(
    '_Book_litresRating_OrderByInput',
    {
        'litresRating': 'SortOrder',
    },
    total=True
)

_Book_litresRatingCount_OrderByInput = TypedDict(
    '_Book_litresRatingCount_OrderByInput',
    {
        'litresRatingCount': 'SortOrder',
    },
    total=True
)

_Book_series_OrderByInput = TypedDict(
    '_Book_series_OrderByInput',
    {
        'series': 'SortOrder',
    },
    total=True
)

_Book_translator_OrderByInput = TypedDict(
    '_Book_translator_OrderByInput',
    {
        'translator': 'SortOrder',
    },
    total=True
)

_Book_volume_OrderByInput = TypedDict(
    '_Book_volume_OrderByInput',
    {
        'volume': 'SortOrder',
    },
    total=True
)

_Book_year_OrderByInput = TypedDict(
    '_Book_year_OrderByInput',
    {
        'year': 'SortOrder',
    },
    total=True
)

_Book_isbn_OrderByInput = TypedDict(
    '_Book_isbn_OrderByInput',
    {
        'isbn': 'SortOrder',
    },
    total=True
)

_Book_copyrightHolder_OrderByInput = TypedDict(
    '_Book_copyrightHolder_OrderByInput',
    {
        'copyrightHolder': 'SortOrder',
    },
    total=True
)

_Book_createdAt_OrderByInput = TypedDict(
    '_Book_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Book_updatedAt_OrderByInput = TypedDict(
    '_Book_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Book_genreId_OrderByInput = TypedDict(
    '_Book_genreId_OrderByInput',
    {
        'genreId': 'SortOrder',
    },
    total=True
)

_Book_RelevanceInner = TypedDict(
    '_Book_RelevanceInner',
    {
        'fields': 'List[BookScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Book_RelevanceOrderByInput = TypedDict(
    '_Book_RelevanceOrderByInput',
    {
        '_relevance': '_Book_RelevanceInner',
    },
    total=True
)

BookOrderByInput = Union[
    '_Book_id_OrderByInput',
    '_Book_title_OrderByInput',
    '_Book_authorId_OrderByInput',
    '_Book_description_OrderByInput',
    '_Book_coverUrl_OrderByInput',
    '_Book_externalId_OrderByInput',
    '_Book_ageCategoryId_OrderByInput',
    '_Book_rating_OrderByInput',
    '_Book_rating_count_OrderByInput',
    '_Book_isPremium_OrderByInput',
    '_Book_litresRating_OrderByInput',
    '_Book_litresRatingCount_OrderByInput',
    '_Book_series_OrderByInput',
    '_Book_translator_OrderByInput',
    '_Book_volume_OrderByInput',
    '_Book_year_OrderByInput',
    '_Book_isbn_OrderByInput',
    '_Book_copyrightHolder_OrderByInput',
    '_Book_createdAt_OrderByInput',
    '_Book_updatedAt_OrderByInput',
    '_Book_genreId_OrderByInput',
    '_Book_RelevanceOrderByInput',
]



# recursive Book types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

BookRelationFilter = TypedDict(
    'BookRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class BookListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class BookInclude(TypedDict, total=False):
    """Book relational arguments"""
    author: Union[bool, 'AuthorArgsFromBook']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBook']
    genre: Union[bool, 'GenreArgsFromBook']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBook']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBook']
    votes: Union[bool, 'FindManyVoteArgsFromBook']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBook']


    

class UserIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    groups: Union[bool, 'FindManyUserGroupArgsFromBookRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromBookRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromBookRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromBookRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromBookRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromBookRecursive1']


class UserIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    groups: Union[bool, 'FindManyUserGroupArgsFromBookRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromBookRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromBookRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromBookRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromBookRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromBookRecursive2']


class UserIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    groups: Union[bool, 'FindManyUserGroupArgsFromBookRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromBookRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromBookRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromBookRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromBookRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromBookRecursive3']


class UserIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    groups: Union[bool, 'FindManyUserGroupArgsFromBookRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromBookRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromBookRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromBookRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromBookRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromBookRecursive4']


class UserIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class UserArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyUserArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserGroupArgsFromBookRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromBookRecursive1']


class GroupIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserGroupArgsFromBookRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromBookRecursive2']


class GroupIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserGroupArgsFromBookRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromBookRecursive3']


class GroupIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserGroupArgsFromBookRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromBookRecursive4']


class GroupIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class GroupArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyGroupArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserPermissionArgsFromBookRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromBookRecursive1']


class PermissionIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserPermissionArgsFromBookRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromBookRecursive2']


class PermissionIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserPermissionArgsFromBookRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromBookRecursive3']


class PermissionIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserPermissionArgsFromBookRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromBookRecursive4']


class PermissionIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class PermissionArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyPermissionArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive1']
    group: Union[bool, 'GroupArgsFromBookRecursive1']


class UserGroupIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive2']
    group: Union[bool, 'GroupArgsFromBookRecursive2']


class UserGroupIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive3']
    group: Union[bool, 'GroupArgsFromBookRecursive3']


class UserGroupIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive4']
    group: Union[bool, 'GroupArgsFromBookRecursive4']


class UserGroupIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class UserGroupArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyUserGroupArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive1']
    permission: Union[bool, 'PermissionArgsFromBookRecursive1']


class UserPermissionIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive2']
    permission: Union[bool, 'PermissionArgsFromBookRecursive2']


class UserPermissionIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive3']
    permission: Union[bool, 'PermissionArgsFromBookRecursive3']


class UserPermissionIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive4']
    permission: Union[bool, 'PermissionArgsFromBookRecursive4']


class UserPermissionIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class UserPermissionArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyUserPermissionArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    group: Union[bool, 'GroupArgsFromBookRecursive1']
    permission: Union[bool, 'PermissionArgsFromBookRecursive1']


class GroupPermissionIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    group: Union[bool, 'GroupArgsFromBookRecursive2']
    permission: Union[bool, 'PermissionArgsFromBookRecursive2']


class GroupPermissionIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    group: Union[bool, 'GroupArgsFromBookRecursive3']
    permission: Union[bool, 'PermissionArgsFromBookRecursive3']


class GroupPermissionIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    group: Union[bool, 'GroupArgsFromBookRecursive4']
    permission: Union[bool, 'PermissionArgsFromBookRecursive4']


class GroupPermissionIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class GroupPermissionArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyGroupPermissionArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive1']


class TokenIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive2']


class TokenIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive3']


class TokenIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive4']


class TokenIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class TokenArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyTokenArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive1']


class SessionIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive2']


class SessionIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive3']


class SessionIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive4']


class SessionIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class SessionArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManySessionArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive1']
    parent: Union[bool, 'GenreArgsFromBookRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive1']


class GenreIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive2']
    parent: Union[bool, 'GenreArgsFromBookRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive2']


class GenreIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive3']
    parent: Union[bool, 'GenreArgsFromBookRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive3']


class GenreIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive4']
    parent: Union[bool, 'GenreArgsFromBookRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive4']


class GenreIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class GenreArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyGenreArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive1']


class AgeCategoryIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive2']


class AgeCategoryIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive3']


class AgeCategoryIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive4']


class AgeCategoryIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class AgeCategoryArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyAgeCategoryArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive1']


class AuthorIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive2']


class AuthorIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive3']


class AuthorIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive4']


class AuthorIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class AuthorArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyAuthorArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    author: Union[bool, 'AuthorArgsFromBookRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive1']
    genre: Union[bool, 'GenreArgsFromBookRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive1']


class BookIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    author: Union[bool, 'AuthorArgsFromBookRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive2']
    genre: Union[bool, 'GenreArgsFromBookRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive2']


class BookIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    author: Union[bool, 'AuthorArgsFromBookRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive3']
    genre: Union[bool, 'GenreArgsFromBookRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive3']


class BookIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    author: Union[bool, 'AuthorArgsFromBookRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive4']
    genre: Union[bool, 'GenreArgsFromBookRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive4']


class BookIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class BookArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyBookArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive1']
    user: Union[bool, 'UserArgsFromBookRecursive1']


class UserBookIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive2']
    user: Union[bool, 'UserArgsFromBookRecursive2']


class UserBookIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive3']
    user: Union[bool, 'UserArgsFromBookRecursive3']


class UserBookIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive4']
    user: Union[bool, 'UserArgsFromBookRecursive4']


class UserBookIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class UserBookArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyUserBookArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive1']
    user: Union[bool, 'UserArgsFromBookRecursive1']


class VoteIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive2']
    user: Union[bool, 'UserArgsFromBookRecursive2']


class VoteIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive3']
    user: Union[bool, 'UserArgsFromBookRecursive3']


class VoteIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive4']
    user: Union[bool, 'UserArgsFromBookRecursive4']


class VoteIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class VoteArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyVoteArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive1']
    user: Union[bool, 'UserArgsFromBookRecursive1']


class ReadingProgressIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive2']
    user: Union[bool, 'UserArgsFromBookRecursive2']


class ReadingProgressIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive3']
    user: Union[bool, 'UserArgsFromBookRecursive3']


class ReadingProgressIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    book: Union[bool, 'BookArgsFromBookRecursive4']
    user: Union[bool, 'UserArgsFromBookRecursive4']


class ReadingProgressIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class ReadingProgressArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyReadingProgressArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive1']
    book: Union[bool, 'BookArgsFromBookRecursive1']
    genre: Union[bool, 'GenreArgsFromBookRecursive1']
    leader: Union[bool, 'UserArgsFromBookRecursive1']


class WeeklyResultIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive2']
    book: Union[bool, 'BookArgsFromBookRecursive2']
    genre: Union[bool, 'GenreArgsFromBookRecursive2']
    leader: Union[bool, 'UserArgsFromBookRecursive2']


class WeeklyResultIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive3']
    book: Union[bool, 'BookArgsFromBookRecursive3']
    genre: Union[bool, 'GenreArgsFromBookRecursive3']
    leader: Union[bool, 'UserArgsFromBookRecursive3']


class WeeklyResultIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive4']
    book: Union[bool, 'BookArgsFromBookRecursive4']
    genre: Union[bool, 'GenreArgsFromBookRecursive4']
    leader: Union[bool, 'UserArgsFromBookRecursive4']


class WeeklyResultIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class WeeklyResultArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyWeeklyResultArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive1']


class NotificationIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive2']


class NotificationIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive3']


class NotificationIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive4']


class NotificationIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class NotificationArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyNotificationArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    partner: Union[bool, 'PartnerArgsFromBookRecursive1']


class AdvertisementIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    partner: Union[bool, 'PartnerArgsFromBookRecursive2']


class AdvertisementIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    partner: Union[bool, 'PartnerArgsFromBookRecursive3']


class AdvertisementIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    partner: Union[bool, 'PartnerArgsFromBookRecursive4']


class AdvertisementIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class AdvertisementArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyAdvertisementArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromBookRecursive1']


class PartnerIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromBookRecursive2']


class PartnerIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromBookRecursive3']


class PartnerIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromBookRecursive4']


class PartnerIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class PartnerArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyPartnerArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserAchievementArgsFromBookRecursive1']


class AchievementIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserAchievementArgsFromBookRecursive2']


class AchievementIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserAchievementArgsFromBookRecursive3']


class AchievementIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    users: Union[bool, 'FindManyUserAchievementArgsFromBookRecursive4']


class AchievementIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class AchievementArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyAchievementArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive1']
    achievement: Union[bool, 'AchievementArgsFromBookRecursive1']


class UserAchievementIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive2']
    achievement: Union[bool, 'AchievementArgsFromBookRecursive2']


class UserAchievementIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive3']
    achievement: Union[bool, 'AchievementArgsFromBookRecursive3']


class UserAchievementIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive4']
    achievement: Union[bool, 'AchievementArgsFromBookRecursive4']


class UserAchievementIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class UserAchievementArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyUserAchievementArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyBookArgs = FindManyBookArgsFromBook
FindFirstBookArgs = FindManyBookArgsFromBook


    

class BookWhereInput(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    authorId: Union[_int, 'types.IntFilter']
    author: 'AuthorRelationFilter'
    description: Union[None, _str, 'types.StringFilter']
    coverUrl: Union[None, _str, 'types.StringFilter']
    externalId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    rating_count: Union[_int, 'types.IntFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    litresRating: Union[None, _float, 'types.FloatFilter']
    litresRatingCount: Union[None, _int, 'types.IntFilter']
    series: Union[None, _str, 'types.StringFilter']
    translator: Union[None, _str, 'types.StringFilter']
    volume: Union[None, _str, 'types.StringFilter']
    year: Union[None, _str, 'types.StringFilter']
    isbn: Union[None, _str, 'types.StringFilter']
    copyrightHolder: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    genreId: Union[_int, 'types.IntFilter']
    ageCategory: 'AgeCategoryRelationFilter'
    genre: 'GenreRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    votes: 'VoteListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['BookWhereInputRecursive1', List['BookWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['BookWhereInputRecursive1']
    OR: List['BookWhereInputRecursive1']
    NOT: List['BookWhereInputRecursive1']


class BookWhereInputRecursive1(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    authorId: Union[_int, 'types.IntFilter']
    author: 'AuthorRelationFilter'
    description: Union[None, _str, 'types.StringFilter']
    coverUrl: Union[None, _str, 'types.StringFilter']
    externalId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    rating_count: Union[_int, 'types.IntFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    litresRating: Union[None, _float, 'types.FloatFilter']
    litresRatingCount: Union[None, _int, 'types.IntFilter']
    series: Union[None, _str, 'types.StringFilter']
    translator: Union[None, _str, 'types.StringFilter']
    volume: Union[None, _str, 'types.StringFilter']
    year: Union[None, _str, 'types.StringFilter']
    isbn: Union[None, _str, 'types.StringFilter']
    copyrightHolder: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    genreId: Union[_int, 'types.IntFilter']
    ageCategory: 'AgeCategoryRelationFilter'
    genre: 'GenreRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    votes: 'VoteListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['BookWhereInputRecursive2', List['BookWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['BookWhereInputRecursive2']
    OR: List['BookWhereInputRecursive2']
    NOT: List['BookWhereInputRecursive2']


class BookWhereInputRecursive2(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    authorId: Union[_int, 'types.IntFilter']
    author: 'AuthorRelationFilter'
    description: Union[None, _str, 'types.StringFilter']
    coverUrl: Union[None, _str, 'types.StringFilter']
    externalId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    rating_count: Union[_int, 'types.IntFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    litresRating: Union[None, _float, 'types.FloatFilter']
    litresRatingCount: Union[None, _int, 'types.IntFilter']
    series: Union[None, _str, 'types.StringFilter']
    translator: Union[None, _str, 'types.StringFilter']
    volume: Union[None, _str, 'types.StringFilter']
    year: Union[None, _str, 'types.StringFilter']
    isbn: Union[None, _str, 'types.StringFilter']
    copyrightHolder: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    genreId: Union[_int, 'types.IntFilter']
    ageCategory: 'AgeCategoryRelationFilter'
    genre: 'GenreRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    votes: 'VoteListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['BookWhereInputRecursive3', List['BookWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['BookWhereInputRecursive3']
    OR: List['BookWhereInputRecursive3']
    NOT: List['BookWhereInputRecursive3']


class BookWhereInputRecursive3(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    authorId: Union[_int, 'types.IntFilter']
    author: 'AuthorRelationFilter'
    description: Union[None, _str, 'types.StringFilter']
    coverUrl: Union[None, _str, 'types.StringFilter']
    externalId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    rating_count: Union[_int, 'types.IntFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    litresRating: Union[None, _float, 'types.FloatFilter']
    litresRatingCount: Union[None, _int, 'types.IntFilter']
    series: Union[None, _str, 'types.StringFilter']
    translator: Union[None, _str, 'types.StringFilter']
    volume: Union[None, _str, 'types.StringFilter']
    year: Union[None, _str, 'types.StringFilter']
    isbn: Union[None, _str, 'types.StringFilter']
    copyrightHolder: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    genreId: Union[_int, 'types.IntFilter']
    ageCategory: 'AgeCategoryRelationFilter'
    genre: 'GenreRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    votes: 'VoteListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['BookWhereInputRecursive4', List['BookWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['BookWhereInputRecursive4']
    OR: List['BookWhereInputRecursive4']
    NOT: List['BookWhereInputRecursive4']


class BookWhereInputRecursive4(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    authorId: Union[_int, 'types.IntFilter']
    author: 'AuthorRelationFilter'
    description: Union[None, _str, 'types.StringFilter']
    coverUrl: Union[None, _str, 'types.StringFilter']
    externalId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    rating_count: Union[_int, 'types.IntFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    litresRating: Union[None, _float, 'types.FloatFilter']
    litresRatingCount: Union[None, _int, 'types.IntFilter']
    series: Union[None, _str, 'types.StringFilter']
    translator: Union[None, _str, 'types.StringFilter']
    volume: Union[None, _str, 'types.StringFilter']
    year: Union[None, _str, 'types.StringFilter']
    isbn: Union[None, _str, 'types.StringFilter']
    copyrightHolder: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    genreId: Union[_int, 'types.IntFilter']
    ageCategory: 'AgeCategoryRelationFilter'
    genre: 'GenreRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    votes: 'VoteListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'



# aggregate Book types


    

class BookScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coverUrl: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    rating_count: Union[_int, 'types.IntWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    litresRating: Union[_float, 'types.FloatWithAggregatesFilter']
    litresRatingCount: Union[_int, 'types.IntWithAggregatesFilter']
    series: Union[_str, 'types.StringWithAggregatesFilter']
    translator: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_str, 'types.StringWithAggregatesFilter']
    isbn: Union[_str, 'types.StringWithAggregatesFilter']
    copyrightHolder: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    genreId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['BookScalarWhereWithAggregatesInputRecursive1']
    OR: List['BookScalarWhereWithAggregatesInputRecursive1']
    NOT: List['BookScalarWhereWithAggregatesInputRecursive1']


class BookScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coverUrl: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    rating_count: Union[_int, 'types.IntWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    litresRating: Union[_float, 'types.FloatWithAggregatesFilter']
    litresRatingCount: Union[_int, 'types.IntWithAggregatesFilter']
    series: Union[_str, 'types.StringWithAggregatesFilter']
    translator: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_str, 'types.StringWithAggregatesFilter']
    isbn: Union[_str, 'types.StringWithAggregatesFilter']
    copyrightHolder: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    genreId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['BookScalarWhereWithAggregatesInputRecursive2']
    OR: List['BookScalarWhereWithAggregatesInputRecursive2']
    NOT: List['BookScalarWhereWithAggregatesInputRecursive2']


class BookScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coverUrl: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    rating_count: Union[_int, 'types.IntWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    litresRating: Union[_float, 'types.FloatWithAggregatesFilter']
    litresRatingCount: Union[_int, 'types.IntWithAggregatesFilter']
    series: Union[_str, 'types.StringWithAggregatesFilter']
    translator: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_str, 'types.StringWithAggregatesFilter']
    isbn: Union[_str, 'types.StringWithAggregatesFilter']
    copyrightHolder: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    genreId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['BookScalarWhereWithAggregatesInputRecursive3']
    OR: List['BookScalarWhereWithAggregatesInputRecursive3']
    NOT: List['BookScalarWhereWithAggregatesInputRecursive3']


class BookScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coverUrl: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    rating_count: Union[_int, 'types.IntWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    litresRating: Union[_float, 'types.FloatWithAggregatesFilter']
    litresRatingCount: Union[_int, 'types.IntWithAggregatesFilter']
    series: Union[_str, 'types.StringWithAggregatesFilter']
    translator: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_str, 'types.StringWithAggregatesFilter']
    isbn: Union[_str, 'types.StringWithAggregatesFilter']
    copyrightHolder: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    genreId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['BookScalarWhereWithAggregatesInputRecursive4']
    OR: List['BookScalarWhereWithAggregatesInputRecursive4']
    NOT: List['BookScalarWhereWithAggregatesInputRecursive4']


class BookScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coverUrl: Union[_str, 'types.StringWithAggregatesFilter']
    externalId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    rating_count: Union[_int, 'types.IntWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    litresRating: Union[_float, 'types.FloatWithAggregatesFilter']
    litresRatingCount: Union[_int, 'types.IntWithAggregatesFilter']
    series: Union[_str, 'types.StringWithAggregatesFilter']
    translator: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_str, 'types.StringWithAggregatesFilter']
    isbn: Union[_str, 'types.StringWithAggregatesFilter']
    copyrightHolder: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    genreId: Union[_int, 'types.IntWithAggregatesFilter']



class BookGroupByOutput(TypedDict, total=False):
    id: _int
    title: _str
    authorId: _int
    description: _str
    coverUrl: _str
    externalId: _str
    ageCategoryId: _int
    rating: _float
    rating_count: _int
    isPremium: _bool
    litresRating: _float
    litresRatingCount: _int
    series: _str
    translator: _str
    volume: _str
    year: _str
    isbn: _str
    copyrightHolder: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    genreId: _int
    _sum: 'BookSumAggregateOutput'
    _avg: 'BookAvgAggregateOutput'
    _min: 'BookMinAggregateOutput'
    _max: 'BookMaxAggregateOutput'
    _count: 'BookCountAggregateOutput'


class BookAvgAggregateOutput(TypedDict, total=False):
    """Book output for aggregating averages"""
    id: float
    authorId: float
    ageCategoryId: float
    rating: float
    rating_count: float
    litresRating: float
    litresRatingCount: float
    genreId: float


class BookSumAggregateOutput(TypedDict, total=False):
    """Book output for aggregating sums"""
    id: _int
    authorId: _int
    ageCategoryId: _int
    rating: _float
    rating_count: _int
    litresRating: _float
    litresRatingCount: _int
    genreId: _int


class BookScalarAggregateOutput(TypedDict, total=False):
    """Book output including scalar fields"""
    id: _int
    title: _str
    authorId: _int
    description: _str
    coverUrl: _str
    externalId: _str
    ageCategoryId: _int
    rating: _float
    rating_count: _int
    isPremium: _bool
    litresRating: _float
    litresRatingCount: _int
    series: _str
    translator: _str
    volume: _str
    year: _str
    isbn: _str
    copyrightHolder: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    genreId: _int


BookMinAggregateOutput = BookScalarAggregateOutput
BookMaxAggregateOutput = BookScalarAggregateOutput


class BookMaxAggregateInput(TypedDict, total=False):
    """Book input for aggregating by max"""
    id: bool
    title: bool
    authorId: bool
    description: bool
    coverUrl: bool
    externalId: bool
    ageCategoryId: bool
    rating: bool
    rating_count: bool
    isPremium: bool
    litresRating: bool
    litresRatingCount: bool
    series: bool
    translator: bool
    volume: bool
    year: bool
    isbn: bool
    copyrightHolder: bool
    createdAt: bool
    updatedAt: bool
    genreId: bool


class BookMinAggregateInput(TypedDict, total=False):
    """Book input for aggregating by min"""
    id: bool
    title: bool
    authorId: bool
    description: bool
    coverUrl: bool
    externalId: bool
    ageCategoryId: bool
    rating: bool
    rating_count: bool
    isPremium: bool
    litresRating: bool
    litresRatingCount: bool
    series: bool
    translator: bool
    volume: bool
    year: bool
    isbn: bool
    copyrightHolder: bool
    createdAt: bool
    updatedAt: bool
    genreId: bool


class BookNumberAggregateInput(TypedDict, total=False):
    """Book input for aggregating numbers"""
    id: bool
    authorId: bool
    ageCategoryId: bool
    rating: bool
    rating_count: bool
    litresRating: bool
    litresRatingCount: bool
    genreId: bool


BookAvgAggregateInput = BookNumberAggregateInput
BookSumAggregateInput = BookNumberAggregateInput


BookCountAggregateInput = TypedDict(
    'BookCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'authorId': bool,
        'description': bool,
        'coverUrl': bool,
        'externalId': bool,
        'ageCategoryId': bool,
        'rating': bool,
        'rating_count': bool,
        'isPremium': bool,
        'litresRating': bool,
        'litresRatingCount': bool,
        'series': bool,
        'translator': bool,
        'volume': bool,
        'year': bool,
        'isbn': bool,
        'copyrightHolder': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'genreId': bool,
        '_all': bool,
    },
    total=False,
)

BookCountAggregateOutput = TypedDict(
    'BookCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'authorId': int,
        'description': int,
        'coverUrl': int,
        'externalId': int,
        'ageCategoryId': int,
        'rating': int,
        'rating_count': int,
        'isPremium': int,
        'litresRating': int,
        'litresRatingCount': int,
        'series': int,
        'translator': int,
        'volume': int,
        'year': int,
        'isbn': int,
        'copyrightHolder': int,
        'createdAt': int,
        'updatedAt': int,
        'genreId': int,
        '_all': int,
    },
    total=False,
)


BookKeys = Literal[
    'id',
    'title',
    'authorId',
    'author',
    'description',
    'coverUrl',
    'externalId',
    'ageCategoryId',
    'rating',
    'rating_count',
    'isPremium',
    'litresRating',
    'litresRatingCount',
    'series',
    'translator',
    'volume',
    'year',
    'isbn',
    'copyrightHolder',
    'createdAt',
    'updatedAt',
    'genreId',
    'ageCategory',
    'genre',
    'readingProgress',
    'userBooks',
    'votes',
    'weeklyResults',
]
BookScalarFieldKeys = Literal[
    'id',
    'title',
    'authorId',
    'description',
    'coverUrl',
    'externalId',
    'ageCategoryId',
    'rating',
    'rating_count',
    'isPremium',
    'litresRating',
    'litresRatingCount',
    'series',
    'translator',
    'volume',
    'year',
    'isbn',
    'copyrightHolder',
    'createdAt',
    'updatedAt',
    'genreId',
]
BookScalarFieldKeysT = TypeVar('BookScalarFieldKeysT', bound=BookScalarFieldKeys)

BookRelationalFieldKeys = Literal[
        'author',
        'ageCategory',
        'genre',
        'readingProgress',
        'userBooks',
        'votes',
        'weeklyResults',
    ]

# UserBook types

class UserBookOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserBook create method"""
    id: _int
    userId: _int
    bookId: _int
    rating: Optional[_int]
    addedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    book: 'BookCreateNestedWithoutRelationsInput'
    user: 'UserCreateNestedWithoutRelationsInput'


class UserBookCreateInput(UserBookOptionalCreateInput):
    """Required arguments to the UserBook create method"""
    status: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserBookOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserBook create method, without relations"""
    id: _int
    userId: _int
    bookId: _int
    rating: Optional[_int]
    addedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserBookCreateWithoutRelationsInput(UserBookOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserBook create method, without relations"""
    status: _str

class UserBookConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserBookCreateWithoutRelationsInput'
    where: 'UserBookWhereUniqueInput'

class UserBookCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserBookCreateWithoutRelationsInput'
    connect: 'UserBookWhereUniqueInput'
    connect_or_create: 'UserBookConnectOrCreateWithoutRelationsInput'


class UserBookCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserBookCreateWithoutRelationsInput', List['UserBookCreateWithoutRelationsInput']]
    connect: Union['UserBookWhereUniqueInput', List['UserBookWhereUniqueInput']]
    connect_or_create: Union['UserBookConnectOrCreateWithoutRelationsInput', List['UserBookConnectOrCreateWithoutRelationsInput']]

_UserBookWhereUnique_id_Input = TypedDict(
    '_UserBookWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserBookCompounduserId_bookIdKeyInner = TypedDict(
    '_UserBookCompounduserId_bookIdKeyInner',
    {
        'userId': '_int',
        'bookId': '_int',
    },
    total=True
)

_UserBookCompounduserId_bookIdKey = TypedDict(
    '_UserBookCompounduserId_bookIdKey',
    {
        'userId_bookId': '_UserBookCompounduserId_bookIdKeyInner',
    },
    total=True
)

UserBookWhereUniqueInput = Union[
    '_UserBookWhereUnique_id_Input',
    '_UserBookCompounduserId_bookIdKey',
]


class UserBookUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    status: _str
    rating: Optional[Union[AtomicIntInput, _int]]
    addedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    book: 'BookUpdateOneWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'


class UserBookUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    status: _str
    rating: Optional[Union[AtomicIntInput, _int]]
    addedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserBookUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserBookCreateWithoutRelationsInput']
    connect: List['UserBookWhereUniqueInput']
    connect_or_create: List['UserBookConnectOrCreateWithoutRelationsInput']
    set: List['UserBookWhereUniqueInput']
    disconnect: List['UserBookWhereUniqueInput']
    delete: List['UserBookWhereUniqueInput']

    # TODO
    # update: List['UserBookUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserBookUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserBookScalarWhereInput']
    # upsert: List['UserBookUpserteWithWhereUniqueWithoutRelationsInput']


class UserBookUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserBookCreateWithoutRelationsInput'
    connect: 'UserBookWhereUniqueInput'
    connect_or_create: 'UserBookConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserBookUpdateInput'
    # upsert: 'UserBookUpsertWithoutRelationsInput'


class UserBookUpsertInput(TypedDict):
    create: 'UserBookCreateInput'
    update: 'UserBookUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserBook_id_OrderByInput = TypedDict(
    '_UserBook_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserBook_userId_OrderByInput = TypedDict(
    '_UserBook_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserBook_bookId_OrderByInput = TypedDict(
    '_UserBook_bookId_OrderByInput',
    {
        'bookId': 'SortOrder',
    },
    total=True
)

_UserBook_status_OrderByInput = TypedDict(
    '_UserBook_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_UserBook_rating_OrderByInput = TypedDict(
    '_UserBook_rating_OrderByInput',
    {
        'rating': 'SortOrder',
    },
    total=True
)

_UserBook_addedAt_OrderByInput = TypedDict(
    '_UserBook_addedAt_OrderByInput',
    {
        'addedAt': 'SortOrder',
    },
    total=True
)

_UserBook_createdAt_OrderByInput = TypedDict(
    '_UserBook_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_UserBook_updatedAt_OrderByInput = TypedDict(
    '_UserBook_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_UserBook_RelevanceInner = TypedDict(
    '_UserBook_RelevanceInner',
    {
        'fields': 'List[UserBookScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserBook_RelevanceOrderByInput = TypedDict(
    '_UserBook_RelevanceOrderByInput',
    {
        '_relevance': '_UserBook_RelevanceInner',
    },
    total=True
)

UserBookOrderByInput = Union[
    '_UserBook_id_OrderByInput',
    '_UserBook_userId_OrderByInput',
    '_UserBook_bookId_OrderByInput',
    '_UserBook_status_OrderByInput',
    '_UserBook_rating_OrderByInput',
    '_UserBook_addedAt_OrderByInput',
    '_UserBook_createdAt_OrderByInput',
    '_UserBook_updatedAt_OrderByInput',
    '_UserBook_RelevanceOrderByInput',
]



# recursive UserBook types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserBookRelationFilter = TypedDict(
    'UserBookRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserBookListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserBookInclude(TypedDict, total=False):
    """UserBook relational arguments"""
    book: Union[bool, 'BookArgsFromUserBook']
    user: Union[bool, 'UserArgsFromUserBook']


    

class UserIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserBookRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserBookRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromUserBookRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserBookRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserBookRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserBookRecursive1']


class UserIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserBookRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserBookRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromUserBookRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserBookRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserBookRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserBookRecursive2']


class UserIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserBookRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserBookRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromUserBookRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserBookRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserBookRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserBookRecursive3']


class UserIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserBookRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserBookRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromUserBookRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserBookRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserBookRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserBookRecursive4']


class UserIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class UserArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyUserArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserBookRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserBookRecursive1']


class GroupIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserBookRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserBookRecursive2']


class GroupIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserBookRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserBookRecursive3']


class GroupIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserBookRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserBookRecursive4']


class GroupIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class GroupArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyGroupArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserBookRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserBookRecursive1']


class PermissionIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserBookRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserBookRecursive2']


class PermissionIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserBookRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserBookRecursive3']


class PermissionIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserBookRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserBookRecursive4']


class PermissionIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class PermissionArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyPermissionArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive1']
    group: Union[bool, 'GroupArgsFromUserBookRecursive1']


class UserGroupIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive2']
    group: Union[bool, 'GroupArgsFromUserBookRecursive2']


class UserGroupIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive3']
    group: Union[bool, 'GroupArgsFromUserBookRecursive3']


class UserGroupIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive4']
    group: Union[bool, 'GroupArgsFromUserBookRecursive4']


class UserGroupIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class UserGroupArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyUserGroupArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserBookRecursive1']


class UserPermissionIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserBookRecursive2']


class UserPermissionIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserBookRecursive3']


class UserPermissionIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserBookRecursive4']


class UserPermissionIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class UserPermissionArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyUserPermissionArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    group: Union[bool, 'GroupArgsFromUserBookRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserBookRecursive1']


class GroupPermissionIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    group: Union[bool, 'GroupArgsFromUserBookRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserBookRecursive2']


class GroupPermissionIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    group: Union[bool, 'GroupArgsFromUserBookRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserBookRecursive3']


class GroupPermissionIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    group: Union[bool, 'GroupArgsFromUserBookRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserBookRecursive4']


class GroupPermissionIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class GroupPermissionArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyGroupPermissionArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive1']


class TokenIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive2']


class TokenIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive3']


class TokenIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive4']


class TokenIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class TokenArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyTokenArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive1']


class SessionIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive2']


class SessionIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive3']


class SessionIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive4']


class SessionIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class SessionArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManySessionArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive1']
    parent: Union[bool, 'GenreArgsFromUserBookRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive1']


class GenreIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive2']
    parent: Union[bool, 'GenreArgsFromUserBookRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive2']


class GenreIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive3']
    parent: Union[bool, 'GenreArgsFromUserBookRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive3']


class GenreIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive4']
    parent: Union[bool, 'GenreArgsFromUserBookRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive4']


class GenreIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class GenreArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyGenreArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive1']


class AgeCategoryIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive2']


class AgeCategoryIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive3']


class AgeCategoryIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive4']


class AgeCategoryIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class AgeCategoryArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyAgeCategoryArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive1']


class AuthorIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive2']


class AuthorIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive3']


class AuthorIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive4']


class AuthorIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class AuthorArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyAuthorArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    author: Union[bool, 'AuthorArgsFromUserBookRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive1']
    genre: Union[bool, 'GenreArgsFromUserBookRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive1']


class BookIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    author: Union[bool, 'AuthorArgsFromUserBookRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive2']
    genre: Union[bool, 'GenreArgsFromUserBookRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive2']


class BookIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    author: Union[bool, 'AuthorArgsFromUserBookRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive3']
    genre: Union[bool, 'GenreArgsFromUserBookRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive3']


class BookIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    author: Union[bool, 'AuthorArgsFromUserBookRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive4']
    genre: Union[bool, 'GenreArgsFromUserBookRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive4']


class BookIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class BookArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyBookArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive1']
    user: Union[bool, 'UserArgsFromUserBookRecursive1']


class UserBookIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive2']
    user: Union[bool, 'UserArgsFromUserBookRecursive2']


class UserBookIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive3']
    user: Union[bool, 'UserArgsFromUserBookRecursive3']


class UserBookIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive4']
    user: Union[bool, 'UserArgsFromUserBookRecursive4']


class UserBookIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class UserBookArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyUserBookArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive1']
    user: Union[bool, 'UserArgsFromUserBookRecursive1']


class VoteIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive2']
    user: Union[bool, 'UserArgsFromUserBookRecursive2']


class VoteIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive3']
    user: Union[bool, 'UserArgsFromUserBookRecursive3']


class VoteIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive4']
    user: Union[bool, 'UserArgsFromUserBookRecursive4']


class VoteIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class VoteArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyVoteArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive1']
    user: Union[bool, 'UserArgsFromUserBookRecursive1']


class ReadingProgressIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive2']
    user: Union[bool, 'UserArgsFromUserBookRecursive2']


class ReadingProgressIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive3']
    user: Union[bool, 'UserArgsFromUserBookRecursive3']


class ReadingProgressIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    book: Union[bool, 'BookArgsFromUserBookRecursive4']
    user: Union[bool, 'UserArgsFromUserBookRecursive4']


class ReadingProgressIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class ReadingProgressArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyReadingProgressArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive1']
    book: Union[bool, 'BookArgsFromUserBookRecursive1']
    genre: Union[bool, 'GenreArgsFromUserBookRecursive1']
    leader: Union[bool, 'UserArgsFromUserBookRecursive1']


class WeeklyResultIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive2']
    book: Union[bool, 'BookArgsFromUserBookRecursive2']
    genre: Union[bool, 'GenreArgsFromUserBookRecursive2']
    leader: Union[bool, 'UserArgsFromUserBookRecursive2']


class WeeklyResultIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive3']
    book: Union[bool, 'BookArgsFromUserBookRecursive3']
    genre: Union[bool, 'GenreArgsFromUserBookRecursive3']
    leader: Union[bool, 'UserArgsFromUserBookRecursive3']


class WeeklyResultIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive4']
    book: Union[bool, 'BookArgsFromUserBookRecursive4']
    genre: Union[bool, 'GenreArgsFromUserBookRecursive4']
    leader: Union[bool, 'UserArgsFromUserBookRecursive4']


class WeeklyResultIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class WeeklyResultArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyWeeklyResultArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive1']


class NotificationIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive2']


class NotificationIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive3']


class NotificationIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive4']


class NotificationIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class NotificationArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyNotificationArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    partner: Union[bool, 'PartnerArgsFromUserBookRecursive1']


class AdvertisementIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    partner: Union[bool, 'PartnerArgsFromUserBookRecursive2']


class AdvertisementIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    partner: Union[bool, 'PartnerArgsFromUserBookRecursive3']


class AdvertisementIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    partner: Union[bool, 'PartnerArgsFromUserBookRecursive4']


class AdvertisementIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class AdvertisementArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyAdvertisementArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserBookRecursive1']


class PartnerIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserBookRecursive2']


class PartnerIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserBookRecursive3']


class PartnerIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserBookRecursive4']


class PartnerIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class PartnerArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyPartnerArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserBookRecursive1']


class AchievementIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserBookRecursive2']


class AchievementIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserBookRecursive3']


class AchievementIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserBookRecursive4']


class AchievementIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class AchievementArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyAchievementArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive1']
    achievement: Union[bool, 'AchievementArgsFromUserBookRecursive1']


class UserAchievementIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive2']
    achievement: Union[bool, 'AchievementArgsFromUserBookRecursive2']


class UserAchievementIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive3']
    achievement: Union[bool, 'AchievementArgsFromUserBookRecursive3']


class UserAchievementIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive4']
    achievement: Union[bool, 'AchievementArgsFromUserBookRecursive4']


class UserAchievementIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class UserAchievementArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyUserAchievementArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyUserBookArgs = FindManyUserBookArgsFromUserBook
FindFirstUserBookArgs = FindManyUserBookArgsFromUserBook


    

class UserBookWhereInput(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    rating: Union[None, _int, 'types.IntFilter']
    addedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserBookWhereInputRecursive1', List['UserBookWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserBookWhereInputRecursive1']
    OR: List['UserBookWhereInputRecursive1']
    NOT: List['UserBookWhereInputRecursive1']


class UserBookWhereInputRecursive1(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    rating: Union[None, _int, 'types.IntFilter']
    addedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserBookWhereInputRecursive2', List['UserBookWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserBookWhereInputRecursive2']
    OR: List['UserBookWhereInputRecursive2']
    NOT: List['UserBookWhereInputRecursive2']


class UserBookWhereInputRecursive2(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    rating: Union[None, _int, 'types.IntFilter']
    addedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserBookWhereInputRecursive3', List['UserBookWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserBookWhereInputRecursive3']
    OR: List['UserBookWhereInputRecursive3']
    NOT: List['UserBookWhereInputRecursive3']


class UserBookWhereInputRecursive3(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    rating: Union[None, _int, 'types.IntFilter']
    addedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserBookWhereInputRecursive4', List['UserBookWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserBookWhereInputRecursive4']
    OR: List['UserBookWhereInputRecursive4']
    NOT: List['UserBookWhereInputRecursive4']


class UserBookWhereInputRecursive4(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    rating: Union[None, _int, 'types.IntFilter']
    addedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'



# aggregate UserBook types


    

class UserBookScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']
    addedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserBookScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserBookScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserBookScalarWhereWithAggregatesInputRecursive1']


class UserBookScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']
    addedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserBookScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserBookScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserBookScalarWhereWithAggregatesInputRecursive2']


class UserBookScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']
    addedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserBookScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserBookScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserBookScalarWhereWithAggregatesInputRecursive3']


class UserBookScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']
    addedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserBookScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserBookScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserBookScalarWhereWithAggregatesInputRecursive4']


class UserBookScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']
    addedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserBookGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    bookId: _int
    status: _str
    rating: _int
    addedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserBookSumAggregateOutput'
    _avg: 'UserBookAvgAggregateOutput'
    _min: 'UserBookMinAggregateOutput'
    _max: 'UserBookMaxAggregateOutput'
    _count: 'UserBookCountAggregateOutput'


class UserBookAvgAggregateOutput(TypedDict, total=False):
    """UserBook output for aggregating averages"""
    id: float
    userId: float
    bookId: float
    rating: float


class UserBookSumAggregateOutput(TypedDict, total=False):
    """UserBook output for aggregating sums"""
    id: _int
    userId: _int
    bookId: _int
    rating: _int


class UserBookScalarAggregateOutput(TypedDict, total=False):
    """UserBook output including scalar fields"""
    id: _int
    userId: _int
    bookId: _int
    status: _str
    rating: _int
    addedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserBookMinAggregateOutput = UserBookScalarAggregateOutput
UserBookMaxAggregateOutput = UserBookScalarAggregateOutput


class UserBookMaxAggregateInput(TypedDict, total=False):
    """UserBook input for aggregating by max"""
    id: bool
    userId: bool
    bookId: bool
    status: bool
    rating: bool
    addedAt: bool
    createdAt: bool
    updatedAt: bool


class UserBookMinAggregateInput(TypedDict, total=False):
    """UserBook input for aggregating by min"""
    id: bool
    userId: bool
    bookId: bool
    status: bool
    rating: bool
    addedAt: bool
    createdAt: bool
    updatedAt: bool


class UserBookNumberAggregateInput(TypedDict, total=False):
    """UserBook input for aggregating numbers"""
    id: bool
    userId: bool
    bookId: bool
    rating: bool


UserBookAvgAggregateInput = UserBookNumberAggregateInput
UserBookSumAggregateInput = UserBookNumberAggregateInput


UserBookCountAggregateInput = TypedDict(
    'UserBookCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'bookId': bool,
        'status': bool,
        'rating': bool,
        'addedAt': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserBookCountAggregateOutput = TypedDict(
    'UserBookCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'bookId': int,
        'status': int,
        'rating': int,
        'addedAt': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserBookKeys = Literal[
    'id',
    'userId',
    'bookId',
    'status',
    'rating',
    'addedAt',
    'createdAt',
    'updatedAt',
    'book',
    'user',
]
UserBookScalarFieldKeys = Literal[
    'id',
    'userId',
    'bookId',
    'status',
    'rating',
    'addedAt',
    'createdAt',
    'updatedAt',
]
UserBookScalarFieldKeysT = TypeVar('UserBookScalarFieldKeysT', bound=UserBookScalarFieldKeys)

UserBookRelationalFieldKeys = Literal[
        'book',
        'user',
    ]

# Vote types

class VoteOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Vote create method"""
    id: _int
    userId: _int
    bookId: _int
    voteDate: datetime.datetime
    book: 'BookCreateNestedWithoutRelationsInput'
    user: 'UserCreateNestedWithoutRelationsInput'


class VoteCreateInput(VoteOptionalCreateInput):
    """Required arguments to the Vote create method"""
    weekNumber: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VoteOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Vote create method, without relations"""
    id: _int
    userId: _int
    bookId: _int
    voteDate: datetime.datetime


class VoteCreateWithoutRelationsInput(VoteOptionalCreateWithoutRelationsInput):
    """Required arguments to the Vote create method, without relations"""
    weekNumber: _int

class VoteConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'VoteCreateWithoutRelationsInput'
    where: 'VoteWhereUniqueInput'

class VoteCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VoteCreateWithoutRelationsInput'
    connect: 'VoteWhereUniqueInput'
    connect_or_create: 'VoteConnectOrCreateWithoutRelationsInput'


class VoteCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VoteCreateWithoutRelationsInput', List['VoteCreateWithoutRelationsInput']]
    connect: Union['VoteWhereUniqueInput', List['VoteWhereUniqueInput']]
    connect_or_create: Union['VoteConnectOrCreateWithoutRelationsInput', List['VoteConnectOrCreateWithoutRelationsInput']]

_VoteWhereUnique_id_Input = TypedDict(
    '_VoteWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_VoteCompounduserId_bookId_weekNumberKeyInner = TypedDict(
    '_VoteCompounduserId_bookId_weekNumberKeyInner',
    {
        'userId': '_int',
        'bookId': '_int',
        'weekNumber': '_int',
    },
    total=True
)

_VoteCompounduserId_bookId_weekNumberKey = TypedDict(
    '_VoteCompounduserId_bookId_weekNumberKey',
    {
        'userId_bookId_weekNumber': '_VoteCompounduserId_bookId_weekNumberKeyInner',
    },
    total=True
)

VoteWhereUniqueInput = Union[
    '_VoteWhereUnique_id_Input',
    '_VoteCompounduserId_bookId_weekNumberKey',
]


class VoteUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    voteDate: datetime.datetime
    book: 'BookUpdateOneWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'


class VoteUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    voteDate: datetime.datetime


class VoteUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VoteCreateWithoutRelationsInput']
    connect: List['VoteWhereUniqueInput']
    connect_or_create: List['VoteConnectOrCreateWithoutRelationsInput']
    set: List['VoteWhereUniqueInput']
    disconnect: List['VoteWhereUniqueInput']
    delete: List['VoteWhereUniqueInput']

    # TODO
    # update: List['VoteUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VoteUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VoteScalarWhereInput']
    # upsert: List['VoteUpserteWithWhereUniqueWithoutRelationsInput']


class VoteUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VoteCreateWithoutRelationsInput'
    connect: 'VoteWhereUniqueInput'
    connect_or_create: 'VoteConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VoteUpdateInput'
    # upsert: 'VoteUpsertWithoutRelationsInput'


class VoteUpsertInput(TypedDict):
    create: 'VoteCreateInput'
    update: 'VoteUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Vote_id_OrderByInput = TypedDict(
    '_Vote_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Vote_userId_OrderByInput = TypedDict(
    '_Vote_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Vote_bookId_OrderByInput = TypedDict(
    '_Vote_bookId_OrderByInput',
    {
        'bookId': 'SortOrder',
    },
    total=True
)

_Vote_weekNumber_OrderByInput = TypedDict(
    '_Vote_weekNumber_OrderByInput',
    {
        'weekNumber': 'SortOrder',
    },
    total=True
)

_Vote_voteDate_OrderByInput = TypedDict(
    '_Vote_voteDate_OrderByInput',
    {
        'voteDate': 'SortOrder',
    },
    total=True
)

_Vote_RelevanceInner = TypedDict(
    '_Vote_RelevanceInner',
    {
        'fields': 'List[VoteScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Vote_RelevanceOrderByInput = TypedDict(
    '_Vote_RelevanceOrderByInput',
    {
        '_relevance': '_Vote_RelevanceInner',
    },
    total=True
)

VoteOrderByInput = Union[
    '_Vote_id_OrderByInput',
    '_Vote_userId_OrderByInput',
    '_Vote_bookId_OrderByInput',
    '_Vote_weekNumber_OrderByInput',
    '_Vote_voteDate_OrderByInput',
    '_Vote_RelevanceOrderByInput',
]



# recursive Vote types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VoteRelationFilter = TypedDict(
    'VoteRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VoteListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VoteInclude(TypedDict, total=False):
    """Vote relational arguments"""
    book: Union[bool, 'BookArgsFromVote']
    user: Union[bool, 'UserArgsFromVote']


    

class UserIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    groups: Union[bool, 'FindManyUserGroupArgsFromVoteRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromVoteRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromVoteRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromVoteRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromVoteRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromVoteRecursive1']


class UserIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    groups: Union[bool, 'FindManyUserGroupArgsFromVoteRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromVoteRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromVoteRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromVoteRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromVoteRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromVoteRecursive2']


class UserIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    groups: Union[bool, 'FindManyUserGroupArgsFromVoteRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromVoteRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromVoteRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromVoteRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromVoteRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromVoteRecursive3']


class UserIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    groups: Union[bool, 'FindManyUserGroupArgsFromVoteRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromVoteRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromVoteRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromVoteRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromVoteRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromVoteRecursive4']


class UserIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class UserArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyUserArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserGroupArgsFromVoteRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromVoteRecursive1']


class GroupIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserGroupArgsFromVoteRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromVoteRecursive2']


class GroupIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserGroupArgsFromVoteRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromVoteRecursive3']


class GroupIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserGroupArgsFromVoteRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromVoteRecursive4']


class GroupIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class GroupArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyGroupArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserPermissionArgsFromVoteRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromVoteRecursive1']


class PermissionIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserPermissionArgsFromVoteRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromVoteRecursive2']


class PermissionIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserPermissionArgsFromVoteRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromVoteRecursive3']


class PermissionIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserPermissionArgsFromVoteRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromVoteRecursive4']


class PermissionIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class PermissionArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyPermissionArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive1']
    group: Union[bool, 'GroupArgsFromVoteRecursive1']


class UserGroupIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive2']
    group: Union[bool, 'GroupArgsFromVoteRecursive2']


class UserGroupIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive3']
    group: Union[bool, 'GroupArgsFromVoteRecursive3']


class UserGroupIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive4']
    group: Union[bool, 'GroupArgsFromVoteRecursive4']


class UserGroupIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class UserGroupArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyUserGroupArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive1']
    permission: Union[bool, 'PermissionArgsFromVoteRecursive1']


class UserPermissionIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive2']
    permission: Union[bool, 'PermissionArgsFromVoteRecursive2']


class UserPermissionIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive3']
    permission: Union[bool, 'PermissionArgsFromVoteRecursive3']


class UserPermissionIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive4']
    permission: Union[bool, 'PermissionArgsFromVoteRecursive4']


class UserPermissionIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class UserPermissionArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyUserPermissionArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    group: Union[bool, 'GroupArgsFromVoteRecursive1']
    permission: Union[bool, 'PermissionArgsFromVoteRecursive1']


class GroupPermissionIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    group: Union[bool, 'GroupArgsFromVoteRecursive2']
    permission: Union[bool, 'PermissionArgsFromVoteRecursive2']


class GroupPermissionIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    group: Union[bool, 'GroupArgsFromVoteRecursive3']
    permission: Union[bool, 'PermissionArgsFromVoteRecursive3']


class GroupPermissionIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    group: Union[bool, 'GroupArgsFromVoteRecursive4']
    permission: Union[bool, 'PermissionArgsFromVoteRecursive4']


class GroupPermissionIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class GroupPermissionArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyGroupPermissionArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive1']


class TokenIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive2']


class TokenIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive3']


class TokenIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive4']


class TokenIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class TokenArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyTokenArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive1']


class SessionIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive2']


class SessionIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive3']


class SessionIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive4']


class SessionIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class SessionArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManySessionArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive1']
    parent: Union[bool, 'GenreArgsFromVoteRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromVoteRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive1']


class GenreIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive2']
    parent: Union[bool, 'GenreArgsFromVoteRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromVoteRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive2']


class GenreIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive3']
    parent: Union[bool, 'GenreArgsFromVoteRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromVoteRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive3']


class GenreIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive4']
    parent: Union[bool, 'GenreArgsFromVoteRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromVoteRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive4']


class GenreIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class GenreArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyGenreArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive1']


class AgeCategoryIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive2']


class AgeCategoryIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive3']


class AgeCategoryIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive4']


class AgeCategoryIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class AgeCategoryArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyAgeCategoryArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive1']


class AuthorIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive2']


class AuthorIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive3']


class AuthorIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive4']


class AuthorIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class AuthorArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyAuthorArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    author: Union[bool, 'AuthorArgsFromVoteRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive1']
    genre: Union[bool, 'GenreArgsFromVoteRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive1']


class BookIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    author: Union[bool, 'AuthorArgsFromVoteRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive2']
    genre: Union[bool, 'GenreArgsFromVoteRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive2']


class BookIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    author: Union[bool, 'AuthorArgsFromVoteRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive3']
    genre: Union[bool, 'GenreArgsFromVoteRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive3']


class BookIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    author: Union[bool, 'AuthorArgsFromVoteRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive4']
    genre: Union[bool, 'GenreArgsFromVoteRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive4']


class BookIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class BookArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyBookArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive1']
    user: Union[bool, 'UserArgsFromVoteRecursive1']


class UserBookIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive2']
    user: Union[bool, 'UserArgsFromVoteRecursive2']


class UserBookIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive3']
    user: Union[bool, 'UserArgsFromVoteRecursive3']


class UserBookIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive4']
    user: Union[bool, 'UserArgsFromVoteRecursive4']


class UserBookIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class UserBookArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyUserBookArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive1']
    user: Union[bool, 'UserArgsFromVoteRecursive1']


class VoteIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive2']
    user: Union[bool, 'UserArgsFromVoteRecursive2']


class VoteIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive3']
    user: Union[bool, 'UserArgsFromVoteRecursive3']


class VoteIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive4']
    user: Union[bool, 'UserArgsFromVoteRecursive4']


class VoteIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class VoteArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyVoteArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive1']
    user: Union[bool, 'UserArgsFromVoteRecursive1']


class ReadingProgressIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive2']
    user: Union[bool, 'UserArgsFromVoteRecursive2']


class ReadingProgressIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive3']
    user: Union[bool, 'UserArgsFromVoteRecursive3']


class ReadingProgressIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    book: Union[bool, 'BookArgsFromVoteRecursive4']
    user: Union[bool, 'UserArgsFromVoteRecursive4']


class ReadingProgressIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class ReadingProgressArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyReadingProgressArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive1']
    book: Union[bool, 'BookArgsFromVoteRecursive1']
    genre: Union[bool, 'GenreArgsFromVoteRecursive1']
    leader: Union[bool, 'UserArgsFromVoteRecursive1']


class WeeklyResultIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive2']
    book: Union[bool, 'BookArgsFromVoteRecursive2']
    genre: Union[bool, 'GenreArgsFromVoteRecursive2']
    leader: Union[bool, 'UserArgsFromVoteRecursive2']


class WeeklyResultIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive3']
    book: Union[bool, 'BookArgsFromVoteRecursive3']
    genre: Union[bool, 'GenreArgsFromVoteRecursive3']
    leader: Union[bool, 'UserArgsFromVoteRecursive3']


class WeeklyResultIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive4']
    book: Union[bool, 'BookArgsFromVoteRecursive4']
    genre: Union[bool, 'GenreArgsFromVoteRecursive4']
    leader: Union[bool, 'UserArgsFromVoteRecursive4']


class WeeklyResultIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class WeeklyResultArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyWeeklyResultArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive1']


class NotificationIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive2']


class NotificationIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive3']


class NotificationIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive4']


class NotificationIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class NotificationArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyNotificationArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    partner: Union[bool, 'PartnerArgsFromVoteRecursive1']


class AdvertisementIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    partner: Union[bool, 'PartnerArgsFromVoteRecursive2']


class AdvertisementIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    partner: Union[bool, 'PartnerArgsFromVoteRecursive3']


class AdvertisementIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    partner: Union[bool, 'PartnerArgsFromVoteRecursive4']


class AdvertisementIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class AdvertisementArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyAdvertisementArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromVoteRecursive1']


class PartnerIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromVoteRecursive2']


class PartnerIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromVoteRecursive3']


class PartnerIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromVoteRecursive4']


class PartnerIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class PartnerArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyPartnerArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserAchievementArgsFromVoteRecursive1']


class AchievementIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserAchievementArgsFromVoteRecursive2']


class AchievementIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserAchievementArgsFromVoteRecursive3']


class AchievementIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    users: Union[bool, 'FindManyUserAchievementArgsFromVoteRecursive4']


class AchievementIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class AchievementArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyAchievementArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive1']
    achievement: Union[bool, 'AchievementArgsFromVoteRecursive1']


class UserAchievementIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive2']
    achievement: Union[bool, 'AchievementArgsFromVoteRecursive2']


class UserAchievementIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive3']
    achievement: Union[bool, 'AchievementArgsFromVoteRecursive3']


class UserAchievementIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive4']
    achievement: Union[bool, 'AchievementArgsFromVoteRecursive4']


class UserAchievementIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class UserAchievementArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyUserAchievementArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyVoteArgs = FindManyVoteArgsFromVote
FindFirstVoteArgs = FindManyVoteArgsFromVote


    

class VoteWhereInput(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['VoteWhereInputRecursive1', List['VoteWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VoteWhereInputRecursive1']
    OR: List['VoteWhereInputRecursive1']
    NOT: List['VoteWhereInputRecursive1']


class VoteWhereInputRecursive1(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['VoteWhereInputRecursive2', List['VoteWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VoteWhereInputRecursive2']
    OR: List['VoteWhereInputRecursive2']
    NOT: List['VoteWhereInputRecursive2']


class VoteWhereInputRecursive2(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['VoteWhereInputRecursive3', List['VoteWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VoteWhereInputRecursive3']
    OR: List['VoteWhereInputRecursive3']
    NOT: List['VoteWhereInputRecursive3']


class VoteWhereInputRecursive3(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['VoteWhereInputRecursive4', List['VoteWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VoteWhereInputRecursive4']
    OR: List['VoteWhereInputRecursive4']
    NOT: List['VoteWhereInputRecursive4']


class VoteWhereInputRecursive4(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'



# aggregate Vote types


    

class VoteScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VoteScalarWhereWithAggregatesInputRecursive1']
    OR: List['VoteScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VoteScalarWhereWithAggregatesInputRecursive1']


class VoteScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VoteScalarWhereWithAggregatesInputRecursive2']
    OR: List['VoteScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VoteScalarWhereWithAggregatesInputRecursive2']


class VoteScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VoteScalarWhereWithAggregatesInputRecursive3']
    OR: List['VoteScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VoteScalarWhereWithAggregatesInputRecursive3']


class VoteScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VoteScalarWhereWithAggregatesInputRecursive4']
    OR: List['VoteScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VoteScalarWhereWithAggregatesInputRecursive4']


class VoteScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VoteGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int
    voteDate: datetime.datetime
    _sum: 'VoteSumAggregateOutput'
    _avg: 'VoteAvgAggregateOutput'
    _min: 'VoteMinAggregateOutput'
    _max: 'VoteMaxAggregateOutput'
    _count: 'VoteCountAggregateOutput'


class VoteAvgAggregateOutput(TypedDict, total=False):
    """Vote output for aggregating averages"""
    id: float
    userId: float
    bookId: float
    weekNumber: float


class VoteSumAggregateOutput(TypedDict, total=False):
    """Vote output for aggregating sums"""
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int


class VoteScalarAggregateOutput(TypedDict, total=False):
    """Vote output including scalar fields"""
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int
    voteDate: datetime.datetime


VoteMinAggregateOutput = VoteScalarAggregateOutput
VoteMaxAggregateOutput = VoteScalarAggregateOutput


class VoteMaxAggregateInput(TypedDict, total=False):
    """Vote input for aggregating by max"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool
    voteDate: bool


class VoteMinAggregateInput(TypedDict, total=False):
    """Vote input for aggregating by min"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool
    voteDate: bool


class VoteNumberAggregateInput(TypedDict, total=False):
    """Vote input for aggregating numbers"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool


VoteAvgAggregateInput = VoteNumberAggregateInput
VoteSumAggregateInput = VoteNumberAggregateInput


VoteCountAggregateInput = TypedDict(
    'VoteCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'bookId': bool,
        'weekNumber': bool,
        'voteDate': bool,
        '_all': bool,
    },
    total=False,
)

VoteCountAggregateOutput = TypedDict(
    'VoteCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'bookId': int,
        'weekNumber': int,
        'voteDate': int,
        '_all': int,
    },
    total=False,
)


VoteKeys = Literal[
    'id',
    'userId',
    'bookId',
    'weekNumber',
    'voteDate',
    'book',
    'user',
]
VoteScalarFieldKeys = Literal[
    'id',
    'userId',
    'bookId',
    'weekNumber',
    'voteDate',
]
VoteScalarFieldKeysT = TypeVar('VoteScalarFieldKeysT', bound=VoteScalarFieldKeys)

VoteRelationalFieldKeys = Literal[
        'book',
        'user',
    ]

# ReadingProgress types

class ReadingProgressOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ReadingProgress create method"""
    id: _int
    userId: _int
    bookId: _int
    marks: _int
    progressDate: datetime.datetime
    book: 'BookCreateNestedWithoutRelationsInput'
    user: 'UserCreateNestedWithoutRelationsInput'


class ReadingProgressCreateInput(ReadingProgressOptionalCreateInput):
    """Required arguments to the ReadingProgress create method"""
    weekNumber: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ReadingProgressOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ReadingProgress create method, without relations"""
    id: _int
    userId: _int
    bookId: _int
    marks: _int
    progressDate: datetime.datetime


class ReadingProgressCreateWithoutRelationsInput(ReadingProgressOptionalCreateWithoutRelationsInput):
    """Required arguments to the ReadingProgress create method, without relations"""
    weekNumber: _int

class ReadingProgressConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ReadingProgressCreateWithoutRelationsInput'
    where: 'ReadingProgressWhereUniqueInput'

class ReadingProgressCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ReadingProgressCreateWithoutRelationsInput'
    connect: 'ReadingProgressWhereUniqueInput'
    connect_or_create: 'ReadingProgressConnectOrCreateWithoutRelationsInput'


class ReadingProgressCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ReadingProgressCreateWithoutRelationsInput', List['ReadingProgressCreateWithoutRelationsInput']]
    connect: Union['ReadingProgressWhereUniqueInput', List['ReadingProgressWhereUniqueInput']]
    connect_or_create: Union['ReadingProgressConnectOrCreateWithoutRelationsInput', List['ReadingProgressConnectOrCreateWithoutRelationsInput']]

_ReadingProgressWhereUnique_id_Input = TypedDict(
    '_ReadingProgressWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_ReadingProgressCompounduserId_bookId_weekNumberKeyInner = TypedDict(
    '_ReadingProgressCompounduserId_bookId_weekNumberKeyInner',
    {
        'userId': '_int',
        'bookId': '_int',
        'weekNumber': '_int',
    },
    total=True
)

_ReadingProgressCompounduserId_bookId_weekNumberKey = TypedDict(
    '_ReadingProgressCompounduserId_bookId_weekNumberKey',
    {
        'userId_bookId_weekNumber': '_ReadingProgressCompounduserId_bookId_weekNumberKeyInner',
    },
    total=True
)

ReadingProgressWhereUniqueInput = Union[
    '_ReadingProgressWhereUnique_id_Input',
    '_ReadingProgressCompounduserId_bookId_weekNumberKey',
]


class ReadingProgressUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    marks: Union[AtomicIntInput, _int]
    progressDate: datetime.datetime
    book: 'BookUpdateOneWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'


class ReadingProgressUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    marks: Union[AtomicIntInput, _int]
    progressDate: datetime.datetime


class ReadingProgressUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ReadingProgressCreateWithoutRelationsInput']
    connect: List['ReadingProgressWhereUniqueInput']
    connect_or_create: List['ReadingProgressConnectOrCreateWithoutRelationsInput']
    set: List['ReadingProgressWhereUniqueInput']
    disconnect: List['ReadingProgressWhereUniqueInput']
    delete: List['ReadingProgressWhereUniqueInput']

    # TODO
    # update: List['ReadingProgressUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ReadingProgressUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ReadingProgressScalarWhereInput']
    # upsert: List['ReadingProgressUpserteWithWhereUniqueWithoutRelationsInput']


class ReadingProgressUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ReadingProgressCreateWithoutRelationsInput'
    connect: 'ReadingProgressWhereUniqueInput'
    connect_or_create: 'ReadingProgressConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ReadingProgressUpdateInput'
    # upsert: 'ReadingProgressUpsertWithoutRelationsInput'


class ReadingProgressUpsertInput(TypedDict):
    create: 'ReadingProgressCreateInput'
    update: 'ReadingProgressUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ReadingProgress_id_OrderByInput = TypedDict(
    '_ReadingProgress_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ReadingProgress_userId_OrderByInput = TypedDict(
    '_ReadingProgress_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_ReadingProgress_bookId_OrderByInput = TypedDict(
    '_ReadingProgress_bookId_OrderByInput',
    {
        'bookId': 'SortOrder',
    },
    total=True
)

_ReadingProgress_weekNumber_OrderByInput = TypedDict(
    '_ReadingProgress_weekNumber_OrderByInput',
    {
        'weekNumber': 'SortOrder',
    },
    total=True
)

_ReadingProgress_marks_OrderByInput = TypedDict(
    '_ReadingProgress_marks_OrderByInput',
    {
        'marks': 'SortOrder',
    },
    total=True
)

_ReadingProgress_progressDate_OrderByInput = TypedDict(
    '_ReadingProgress_progressDate_OrderByInput',
    {
        'progressDate': 'SortOrder',
    },
    total=True
)

_ReadingProgress_RelevanceInner = TypedDict(
    '_ReadingProgress_RelevanceInner',
    {
        'fields': 'List[ReadingProgressScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ReadingProgress_RelevanceOrderByInput = TypedDict(
    '_ReadingProgress_RelevanceOrderByInput',
    {
        '_relevance': '_ReadingProgress_RelevanceInner',
    },
    total=True
)

ReadingProgressOrderByInput = Union[
    '_ReadingProgress_id_OrderByInput',
    '_ReadingProgress_userId_OrderByInput',
    '_ReadingProgress_bookId_OrderByInput',
    '_ReadingProgress_weekNumber_OrderByInput',
    '_ReadingProgress_marks_OrderByInput',
    '_ReadingProgress_progressDate_OrderByInput',
    '_ReadingProgress_RelevanceOrderByInput',
]



# recursive ReadingProgress types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ReadingProgressRelationFilter = TypedDict(
    'ReadingProgressRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ReadingProgressListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ReadingProgressInclude(TypedDict, total=False):
    """ReadingProgress relational arguments"""
    book: Union[bool, 'BookArgsFromReadingProgress']
    user: Union[bool, 'UserArgsFromReadingProgress']


    

class UserIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    groups: Union[bool, 'FindManyUserGroupArgsFromReadingProgressRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromReadingProgressRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromReadingProgressRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromReadingProgressRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromReadingProgressRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromReadingProgressRecursive1']


class UserIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    groups: Union[bool, 'FindManyUserGroupArgsFromReadingProgressRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromReadingProgressRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromReadingProgressRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromReadingProgressRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromReadingProgressRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromReadingProgressRecursive2']


class UserIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    groups: Union[bool, 'FindManyUserGroupArgsFromReadingProgressRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromReadingProgressRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromReadingProgressRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromReadingProgressRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromReadingProgressRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromReadingProgressRecursive3']


class UserIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    groups: Union[bool, 'FindManyUserGroupArgsFromReadingProgressRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromReadingProgressRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromReadingProgressRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromReadingProgressRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromReadingProgressRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromReadingProgressRecursive4']


class UserIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class UserArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyUserArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserGroupArgsFromReadingProgressRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromReadingProgressRecursive1']


class GroupIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserGroupArgsFromReadingProgressRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromReadingProgressRecursive2']


class GroupIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserGroupArgsFromReadingProgressRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromReadingProgressRecursive3']


class GroupIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserGroupArgsFromReadingProgressRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromReadingProgressRecursive4']


class GroupIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class GroupArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyGroupArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserPermissionArgsFromReadingProgressRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromReadingProgressRecursive1']


class PermissionIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserPermissionArgsFromReadingProgressRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromReadingProgressRecursive2']


class PermissionIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserPermissionArgsFromReadingProgressRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromReadingProgressRecursive3']


class PermissionIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserPermissionArgsFromReadingProgressRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromReadingProgressRecursive4']


class PermissionIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class PermissionArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyPermissionArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']
    group: Union[bool, 'GroupArgsFromReadingProgressRecursive1']


class UserGroupIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']
    group: Union[bool, 'GroupArgsFromReadingProgressRecursive2']


class UserGroupIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']
    group: Union[bool, 'GroupArgsFromReadingProgressRecursive3']


class UserGroupIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']
    group: Union[bool, 'GroupArgsFromReadingProgressRecursive4']


class UserGroupIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class UserGroupArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyUserGroupArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']
    permission: Union[bool, 'PermissionArgsFromReadingProgressRecursive1']


class UserPermissionIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']
    permission: Union[bool, 'PermissionArgsFromReadingProgressRecursive2']


class UserPermissionIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']
    permission: Union[bool, 'PermissionArgsFromReadingProgressRecursive3']


class UserPermissionIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']
    permission: Union[bool, 'PermissionArgsFromReadingProgressRecursive4']


class UserPermissionIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class UserPermissionArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyUserPermissionArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    group: Union[bool, 'GroupArgsFromReadingProgressRecursive1']
    permission: Union[bool, 'PermissionArgsFromReadingProgressRecursive1']


class GroupPermissionIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    group: Union[bool, 'GroupArgsFromReadingProgressRecursive2']
    permission: Union[bool, 'PermissionArgsFromReadingProgressRecursive2']


class GroupPermissionIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    group: Union[bool, 'GroupArgsFromReadingProgressRecursive3']
    permission: Union[bool, 'PermissionArgsFromReadingProgressRecursive3']


class GroupPermissionIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    group: Union[bool, 'GroupArgsFromReadingProgressRecursive4']
    permission: Union[bool, 'PermissionArgsFromReadingProgressRecursive4']


class GroupPermissionIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class GroupPermissionArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyGroupPermissionArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']


class TokenIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']


class TokenIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']


class TokenIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']


class TokenIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class TokenArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyTokenArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']


class SessionIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']


class SessionIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']


class SessionIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']


class SessionIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class SessionArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManySessionArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive1']
    parent: Union[bool, 'GenreArgsFromReadingProgressRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromReadingProgressRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive1']


class GenreIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive2']
    parent: Union[bool, 'GenreArgsFromReadingProgressRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromReadingProgressRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive2']


class GenreIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive3']
    parent: Union[bool, 'GenreArgsFromReadingProgressRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromReadingProgressRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive3']


class GenreIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive4']
    parent: Union[bool, 'GenreArgsFromReadingProgressRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromReadingProgressRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive4']


class GenreIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class GenreArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyGenreArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive1']


class AgeCategoryIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive2']


class AgeCategoryIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive3']


class AgeCategoryIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive4']


class AgeCategoryIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class AgeCategoryArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyAgeCategoryArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive1']


class AuthorIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive2']


class AuthorIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive3']


class AuthorIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive4']


class AuthorIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class AuthorArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyAuthorArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    author: Union[bool, 'AuthorArgsFromReadingProgressRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive1']
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive1']


class BookIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    author: Union[bool, 'AuthorArgsFromReadingProgressRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive2']
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive2']


class BookIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    author: Union[bool, 'AuthorArgsFromReadingProgressRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive3']
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive3']


class BookIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    author: Union[bool, 'AuthorArgsFromReadingProgressRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive4']
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive4']


class BookIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class BookArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyBookArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive1']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']


class UserBookIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive2']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']


class UserBookIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive3']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']


class UserBookIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive4']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']


class UserBookIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class UserBookArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyUserBookArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive1']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']


class VoteIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive2']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']


class VoteIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive3']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']


class VoteIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive4']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']


class VoteIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class VoteArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyVoteArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive1']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']


class ReadingProgressIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive2']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']


class ReadingProgressIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive3']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']


class ReadingProgressIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    book: Union[bool, 'BookArgsFromReadingProgressRecursive4']
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']


class ReadingProgressIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class ReadingProgressArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyReadingProgressArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive1']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive1']
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive1']
    leader: Union[bool, 'UserArgsFromReadingProgressRecursive1']


class WeeklyResultIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive2']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive2']
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive2']
    leader: Union[bool, 'UserArgsFromReadingProgressRecursive2']


class WeeklyResultIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive3']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive3']
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive3']
    leader: Union[bool, 'UserArgsFromReadingProgressRecursive3']


class WeeklyResultIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive4']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive4']
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive4']
    leader: Union[bool, 'UserArgsFromReadingProgressRecursive4']


class WeeklyResultIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class WeeklyResultArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyWeeklyResultArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']


class NotificationIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']


class NotificationIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']


class NotificationIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']


class NotificationIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class NotificationArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyNotificationArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    partner: Union[bool, 'PartnerArgsFromReadingProgressRecursive1']


class AdvertisementIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    partner: Union[bool, 'PartnerArgsFromReadingProgressRecursive2']


class AdvertisementIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    partner: Union[bool, 'PartnerArgsFromReadingProgressRecursive3']


class AdvertisementIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    partner: Union[bool, 'PartnerArgsFromReadingProgressRecursive4']


class AdvertisementIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class AdvertisementArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyAdvertisementArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromReadingProgressRecursive1']


class PartnerIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromReadingProgressRecursive2']


class PartnerIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromReadingProgressRecursive3']


class PartnerIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromReadingProgressRecursive4']


class PartnerIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class PartnerArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyPartnerArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserAchievementArgsFromReadingProgressRecursive1']


class AchievementIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserAchievementArgsFromReadingProgressRecursive2']


class AchievementIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserAchievementArgsFromReadingProgressRecursive3']


class AchievementIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    users: Union[bool, 'FindManyUserAchievementArgsFromReadingProgressRecursive4']


class AchievementIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class AchievementArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyAchievementArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']
    achievement: Union[bool, 'AchievementArgsFromReadingProgressRecursive1']


class UserAchievementIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']
    achievement: Union[bool, 'AchievementArgsFromReadingProgressRecursive2']


class UserAchievementIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']
    achievement: Union[bool, 'AchievementArgsFromReadingProgressRecursive3']


class UserAchievementIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']
    achievement: Union[bool, 'AchievementArgsFromReadingProgressRecursive4']


class UserAchievementIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class UserAchievementArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyUserAchievementArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyReadingProgressArgs = FindManyReadingProgressArgsFromReadingProgress
FindFirstReadingProgressArgs = FindManyReadingProgressArgsFromReadingProgress


    

class ReadingProgressWhereInput(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    marks: Union[_int, 'types.IntFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ReadingProgressWhereInputRecursive1', List['ReadingProgressWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ReadingProgressWhereInputRecursive1']
    OR: List['ReadingProgressWhereInputRecursive1']
    NOT: List['ReadingProgressWhereInputRecursive1']


class ReadingProgressWhereInputRecursive1(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    marks: Union[_int, 'types.IntFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ReadingProgressWhereInputRecursive2', List['ReadingProgressWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ReadingProgressWhereInputRecursive2']
    OR: List['ReadingProgressWhereInputRecursive2']
    NOT: List['ReadingProgressWhereInputRecursive2']


class ReadingProgressWhereInputRecursive2(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    marks: Union[_int, 'types.IntFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ReadingProgressWhereInputRecursive3', List['ReadingProgressWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ReadingProgressWhereInputRecursive3']
    OR: List['ReadingProgressWhereInputRecursive3']
    NOT: List['ReadingProgressWhereInputRecursive3']


class ReadingProgressWhereInputRecursive3(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    marks: Union[_int, 'types.IntFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['ReadingProgressWhereInputRecursive4', List['ReadingProgressWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ReadingProgressWhereInputRecursive4']
    OR: List['ReadingProgressWhereInputRecursive4']
    NOT: List['ReadingProgressWhereInputRecursive4']


class ReadingProgressWhereInputRecursive4(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    marks: Union[_int, 'types.IntFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeFilter']
    book: 'BookRelationFilter'
    user: 'UserRelationFilter'



# aggregate ReadingProgress types


    

class ReadingProgressScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    marks: Union[_int, 'types.IntWithAggregatesFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReadingProgressScalarWhereWithAggregatesInputRecursive1']
    OR: List['ReadingProgressScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ReadingProgressScalarWhereWithAggregatesInputRecursive1']


class ReadingProgressScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    marks: Union[_int, 'types.IntWithAggregatesFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReadingProgressScalarWhereWithAggregatesInputRecursive2']
    OR: List['ReadingProgressScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ReadingProgressScalarWhereWithAggregatesInputRecursive2']


class ReadingProgressScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    marks: Union[_int, 'types.IntWithAggregatesFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReadingProgressScalarWhereWithAggregatesInputRecursive3']
    OR: List['ReadingProgressScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ReadingProgressScalarWhereWithAggregatesInputRecursive3']


class ReadingProgressScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    marks: Union[_int, 'types.IntWithAggregatesFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReadingProgressScalarWhereWithAggregatesInputRecursive4']
    OR: List['ReadingProgressScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ReadingProgressScalarWhereWithAggregatesInputRecursive4']


class ReadingProgressScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    marks: Union[_int, 'types.IntWithAggregatesFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ReadingProgressGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int
    marks: _int
    progressDate: datetime.datetime
    _sum: 'ReadingProgressSumAggregateOutput'
    _avg: 'ReadingProgressAvgAggregateOutput'
    _min: 'ReadingProgressMinAggregateOutput'
    _max: 'ReadingProgressMaxAggregateOutput'
    _count: 'ReadingProgressCountAggregateOutput'


class ReadingProgressAvgAggregateOutput(TypedDict, total=False):
    """ReadingProgress output for aggregating averages"""
    id: float
    userId: float
    bookId: float
    weekNumber: float
    marks: float


class ReadingProgressSumAggregateOutput(TypedDict, total=False):
    """ReadingProgress output for aggregating sums"""
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int
    marks: _int


class ReadingProgressScalarAggregateOutput(TypedDict, total=False):
    """ReadingProgress output including scalar fields"""
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int
    marks: _int
    progressDate: datetime.datetime


ReadingProgressMinAggregateOutput = ReadingProgressScalarAggregateOutput
ReadingProgressMaxAggregateOutput = ReadingProgressScalarAggregateOutput


class ReadingProgressMaxAggregateInput(TypedDict, total=False):
    """ReadingProgress input for aggregating by max"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool
    marks: bool
    progressDate: bool


class ReadingProgressMinAggregateInput(TypedDict, total=False):
    """ReadingProgress input for aggregating by min"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool
    marks: bool
    progressDate: bool


class ReadingProgressNumberAggregateInput(TypedDict, total=False):
    """ReadingProgress input for aggregating numbers"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool
    marks: bool


ReadingProgressAvgAggregateInput = ReadingProgressNumberAggregateInput
ReadingProgressSumAggregateInput = ReadingProgressNumberAggregateInput


ReadingProgressCountAggregateInput = TypedDict(
    'ReadingProgressCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'bookId': bool,
        'weekNumber': bool,
        'marks': bool,
        'progressDate': bool,
        '_all': bool,
    },
    total=False,
)

ReadingProgressCountAggregateOutput = TypedDict(
    'ReadingProgressCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'bookId': int,
        'weekNumber': int,
        'marks': int,
        'progressDate': int,
        '_all': int,
    },
    total=False,
)


ReadingProgressKeys = Literal[
    'id',
    'userId',
    'bookId',
    'weekNumber',
    'marks',
    'progressDate',
    'book',
    'user',
]
ReadingProgressScalarFieldKeys = Literal[
    'id',
    'userId',
    'bookId',
    'weekNumber',
    'marks',
    'progressDate',
]
ReadingProgressScalarFieldKeysT = TypeVar('ReadingProgressScalarFieldKeysT', bound=ReadingProgressScalarFieldKeys)

ReadingProgressRelationalFieldKeys = Literal[
        'book',
        'user',
    ]

# WeeklyResult types

class WeeklyResultOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the WeeklyResult create method"""
    id: _int
    ageCategoryId: _int
    bookId: _int
    leaderUserId: _int
    genreId: Optional[_int]
    ageCategory: 'AgeCategoryCreateNestedWithoutRelationsInput'
    book: 'BookCreateNestedWithoutRelationsInput'
    genre: 'GenreCreateNestedWithoutRelationsInput'
    leader: 'UserCreateNestedWithoutRelationsInput'


class WeeklyResultCreateInput(WeeklyResultOptionalCreateInput):
    """Required arguments to the WeeklyResult create method"""
    weekNumber: _int
    totalMarks: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class WeeklyResultOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the WeeklyResult create method, without relations"""
    id: _int
    ageCategoryId: _int
    bookId: _int
    leaderUserId: _int
    genreId: Optional[_int]


class WeeklyResultCreateWithoutRelationsInput(WeeklyResultOptionalCreateWithoutRelationsInput):
    """Required arguments to the WeeklyResult create method, without relations"""
    weekNumber: _int
    totalMarks: _int

class WeeklyResultConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'WeeklyResultCreateWithoutRelationsInput'
    where: 'WeeklyResultWhereUniqueInput'

class WeeklyResultCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'WeeklyResultCreateWithoutRelationsInput'
    connect: 'WeeklyResultWhereUniqueInput'
    connect_or_create: 'WeeklyResultConnectOrCreateWithoutRelationsInput'


class WeeklyResultCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['WeeklyResultCreateWithoutRelationsInput', List['WeeklyResultCreateWithoutRelationsInput']]
    connect: Union['WeeklyResultWhereUniqueInput', List['WeeklyResultWhereUniqueInput']]
    connect_or_create: Union['WeeklyResultConnectOrCreateWithoutRelationsInput', List['WeeklyResultConnectOrCreateWithoutRelationsInput']]

_WeeklyResultWhereUnique_id_Input = TypedDict(
    '_WeeklyResultWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKeyInner = TypedDict(
    '_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKeyInner',
    {
        'weekNumber': '_int',
        'genreId': '_int',
        'ageCategoryId': '_int',
    },
    total=True
)

_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKey = TypedDict(
    '_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKey',
    {
        'weekNumber_genreId_ageCategoryId': '_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKeyInner',
    },
    total=True
)

WeeklyResultWhereUniqueInput = Union[
    '_WeeklyResultWhereUnique_id_Input',
    '_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKey',
]


class WeeklyResultUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    totalMarks: Union[AtomicIntInput, _int]
    ageCategory: 'AgeCategoryUpdateOneWithoutRelationsInput'
    book: 'BookUpdateOneWithoutRelationsInput'
    genre: 'GenreUpdateOneWithoutRelationsInput'
    leader: 'UserUpdateOneWithoutRelationsInput'


class WeeklyResultUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    totalMarks: Union[AtomicIntInput, _int]


class WeeklyResultUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['WeeklyResultCreateWithoutRelationsInput']
    connect: List['WeeklyResultWhereUniqueInput']
    connect_or_create: List['WeeklyResultConnectOrCreateWithoutRelationsInput']
    set: List['WeeklyResultWhereUniqueInput']
    disconnect: List['WeeklyResultWhereUniqueInput']
    delete: List['WeeklyResultWhereUniqueInput']

    # TODO
    # update: List['WeeklyResultUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['WeeklyResultUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['WeeklyResultScalarWhereInput']
    # upsert: List['WeeklyResultUpserteWithWhereUniqueWithoutRelationsInput']


class WeeklyResultUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'WeeklyResultCreateWithoutRelationsInput'
    connect: 'WeeklyResultWhereUniqueInput'
    connect_or_create: 'WeeklyResultConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'WeeklyResultUpdateInput'
    # upsert: 'WeeklyResultUpsertWithoutRelationsInput'


class WeeklyResultUpsertInput(TypedDict):
    create: 'WeeklyResultCreateInput'
    update: 'WeeklyResultUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_WeeklyResult_id_OrderByInput = TypedDict(
    '_WeeklyResult_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_WeeklyResult_weekNumber_OrderByInput = TypedDict(
    '_WeeklyResult_weekNumber_OrderByInput',
    {
        'weekNumber': 'SortOrder',
    },
    total=True
)

_WeeklyResult_ageCategoryId_OrderByInput = TypedDict(
    '_WeeklyResult_ageCategoryId_OrderByInput',
    {
        'ageCategoryId': 'SortOrder',
    },
    total=True
)

_WeeklyResult_bookId_OrderByInput = TypedDict(
    '_WeeklyResult_bookId_OrderByInput',
    {
        'bookId': 'SortOrder',
    },
    total=True
)

_WeeklyResult_leaderUserId_OrderByInput = TypedDict(
    '_WeeklyResult_leaderUserId_OrderByInput',
    {
        'leaderUserId': 'SortOrder',
    },
    total=True
)

_WeeklyResult_totalMarks_OrderByInput = TypedDict(
    '_WeeklyResult_totalMarks_OrderByInput',
    {
        'totalMarks': 'SortOrder',
    },
    total=True
)

_WeeklyResult_genreId_OrderByInput = TypedDict(
    '_WeeklyResult_genreId_OrderByInput',
    {
        'genreId': 'SortOrder',
    },
    total=True
)

_WeeklyResult_RelevanceInner = TypedDict(
    '_WeeklyResult_RelevanceInner',
    {
        'fields': 'List[WeeklyResultScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_WeeklyResult_RelevanceOrderByInput = TypedDict(
    '_WeeklyResult_RelevanceOrderByInput',
    {
        '_relevance': '_WeeklyResult_RelevanceInner',
    },
    total=True
)

WeeklyResultOrderByInput = Union[
    '_WeeklyResult_id_OrderByInput',
    '_WeeklyResult_weekNumber_OrderByInput',
    '_WeeklyResult_ageCategoryId_OrderByInput',
    '_WeeklyResult_bookId_OrderByInput',
    '_WeeklyResult_leaderUserId_OrderByInput',
    '_WeeklyResult_totalMarks_OrderByInput',
    '_WeeklyResult_genreId_OrderByInput',
    '_WeeklyResult_RelevanceOrderByInput',
]



# recursive WeeklyResult types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

WeeklyResultRelationFilter = TypedDict(
    'WeeklyResultRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class WeeklyResultListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class WeeklyResultInclude(TypedDict, total=False):
    """WeeklyResult relational arguments"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResult']
    book: Union[bool, 'BookArgsFromWeeklyResult']
    genre: Union[bool, 'GenreArgsFromWeeklyResult']
    leader: Union[bool, 'UserArgsFromWeeklyResult']


    

class UserIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    groups: Union[bool, 'FindManyUserGroupArgsFromWeeklyResultRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromWeeklyResultRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromWeeklyResultRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromWeeklyResultRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromWeeklyResultRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromWeeklyResultRecursive1']


class UserIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    groups: Union[bool, 'FindManyUserGroupArgsFromWeeklyResultRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromWeeklyResultRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromWeeklyResultRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromWeeklyResultRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromWeeklyResultRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromWeeklyResultRecursive2']


class UserIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    groups: Union[bool, 'FindManyUserGroupArgsFromWeeklyResultRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromWeeklyResultRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromWeeklyResultRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromWeeklyResultRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromWeeklyResultRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromWeeklyResultRecursive3']


class UserIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    groups: Union[bool, 'FindManyUserGroupArgsFromWeeklyResultRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromWeeklyResultRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromWeeklyResultRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromWeeklyResultRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromWeeklyResultRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromWeeklyResultRecursive4']


class UserIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class UserArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyUserArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserGroupArgsFromWeeklyResultRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromWeeklyResultRecursive1']


class GroupIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserGroupArgsFromWeeklyResultRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromWeeklyResultRecursive2']


class GroupIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserGroupArgsFromWeeklyResultRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromWeeklyResultRecursive3']


class GroupIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserGroupArgsFromWeeklyResultRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromWeeklyResultRecursive4']


class GroupIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class GroupArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyGroupArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserPermissionArgsFromWeeklyResultRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromWeeklyResultRecursive1']


class PermissionIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserPermissionArgsFromWeeklyResultRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromWeeklyResultRecursive2']


class PermissionIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserPermissionArgsFromWeeklyResultRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromWeeklyResultRecursive3']


class PermissionIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserPermissionArgsFromWeeklyResultRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromWeeklyResultRecursive4']


class PermissionIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class PermissionArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyPermissionArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']
    group: Union[bool, 'GroupArgsFromWeeklyResultRecursive1']


class UserGroupIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']
    group: Union[bool, 'GroupArgsFromWeeklyResultRecursive2']


class UserGroupIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']
    group: Union[bool, 'GroupArgsFromWeeklyResultRecursive3']


class UserGroupIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']
    group: Union[bool, 'GroupArgsFromWeeklyResultRecursive4']


class UserGroupIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class UserGroupArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyUserGroupArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']
    permission: Union[bool, 'PermissionArgsFromWeeklyResultRecursive1']


class UserPermissionIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']
    permission: Union[bool, 'PermissionArgsFromWeeklyResultRecursive2']


class UserPermissionIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']
    permission: Union[bool, 'PermissionArgsFromWeeklyResultRecursive3']


class UserPermissionIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']
    permission: Union[bool, 'PermissionArgsFromWeeklyResultRecursive4']


class UserPermissionIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class UserPermissionArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyUserPermissionArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    group: Union[bool, 'GroupArgsFromWeeklyResultRecursive1']
    permission: Union[bool, 'PermissionArgsFromWeeklyResultRecursive1']


class GroupPermissionIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    group: Union[bool, 'GroupArgsFromWeeklyResultRecursive2']
    permission: Union[bool, 'PermissionArgsFromWeeklyResultRecursive2']


class GroupPermissionIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    group: Union[bool, 'GroupArgsFromWeeklyResultRecursive3']
    permission: Union[bool, 'PermissionArgsFromWeeklyResultRecursive3']


class GroupPermissionIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    group: Union[bool, 'GroupArgsFromWeeklyResultRecursive4']
    permission: Union[bool, 'PermissionArgsFromWeeklyResultRecursive4']


class GroupPermissionIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class GroupPermissionArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyGroupPermissionArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']


class TokenIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']


class TokenIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']


class TokenIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']


class TokenIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class TokenArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyTokenArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']


class SessionIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']


class SessionIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']


class SessionIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']


class SessionIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class SessionArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManySessionArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive1']
    parent: Union[bool, 'GenreArgsFromWeeklyResultRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromWeeklyResultRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive1']


class GenreIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive2']
    parent: Union[bool, 'GenreArgsFromWeeklyResultRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromWeeklyResultRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive2']


class GenreIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive3']
    parent: Union[bool, 'GenreArgsFromWeeklyResultRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromWeeklyResultRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive3']


class GenreIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive4']
    parent: Union[bool, 'GenreArgsFromWeeklyResultRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromWeeklyResultRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive4']


class GenreIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class GenreArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyGenreArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive1']


class AgeCategoryIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive2']


class AgeCategoryIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive3']


class AgeCategoryIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive4']


class AgeCategoryIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class AgeCategoryArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyAgeCategoryArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive1']


class AuthorIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive2']


class AuthorIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive3']


class AuthorIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive4']


class AuthorIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class AuthorArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyAuthorArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    author: Union[bool, 'AuthorArgsFromWeeklyResultRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive1']
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive1']


class BookIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    author: Union[bool, 'AuthorArgsFromWeeklyResultRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive2']
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive2']


class BookIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    author: Union[bool, 'AuthorArgsFromWeeklyResultRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive3']
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive3']


class BookIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    author: Union[bool, 'AuthorArgsFromWeeklyResultRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive4']
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive4']


class BookIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class BookArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyBookArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive1']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']


class UserBookIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive2']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']


class UserBookIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive3']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']


class UserBookIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive4']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']


class UserBookIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class UserBookArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyUserBookArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive1']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']


class VoteIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive2']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']


class VoteIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive3']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']


class VoteIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive4']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']


class VoteIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class VoteArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyVoteArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive1']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']


class ReadingProgressIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive2']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']


class ReadingProgressIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive3']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']


class ReadingProgressIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive4']
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']


class ReadingProgressIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class ReadingProgressArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyReadingProgressArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive1']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive1']
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive1']
    leader: Union[bool, 'UserArgsFromWeeklyResultRecursive1']


class WeeklyResultIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive2']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive2']
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive2']
    leader: Union[bool, 'UserArgsFromWeeklyResultRecursive2']


class WeeklyResultIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive3']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive3']
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive3']
    leader: Union[bool, 'UserArgsFromWeeklyResultRecursive3']


class WeeklyResultIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive4']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive4']
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive4']
    leader: Union[bool, 'UserArgsFromWeeklyResultRecursive4']


class WeeklyResultIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class WeeklyResultArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyWeeklyResultArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']


class NotificationIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']


class NotificationIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']


class NotificationIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']


class NotificationIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class NotificationArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyNotificationArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    partner: Union[bool, 'PartnerArgsFromWeeklyResultRecursive1']


class AdvertisementIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    partner: Union[bool, 'PartnerArgsFromWeeklyResultRecursive2']


class AdvertisementIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    partner: Union[bool, 'PartnerArgsFromWeeklyResultRecursive3']


class AdvertisementIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    partner: Union[bool, 'PartnerArgsFromWeeklyResultRecursive4']


class AdvertisementIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class AdvertisementArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyAdvertisementArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromWeeklyResultRecursive1']


class PartnerIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromWeeklyResultRecursive2']


class PartnerIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromWeeklyResultRecursive3']


class PartnerIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromWeeklyResultRecursive4']


class PartnerIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class PartnerArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyPartnerArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserAchievementArgsFromWeeklyResultRecursive1']


class AchievementIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserAchievementArgsFromWeeklyResultRecursive2']


class AchievementIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserAchievementArgsFromWeeklyResultRecursive3']


class AchievementIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    users: Union[bool, 'FindManyUserAchievementArgsFromWeeklyResultRecursive4']


class AchievementIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class AchievementArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyAchievementArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']
    achievement: Union[bool, 'AchievementArgsFromWeeklyResultRecursive1']


class UserAchievementIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']
    achievement: Union[bool, 'AchievementArgsFromWeeklyResultRecursive2']


class UserAchievementIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']
    achievement: Union[bool, 'AchievementArgsFromWeeklyResultRecursive3']


class UserAchievementIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']
    achievement: Union[bool, 'AchievementArgsFromWeeklyResultRecursive4']


class UserAchievementIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class UserAchievementArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyUserAchievementArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyWeeklyResultArgs = FindManyWeeklyResultArgsFromWeeklyResult
FindFirstWeeklyResultArgs = FindManyWeeklyResultArgsFromWeeklyResult


    

class WeeklyResultWhereInput(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    leaderUserId: Union[_int, 'types.IntFilter']
    totalMarks: Union[_int, 'types.IntFilter']
    genreId: Union[None, _int, 'types.IntFilter']
    ageCategory: 'AgeCategoryRelationFilter'
    book: 'BookRelationFilter'
    genre: 'GenreRelationFilter'
    leader: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WeeklyResultWhereInputRecursive1', List['WeeklyResultWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['WeeklyResultWhereInputRecursive1']
    OR: List['WeeklyResultWhereInputRecursive1']
    NOT: List['WeeklyResultWhereInputRecursive1']


class WeeklyResultWhereInputRecursive1(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    leaderUserId: Union[_int, 'types.IntFilter']
    totalMarks: Union[_int, 'types.IntFilter']
    genreId: Union[None, _int, 'types.IntFilter']
    ageCategory: 'AgeCategoryRelationFilter'
    book: 'BookRelationFilter'
    genre: 'GenreRelationFilter'
    leader: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WeeklyResultWhereInputRecursive2', List['WeeklyResultWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['WeeklyResultWhereInputRecursive2']
    OR: List['WeeklyResultWhereInputRecursive2']
    NOT: List['WeeklyResultWhereInputRecursive2']


class WeeklyResultWhereInputRecursive2(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    leaderUserId: Union[_int, 'types.IntFilter']
    totalMarks: Union[_int, 'types.IntFilter']
    genreId: Union[None, _int, 'types.IntFilter']
    ageCategory: 'AgeCategoryRelationFilter'
    book: 'BookRelationFilter'
    genre: 'GenreRelationFilter'
    leader: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WeeklyResultWhereInputRecursive3', List['WeeklyResultWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['WeeklyResultWhereInputRecursive3']
    OR: List['WeeklyResultWhereInputRecursive3']
    NOT: List['WeeklyResultWhereInputRecursive3']


class WeeklyResultWhereInputRecursive3(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    leaderUserId: Union[_int, 'types.IntFilter']
    totalMarks: Union[_int, 'types.IntFilter']
    genreId: Union[None, _int, 'types.IntFilter']
    ageCategory: 'AgeCategoryRelationFilter'
    book: 'BookRelationFilter'
    genre: 'GenreRelationFilter'
    leader: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WeeklyResultWhereInputRecursive4', List['WeeklyResultWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['WeeklyResultWhereInputRecursive4']
    OR: List['WeeklyResultWhereInputRecursive4']
    NOT: List['WeeklyResultWhereInputRecursive4']


class WeeklyResultWhereInputRecursive4(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    leaderUserId: Union[_int, 'types.IntFilter']
    totalMarks: Union[_int, 'types.IntFilter']
    genreId: Union[None, _int, 'types.IntFilter']
    ageCategory: 'AgeCategoryRelationFilter'
    book: 'BookRelationFilter'
    genre: 'GenreRelationFilter'
    leader: 'UserRelationFilter'



# aggregate WeeklyResult types


    

class WeeklyResultScalarWhereWithAggregatesInput(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    leaderUserId: Union[_int, 'types.IntWithAggregatesFilter']
    totalMarks: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['WeeklyResultScalarWhereWithAggregatesInputRecursive1']
    OR: List['WeeklyResultScalarWhereWithAggregatesInputRecursive1']
    NOT: List['WeeklyResultScalarWhereWithAggregatesInputRecursive1']


class WeeklyResultScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    leaderUserId: Union[_int, 'types.IntWithAggregatesFilter']
    totalMarks: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['WeeklyResultScalarWhereWithAggregatesInputRecursive2']
    OR: List['WeeklyResultScalarWhereWithAggregatesInputRecursive2']
    NOT: List['WeeklyResultScalarWhereWithAggregatesInputRecursive2']


class WeeklyResultScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    leaderUserId: Union[_int, 'types.IntWithAggregatesFilter']
    totalMarks: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['WeeklyResultScalarWhereWithAggregatesInputRecursive3']
    OR: List['WeeklyResultScalarWhereWithAggregatesInputRecursive3']
    NOT: List['WeeklyResultScalarWhereWithAggregatesInputRecursive3']


class WeeklyResultScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    leaderUserId: Union[_int, 'types.IntWithAggregatesFilter']
    totalMarks: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['WeeklyResultScalarWhereWithAggregatesInputRecursive4']
    OR: List['WeeklyResultScalarWhereWithAggregatesInputRecursive4']
    NOT: List['WeeklyResultScalarWhereWithAggregatesInputRecursive4']


class WeeklyResultScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    leaderUserId: Union[_int, 'types.IntWithAggregatesFilter']
    totalMarks: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_int, 'types.IntWithAggregatesFilter']



class WeeklyResultGroupByOutput(TypedDict, total=False):
    id: _int
    weekNumber: _int
    ageCategoryId: _int
    bookId: _int
    leaderUserId: _int
    totalMarks: _int
    genreId: _int
    _sum: 'WeeklyResultSumAggregateOutput'
    _avg: 'WeeklyResultAvgAggregateOutput'
    _min: 'WeeklyResultMinAggregateOutput'
    _max: 'WeeklyResultMaxAggregateOutput'
    _count: 'WeeklyResultCountAggregateOutput'


class WeeklyResultAvgAggregateOutput(TypedDict, total=False):
    """WeeklyResult output for aggregating averages"""
    id: float
    weekNumber: float
    ageCategoryId: float
    bookId: float
    leaderUserId: float
    totalMarks: float
    genreId: float


class WeeklyResultSumAggregateOutput(TypedDict, total=False):
    """WeeklyResult output for aggregating sums"""
    id: _int
    weekNumber: _int
    ageCategoryId: _int
    bookId: _int
    leaderUserId: _int
    totalMarks: _int
    genreId: _int


class WeeklyResultScalarAggregateOutput(TypedDict, total=False):
    """WeeklyResult output including scalar fields"""
    id: _int
    weekNumber: _int
    ageCategoryId: _int
    bookId: _int
    leaderUserId: _int
    totalMarks: _int
    genreId: _int


WeeklyResultMinAggregateOutput = WeeklyResultScalarAggregateOutput
WeeklyResultMaxAggregateOutput = WeeklyResultScalarAggregateOutput


class WeeklyResultMaxAggregateInput(TypedDict, total=False):
    """WeeklyResult input for aggregating by max"""
    id: bool
    weekNumber: bool
    ageCategoryId: bool
    bookId: bool
    leaderUserId: bool
    totalMarks: bool
    genreId: bool


class WeeklyResultMinAggregateInput(TypedDict, total=False):
    """WeeklyResult input for aggregating by min"""
    id: bool
    weekNumber: bool
    ageCategoryId: bool
    bookId: bool
    leaderUserId: bool
    totalMarks: bool
    genreId: bool


class WeeklyResultNumberAggregateInput(TypedDict, total=False):
    """WeeklyResult input for aggregating numbers"""
    id: bool
    weekNumber: bool
    ageCategoryId: bool
    bookId: bool
    leaderUserId: bool
    totalMarks: bool
    genreId: bool


WeeklyResultAvgAggregateInput = WeeklyResultNumberAggregateInput
WeeklyResultSumAggregateInput = WeeklyResultNumberAggregateInput


WeeklyResultCountAggregateInput = TypedDict(
    'WeeklyResultCountAggregateInput',
    {
        'id': bool,
        'weekNumber': bool,
        'ageCategoryId': bool,
        'bookId': bool,
        'leaderUserId': bool,
        'totalMarks': bool,
        'genreId': bool,
        '_all': bool,
    },
    total=False,
)

WeeklyResultCountAggregateOutput = TypedDict(
    'WeeklyResultCountAggregateOutput',
    {
        'id': int,
        'weekNumber': int,
        'ageCategoryId': int,
        'bookId': int,
        'leaderUserId': int,
        'totalMarks': int,
        'genreId': int,
        '_all': int,
    },
    total=False,
)


WeeklyResultKeys = Literal[
    'id',
    'weekNumber',
    'ageCategoryId',
    'bookId',
    'leaderUserId',
    'totalMarks',
    'genreId',
    'ageCategory',
    'book',
    'genre',
    'leader',
]
WeeklyResultScalarFieldKeys = Literal[
    'id',
    'weekNumber',
    'ageCategoryId',
    'bookId',
    'leaderUserId',
    'totalMarks',
    'genreId',
]
WeeklyResultScalarFieldKeysT = TypeVar('WeeklyResultScalarFieldKeysT', bound=WeeklyResultScalarFieldKeys)

WeeklyResultRelationalFieldKeys = Literal[
        'ageCategory',
        'book',
        'genre',
        'leader',
    ]

# Notification types

class NotificationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Notification create method"""
    id: _int
    userId: _int
    sentDate: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class NotificationCreateInput(NotificationOptionalCreateInput):
    """Required arguments to the Notification create method"""
    message: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class NotificationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Notification create method, without relations"""
    id: _int
    userId: _int
    sentDate: datetime.datetime


class NotificationCreateWithoutRelationsInput(NotificationOptionalCreateWithoutRelationsInput):
    """Required arguments to the Notification create method, without relations"""
    message: _str

class NotificationConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'NotificationCreateWithoutRelationsInput'
    where: 'NotificationWhereUniqueInput'

class NotificationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'NotificationCreateWithoutRelationsInput'
    connect: 'NotificationWhereUniqueInput'
    connect_or_create: 'NotificationConnectOrCreateWithoutRelationsInput'


class NotificationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['NotificationCreateWithoutRelationsInput', List['NotificationCreateWithoutRelationsInput']]
    connect: Union['NotificationWhereUniqueInput', List['NotificationWhereUniqueInput']]
    connect_or_create: Union['NotificationConnectOrCreateWithoutRelationsInput', List['NotificationConnectOrCreateWithoutRelationsInput']]

_NotificationWhereUnique_id_Input = TypedDict(
    '_NotificationWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

NotificationWhereUniqueInput = _NotificationWhereUnique_id_Input


class NotificationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    message: _str
    sentDate: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class NotificationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    message: _str
    sentDate: datetime.datetime


class NotificationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['NotificationCreateWithoutRelationsInput']
    connect: List['NotificationWhereUniqueInput']
    connect_or_create: List['NotificationConnectOrCreateWithoutRelationsInput']
    set: List['NotificationWhereUniqueInput']
    disconnect: List['NotificationWhereUniqueInput']
    delete: List['NotificationWhereUniqueInput']

    # TODO
    # update: List['NotificationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['NotificationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['NotificationScalarWhereInput']
    # upsert: List['NotificationUpserteWithWhereUniqueWithoutRelationsInput']


class NotificationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'NotificationCreateWithoutRelationsInput'
    connect: 'NotificationWhereUniqueInput'
    connect_or_create: 'NotificationConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'NotificationUpdateInput'
    # upsert: 'NotificationUpsertWithoutRelationsInput'


class NotificationUpsertInput(TypedDict):
    create: 'NotificationCreateInput'
    update: 'NotificationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Notification_id_OrderByInput = TypedDict(
    '_Notification_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Notification_userId_OrderByInput = TypedDict(
    '_Notification_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Notification_message_OrderByInput = TypedDict(
    '_Notification_message_OrderByInput',
    {
        'message': 'SortOrder',
    },
    total=True
)

_Notification_sentDate_OrderByInput = TypedDict(
    '_Notification_sentDate_OrderByInput',
    {
        'sentDate': 'SortOrder',
    },
    total=True
)

_Notification_RelevanceInner = TypedDict(
    '_Notification_RelevanceInner',
    {
        'fields': 'List[NotificationScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Notification_RelevanceOrderByInput = TypedDict(
    '_Notification_RelevanceOrderByInput',
    {
        '_relevance': '_Notification_RelevanceInner',
    },
    total=True
)

NotificationOrderByInput = Union[
    '_Notification_id_OrderByInput',
    '_Notification_userId_OrderByInput',
    '_Notification_message_OrderByInput',
    '_Notification_sentDate_OrderByInput',
    '_Notification_RelevanceOrderByInput',
]



# recursive Notification types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

NotificationRelationFilter = TypedDict(
    'NotificationRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class NotificationListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class NotificationInclude(TypedDict, total=False):
    """Notification relational arguments"""
    user: Union[bool, 'UserArgsFromNotification']


    

class UserIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    groups: Union[bool, 'FindManyUserGroupArgsFromNotificationRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromNotificationRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromNotificationRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromNotificationRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromNotificationRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromNotificationRecursive1']


class UserIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    groups: Union[bool, 'FindManyUserGroupArgsFromNotificationRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromNotificationRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromNotificationRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromNotificationRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromNotificationRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromNotificationRecursive2']


class UserIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    groups: Union[bool, 'FindManyUserGroupArgsFromNotificationRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromNotificationRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromNotificationRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromNotificationRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromNotificationRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromNotificationRecursive3']


class UserIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    groups: Union[bool, 'FindManyUserGroupArgsFromNotificationRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromNotificationRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromNotificationRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromNotificationRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromNotificationRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromNotificationRecursive4']


class UserIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class UserArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyUserArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserGroupArgsFromNotificationRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromNotificationRecursive1']


class GroupIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserGroupArgsFromNotificationRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromNotificationRecursive2']


class GroupIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserGroupArgsFromNotificationRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromNotificationRecursive3']


class GroupIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserGroupArgsFromNotificationRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromNotificationRecursive4']


class GroupIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class GroupArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyGroupArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserPermissionArgsFromNotificationRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromNotificationRecursive1']


class PermissionIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserPermissionArgsFromNotificationRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromNotificationRecursive2']


class PermissionIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserPermissionArgsFromNotificationRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromNotificationRecursive3']


class PermissionIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserPermissionArgsFromNotificationRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromNotificationRecursive4']


class PermissionIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class PermissionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyPermissionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive1']
    group: Union[bool, 'GroupArgsFromNotificationRecursive1']


class UserGroupIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive2']
    group: Union[bool, 'GroupArgsFromNotificationRecursive2']


class UserGroupIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive3']
    group: Union[bool, 'GroupArgsFromNotificationRecursive3']


class UserGroupIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive4']
    group: Union[bool, 'GroupArgsFromNotificationRecursive4']


class UserGroupIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class UserGroupArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyUserGroupArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive1']
    permission: Union[bool, 'PermissionArgsFromNotificationRecursive1']


class UserPermissionIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive2']
    permission: Union[bool, 'PermissionArgsFromNotificationRecursive2']


class UserPermissionIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive3']
    permission: Union[bool, 'PermissionArgsFromNotificationRecursive3']


class UserPermissionIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive4']
    permission: Union[bool, 'PermissionArgsFromNotificationRecursive4']


class UserPermissionIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class UserPermissionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyUserPermissionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    group: Union[bool, 'GroupArgsFromNotificationRecursive1']
    permission: Union[bool, 'PermissionArgsFromNotificationRecursive1']


class GroupPermissionIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    group: Union[bool, 'GroupArgsFromNotificationRecursive2']
    permission: Union[bool, 'PermissionArgsFromNotificationRecursive2']


class GroupPermissionIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    group: Union[bool, 'GroupArgsFromNotificationRecursive3']
    permission: Union[bool, 'PermissionArgsFromNotificationRecursive3']


class GroupPermissionIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    group: Union[bool, 'GroupArgsFromNotificationRecursive4']
    permission: Union[bool, 'PermissionArgsFromNotificationRecursive4']


class GroupPermissionIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class GroupPermissionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyGroupPermissionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive1']


class TokenIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive2']


class TokenIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive3']


class TokenIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive4']


class TokenIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class TokenArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyTokenArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive1']


class SessionIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive2']


class SessionIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive3']


class SessionIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive4']


class SessionIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class SessionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManySessionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive1']
    parent: Union[bool, 'GenreArgsFromNotificationRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromNotificationRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive1']


class GenreIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive2']
    parent: Union[bool, 'GenreArgsFromNotificationRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromNotificationRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive2']


class GenreIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive3']
    parent: Union[bool, 'GenreArgsFromNotificationRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromNotificationRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive3']


class GenreIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive4']
    parent: Union[bool, 'GenreArgsFromNotificationRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromNotificationRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive4']


class GenreIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class GenreArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyGenreArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive1']


class AgeCategoryIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive2']


class AgeCategoryIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive3']


class AgeCategoryIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive4']


class AgeCategoryIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class AgeCategoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyAgeCategoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive1']


class AuthorIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive2']


class AuthorIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive3']


class AuthorIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive4']


class AuthorIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class AuthorArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyAuthorArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    author: Union[bool, 'AuthorArgsFromNotificationRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive1']
    genre: Union[bool, 'GenreArgsFromNotificationRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive1']


class BookIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    author: Union[bool, 'AuthorArgsFromNotificationRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive2']
    genre: Union[bool, 'GenreArgsFromNotificationRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive2']


class BookIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    author: Union[bool, 'AuthorArgsFromNotificationRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive3']
    genre: Union[bool, 'GenreArgsFromNotificationRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive3']


class BookIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    author: Union[bool, 'AuthorArgsFromNotificationRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive4']
    genre: Union[bool, 'GenreArgsFromNotificationRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive4']


class BookIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class BookArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyBookArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive1']
    user: Union[bool, 'UserArgsFromNotificationRecursive1']


class UserBookIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive2']
    user: Union[bool, 'UserArgsFromNotificationRecursive2']


class UserBookIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive3']
    user: Union[bool, 'UserArgsFromNotificationRecursive3']


class UserBookIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive4']
    user: Union[bool, 'UserArgsFromNotificationRecursive4']


class UserBookIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class UserBookArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyUserBookArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive1']
    user: Union[bool, 'UserArgsFromNotificationRecursive1']


class VoteIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive2']
    user: Union[bool, 'UserArgsFromNotificationRecursive2']


class VoteIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive3']
    user: Union[bool, 'UserArgsFromNotificationRecursive3']


class VoteIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive4']
    user: Union[bool, 'UserArgsFromNotificationRecursive4']


class VoteIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class VoteArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyVoteArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive1']
    user: Union[bool, 'UserArgsFromNotificationRecursive1']


class ReadingProgressIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive2']
    user: Union[bool, 'UserArgsFromNotificationRecursive2']


class ReadingProgressIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive3']
    user: Union[bool, 'UserArgsFromNotificationRecursive3']


class ReadingProgressIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    book: Union[bool, 'BookArgsFromNotificationRecursive4']
    user: Union[bool, 'UserArgsFromNotificationRecursive4']


class ReadingProgressIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class ReadingProgressArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyReadingProgressArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive1']
    book: Union[bool, 'BookArgsFromNotificationRecursive1']
    genre: Union[bool, 'GenreArgsFromNotificationRecursive1']
    leader: Union[bool, 'UserArgsFromNotificationRecursive1']


class WeeklyResultIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive2']
    book: Union[bool, 'BookArgsFromNotificationRecursive2']
    genre: Union[bool, 'GenreArgsFromNotificationRecursive2']
    leader: Union[bool, 'UserArgsFromNotificationRecursive2']


class WeeklyResultIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive3']
    book: Union[bool, 'BookArgsFromNotificationRecursive3']
    genre: Union[bool, 'GenreArgsFromNotificationRecursive3']
    leader: Union[bool, 'UserArgsFromNotificationRecursive3']


class WeeklyResultIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive4']
    book: Union[bool, 'BookArgsFromNotificationRecursive4']
    genre: Union[bool, 'GenreArgsFromNotificationRecursive4']
    leader: Union[bool, 'UserArgsFromNotificationRecursive4']


class WeeklyResultIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class WeeklyResultArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyWeeklyResultArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive1']


class NotificationIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive2']


class NotificationIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive3']


class NotificationIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive4']


class NotificationIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class NotificationArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyNotificationArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    partner: Union[bool, 'PartnerArgsFromNotificationRecursive1']


class AdvertisementIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    partner: Union[bool, 'PartnerArgsFromNotificationRecursive2']


class AdvertisementIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    partner: Union[bool, 'PartnerArgsFromNotificationRecursive3']


class AdvertisementIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    partner: Union[bool, 'PartnerArgsFromNotificationRecursive4']


class AdvertisementIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class AdvertisementArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyAdvertisementArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromNotificationRecursive1']


class PartnerIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromNotificationRecursive2']


class PartnerIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromNotificationRecursive3']


class PartnerIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromNotificationRecursive4']


class PartnerIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class PartnerArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyPartnerArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserAchievementArgsFromNotificationRecursive1']


class AchievementIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserAchievementArgsFromNotificationRecursive2']


class AchievementIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserAchievementArgsFromNotificationRecursive3']


class AchievementIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    users: Union[bool, 'FindManyUserAchievementArgsFromNotificationRecursive4']


class AchievementIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class AchievementArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyAchievementArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive1']
    achievement: Union[bool, 'AchievementArgsFromNotificationRecursive1']


class UserAchievementIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive2']
    achievement: Union[bool, 'AchievementArgsFromNotificationRecursive2']


class UserAchievementIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive3']
    achievement: Union[bool, 'AchievementArgsFromNotificationRecursive3']


class UserAchievementIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive4']
    achievement: Union[bool, 'AchievementArgsFromNotificationRecursive4']


class UserAchievementIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class UserAchievementArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyUserAchievementArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyNotificationArgs = FindManyNotificationArgsFromNotification
FindFirstNotificationArgs = FindManyNotificationArgsFromNotification


    

class NotificationWhereInput(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    message: Union[_str, 'types.StringFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive1', List['NotificationWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive1']
    OR: List['NotificationWhereInputRecursive1']
    NOT: List['NotificationWhereInputRecursive1']


class NotificationWhereInputRecursive1(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    message: Union[_str, 'types.StringFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive2', List['NotificationWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive2']
    OR: List['NotificationWhereInputRecursive2']
    NOT: List['NotificationWhereInputRecursive2']


class NotificationWhereInputRecursive2(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    message: Union[_str, 'types.StringFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive3', List['NotificationWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive3']
    OR: List['NotificationWhereInputRecursive3']
    NOT: List['NotificationWhereInputRecursive3']


class NotificationWhereInputRecursive3(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    message: Union[_str, 'types.StringFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive4', List['NotificationWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive4']
    OR: List['NotificationWhereInputRecursive4']
    NOT: List['NotificationWhereInputRecursive4']


class NotificationWhereInputRecursive4(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    message: Union[_str, 'types.StringFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Notification types


    

class NotificationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive1']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive1']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive1']


class NotificationScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive2']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive2']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive2']


class NotificationScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive3']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive3']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive3']


class NotificationScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive4']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive4']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive4']


class NotificationScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class NotificationGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    message: _str
    sentDate: datetime.datetime
    _sum: 'NotificationSumAggregateOutput'
    _avg: 'NotificationAvgAggregateOutput'
    _min: 'NotificationMinAggregateOutput'
    _max: 'NotificationMaxAggregateOutput'
    _count: 'NotificationCountAggregateOutput'


class NotificationAvgAggregateOutput(TypedDict, total=False):
    """Notification output for aggregating averages"""
    id: float
    userId: float


class NotificationSumAggregateOutput(TypedDict, total=False):
    """Notification output for aggregating sums"""
    id: _int
    userId: _int


class NotificationScalarAggregateOutput(TypedDict, total=False):
    """Notification output including scalar fields"""
    id: _int
    userId: _int
    message: _str
    sentDate: datetime.datetime


NotificationMinAggregateOutput = NotificationScalarAggregateOutput
NotificationMaxAggregateOutput = NotificationScalarAggregateOutput


class NotificationMaxAggregateInput(TypedDict, total=False):
    """Notification input for aggregating by max"""
    id: bool
    userId: bool
    message: bool
    sentDate: bool


class NotificationMinAggregateInput(TypedDict, total=False):
    """Notification input for aggregating by min"""
    id: bool
    userId: bool
    message: bool
    sentDate: bool


class NotificationNumberAggregateInput(TypedDict, total=False):
    """Notification input for aggregating numbers"""
    id: bool
    userId: bool


NotificationAvgAggregateInput = NotificationNumberAggregateInput
NotificationSumAggregateInput = NotificationNumberAggregateInput


NotificationCountAggregateInput = TypedDict(
    'NotificationCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'message': bool,
        'sentDate': bool,
        '_all': bool,
    },
    total=False,
)

NotificationCountAggregateOutput = TypedDict(
    'NotificationCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'message': int,
        'sentDate': int,
        '_all': int,
    },
    total=False,
)


NotificationKeys = Literal[
    'id',
    'userId',
    'message',
    'sentDate',
    'user',
]
NotificationScalarFieldKeys = Literal[
    'id',
    'userId',
    'message',
    'sentDate',
]
NotificationScalarFieldKeysT = TypeVar('NotificationScalarFieldKeysT', bound=NotificationScalarFieldKeys)

NotificationRelationalFieldKeys = Literal[
        'user',
    ]

# Advertisement types

class AdvertisementOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Advertisement create method"""
    id: _int
    partnerId: _int
    isActive: _bool
    partner: 'PartnerCreateNestedWithoutRelationsInput'


class AdvertisementCreateInput(AdvertisementOptionalCreateInput):
    """Required arguments to the Advertisement create method"""
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AdvertisementOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Advertisement create method, without relations"""
    id: _int
    partnerId: _int
    isActive: _bool


class AdvertisementCreateWithoutRelationsInput(AdvertisementOptionalCreateWithoutRelationsInput):
    """Required arguments to the Advertisement create method, without relations"""
    content: _str

class AdvertisementConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AdvertisementCreateWithoutRelationsInput'
    where: 'AdvertisementWhereUniqueInput'

class AdvertisementCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AdvertisementCreateWithoutRelationsInput'
    connect: 'AdvertisementWhereUniqueInput'
    connect_or_create: 'AdvertisementConnectOrCreateWithoutRelationsInput'


class AdvertisementCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AdvertisementCreateWithoutRelationsInput', List['AdvertisementCreateWithoutRelationsInput']]
    connect: Union['AdvertisementWhereUniqueInput', List['AdvertisementWhereUniqueInput']]
    connect_or_create: Union['AdvertisementConnectOrCreateWithoutRelationsInput', List['AdvertisementConnectOrCreateWithoutRelationsInput']]

_AdvertisementWhereUnique_id_Input = TypedDict(
    '_AdvertisementWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

AdvertisementWhereUniqueInput = _AdvertisementWhereUnique_id_Input


class AdvertisementUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    content: _str
    isActive: _bool
    partner: 'PartnerUpdateOneWithoutRelationsInput'


class AdvertisementUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    content: _str
    isActive: _bool


class AdvertisementUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AdvertisementCreateWithoutRelationsInput']
    connect: List['AdvertisementWhereUniqueInput']
    connect_or_create: List['AdvertisementConnectOrCreateWithoutRelationsInput']
    set: List['AdvertisementWhereUniqueInput']
    disconnect: List['AdvertisementWhereUniqueInput']
    delete: List['AdvertisementWhereUniqueInput']

    # TODO
    # update: List['AdvertisementUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AdvertisementUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AdvertisementScalarWhereInput']
    # upsert: List['AdvertisementUpserteWithWhereUniqueWithoutRelationsInput']


class AdvertisementUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AdvertisementCreateWithoutRelationsInput'
    connect: 'AdvertisementWhereUniqueInput'
    connect_or_create: 'AdvertisementConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AdvertisementUpdateInput'
    # upsert: 'AdvertisementUpsertWithoutRelationsInput'


class AdvertisementUpsertInput(TypedDict):
    create: 'AdvertisementCreateInput'
    update: 'AdvertisementUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Advertisement_id_OrderByInput = TypedDict(
    '_Advertisement_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Advertisement_content_OrderByInput = TypedDict(
    '_Advertisement_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Advertisement_partnerId_OrderByInput = TypedDict(
    '_Advertisement_partnerId_OrderByInput',
    {
        'partnerId': 'SortOrder',
    },
    total=True
)

_Advertisement_isActive_OrderByInput = TypedDict(
    '_Advertisement_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_Advertisement_RelevanceInner = TypedDict(
    '_Advertisement_RelevanceInner',
    {
        'fields': 'List[AdvertisementScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Advertisement_RelevanceOrderByInput = TypedDict(
    '_Advertisement_RelevanceOrderByInput',
    {
        '_relevance': '_Advertisement_RelevanceInner',
    },
    total=True
)

AdvertisementOrderByInput = Union[
    '_Advertisement_id_OrderByInput',
    '_Advertisement_content_OrderByInput',
    '_Advertisement_partnerId_OrderByInput',
    '_Advertisement_isActive_OrderByInput',
    '_Advertisement_RelevanceOrderByInput',
]



# recursive Advertisement types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AdvertisementRelationFilter = TypedDict(
    'AdvertisementRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AdvertisementListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AdvertisementInclude(TypedDict, total=False):
    """Advertisement relational arguments"""
    partner: Union[bool, 'PartnerArgsFromAdvertisement']


    

class UserIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAdvertisementRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAdvertisementRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromAdvertisementRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAdvertisementRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromAdvertisementRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAdvertisementRecursive1']


class UserIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAdvertisementRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAdvertisementRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromAdvertisementRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAdvertisementRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromAdvertisementRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAdvertisementRecursive2']


class UserIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAdvertisementRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAdvertisementRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromAdvertisementRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAdvertisementRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromAdvertisementRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAdvertisementRecursive3']


class UserIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAdvertisementRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAdvertisementRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromAdvertisementRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAdvertisementRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromAdvertisementRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAdvertisementRecursive4']


class UserIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class UserArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyUserArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserGroupArgsFromAdvertisementRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAdvertisementRecursive1']


class GroupIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserGroupArgsFromAdvertisementRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAdvertisementRecursive2']


class GroupIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserGroupArgsFromAdvertisementRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAdvertisementRecursive3']


class GroupIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserGroupArgsFromAdvertisementRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAdvertisementRecursive4']


class GroupIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class GroupArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyGroupArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAdvertisementRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAdvertisementRecursive1']


class PermissionIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAdvertisementRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAdvertisementRecursive2']


class PermissionIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAdvertisementRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAdvertisementRecursive3']


class PermissionIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAdvertisementRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAdvertisementRecursive4']


class PermissionIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class PermissionArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyPermissionArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']
    group: Union[bool, 'GroupArgsFromAdvertisementRecursive1']


class UserGroupIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']
    group: Union[bool, 'GroupArgsFromAdvertisementRecursive2']


class UserGroupIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']
    group: Union[bool, 'GroupArgsFromAdvertisementRecursive3']


class UserGroupIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']
    group: Union[bool, 'GroupArgsFromAdvertisementRecursive4']


class UserGroupIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class UserGroupArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyUserGroupArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']
    permission: Union[bool, 'PermissionArgsFromAdvertisementRecursive1']


class UserPermissionIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']
    permission: Union[bool, 'PermissionArgsFromAdvertisementRecursive2']


class UserPermissionIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']
    permission: Union[bool, 'PermissionArgsFromAdvertisementRecursive3']


class UserPermissionIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']
    permission: Union[bool, 'PermissionArgsFromAdvertisementRecursive4']


class UserPermissionIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class UserPermissionArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyUserPermissionArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    group: Union[bool, 'GroupArgsFromAdvertisementRecursive1']
    permission: Union[bool, 'PermissionArgsFromAdvertisementRecursive1']


class GroupPermissionIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    group: Union[bool, 'GroupArgsFromAdvertisementRecursive2']
    permission: Union[bool, 'PermissionArgsFromAdvertisementRecursive2']


class GroupPermissionIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    group: Union[bool, 'GroupArgsFromAdvertisementRecursive3']
    permission: Union[bool, 'PermissionArgsFromAdvertisementRecursive3']


class GroupPermissionIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    group: Union[bool, 'GroupArgsFromAdvertisementRecursive4']
    permission: Union[bool, 'PermissionArgsFromAdvertisementRecursive4']


class GroupPermissionIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class GroupPermissionArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyGroupPermissionArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']


class TokenIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']


class TokenIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']


class TokenIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']


class TokenIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class TokenArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyTokenArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']


class SessionIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']


class SessionIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']


class SessionIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']


class SessionIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class SessionArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManySessionArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive1']
    parent: Union[bool, 'GenreArgsFromAdvertisementRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromAdvertisementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive1']


class GenreIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive2']
    parent: Union[bool, 'GenreArgsFromAdvertisementRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromAdvertisementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive2']


class GenreIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive3']
    parent: Union[bool, 'GenreArgsFromAdvertisementRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromAdvertisementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive3']


class GenreIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive4']
    parent: Union[bool, 'GenreArgsFromAdvertisementRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromAdvertisementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive4']


class GenreIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class GenreArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyGenreArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive1']


class AgeCategoryIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive2']


class AgeCategoryIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive3']


class AgeCategoryIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive4']


class AgeCategoryIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class AgeCategoryArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyAgeCategoryArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive1']


class AuthorIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive2']


class AuthorIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive3']


class AuthorIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive4']


class AuthorIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class AuthorArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyAuthorArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    author: Union[bool, 'AuthorArgsFromAdvertisementRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive1']
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive1']


class BookIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    author: Union[bool, 'AuthorArgsFromAdvertisementRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive2']
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive2']


class BookIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    author: Union[bool, 'AuthorArgsFromAdvertisementRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive3']
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive3']


class BookIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    author: Union[bool, 'AuthorArgsFromAdvertisementRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive4']
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive4']


class BookIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class BookArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyBookArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive1']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']


class UserBookIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive2']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']


class UserBookIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive3']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']


class UserBookIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive4']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']


class UserBookIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class UserBookArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyUserBookArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive1']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']


class VoteIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive2']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']


class VoteIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive3']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']


class VoteIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive4']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']


class VoteIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class VoteArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyVoteArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive1']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']


class ReadingProgressIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive2']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']


class ReadingProgressIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive3']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']


class ReadingProgressIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    book: Union[bool, 'BookArgsFromAdvertisementRecursive4']
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']


class ReadingProgressIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class ReadingProgressArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyReadingProgressArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive1']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive1']
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive1']
    leader: Union[bool, 'UserArgsFromAdvertisementRecursive1']


class WeeklyResultIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive2']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive2']
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive2']
    leader: Union[bool, 'UserArgsFromAdvertisementRecursive2']


class WeeklyResultIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive3']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive3']
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive3']
    leader: Union[bool, 'UserArgsFromAdvertisementRecursive3']


class WeeklyResultIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive4']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive4']
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive4']
    leader: Union[bool, 'UserArgsFromAdvertisementRecursive4']


class WeeklyResultIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class WeeklyResultArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyWeeklyResultArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']


class NotificationIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']


class NotificationIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']


class NotificationIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']


class NotificationIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class NotificationArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyNotificationArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    partner: Union[bool, 'PartnerArgsFromAdvertisementRecursive1']


class AdvertisementIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    partner: Union[bool, 'PartnerArgsFromAdvertisementRecursive2']


class AdvertisementIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    partner: Union[bool, 'PartnerArgsFromAdvertisementRecursive3']


class AdvertisementIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    partner: Union[bool, 'PartnerArgsFromAdvertisementRecursive4']


class AdvertisementIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class AdvertisementArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyAdvertisementArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAdvertisementRecursive1']


class PartnerIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAdvertisementRecursive2']


class PartnerIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAdvertisementRecursive3']


class PartnerIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAdvertisementRecursive4']


class PartnerIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class PartnerArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyPartnerArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAdvertisementRecursive1']


class AchievementIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAdvertisementRecursive2']


class AchievementIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAdvertisementRecursive3']


class AchievementIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAdvertisementRecursive4']


class AchievementIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class AchievementArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyAchievementArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']
    achievement: Union[bool, 'AchievementArgsFromAdvertisementRecursive1']


class UserAchievementIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']
    achievement: Union[bool, 'AchievementArgsFromAdvertisementRecursive2']


class UserAchievementIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']
    achievement: Union[bool, 'AchievementArgsFromAdvertisementRecursive3']


class UserAchievementIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']
    achievement: Union[bool, 'AchievementArgsFromAdvertisementRecursive4']


class UserAchievementIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class UserAchievementArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyUserAchievementArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyAdvertisementArgs = FindManyAdvertisementArgsFromAdvertisement
FindFirstAdvertisementArgs = FindManyAdvertisementArgsFromAdvertisement


    

class AdvertisementWhereInput(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    partnerId: Union[_int, 'types.IntFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    partner: 'PartnerRelationFilter'

    # should be noted that AND and NOT should be Union['AdvertisementWhereInputRecursive1', List['AdvertisementWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AdvertisementWhereInputRecursive1']
    OR: List['AdvertisementWhereInputRecursive1']
    NOT: List['AdvertisementWhereInputRecursive1']


class AdvertisementWhereInputRecursive1(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    partnerId: Union[_int, 'types.IntFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    partner: 'PartnerRelationFilter'

    # should be noted that AND and NOT should be Union['AdvertisementWhereInputRecursive2', List['AdvertisementWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AdvertisementWhereInputRecursive2']
    OR: List['AdvertisementWhereInputRecursive2']
    NOT: List['AdvertisementWhereInputRecursive2']


class AdvertisementWhereInputRecursive2(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    partnerId: Union[_int, 'types.IntFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    partner: 'PartnerRelationFilter'

    # should be noted that AND and NOT should be Union['AdvertisementWhereInputRecursive3', List['AdvertisementWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AdvertisementWhereInputRecursive3']
    OR: List['AdvertisementWhereInputRecursive3']
    NOT: List['AdvertisementWhereInputRecursive3']


class AdvertisementWhereInputRecursive3(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    partnerId: Union[_int, 'types.IntFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    partner: 'PartnerRelationFilter'

    # should be noted that AND and NOT should be Union['AdvertisementWhereInputRecursive4', List['AdvertisementWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AdvertisementWhereInputRecursive4']
    OR: List['AdvertisementWhereInputRecursive4']
    NOT: List['AdvertisementWhereInputRecursive4']


class AdvertisementWhereInputRecursive4(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    partnerId: Union[_int, 'types.IntFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    partner: 'PartnerRelationFilter'



# aggregate Advertisement types


    

class AdvertisementScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    partnerId: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['AdvertisementScalarWhereWithAggregatesInputRecursive1']
    OR: List['AdvertisementScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AdvertisementScalarWhereWithAggregatesInputRecursive1']


class AdvertisementScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    partnerId: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['AdvertisementScalarWhereWithAggregatesInputRecursive2']
    OR: List['AdvertisementScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AdvertisementScalarWhereWithAggregatesInputRecursive2']


class AdvertisementScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    partnerId: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['AdvertisementScalarWhereWithAggregatesInputRecursive3']
    OR: List['AdvertisementScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AdvertisementScalarWhereWithAggregatesInputRecursive3']


class AdvertisementScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    partnerId: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['AdvertisementScalarWhereWithAggregatesInputRecursive4']
    OR: List['AdvertisementScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AdvertisementScalarWhereWithAggregatesInputRecursive4']


class AdvertisementScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    partnerId: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']



class AdvertisementGroupByOutput(TypedDict, total=False):
    id: _int
    content: _str
    partnerId: _int
    isActive: _bool
    _sum: 'AdvertisementSumAggregateOutput'
    _avg: 'AdvertisementAvgAggregateOutput'
    _min: 'AdvertisementMinAggregateOutput'
    _max: 'AdvertisementMaxAggregateOutput'
    _count: 'AdvertisementCountAggregateOutput'


class AdvertisementAvgAggregateOutput(TypedDict, total=False):
    """Advertisement output for aggregating averages"""
    id: float
    partnerId: float


class AdvertisementSumAggregateOutput(TypedDict, total=False):
    """Advertisement output for aggregating sums"""
    id: _int
    partnerId: _int


class AdvertisementScalarAggregateOutput(TypedDict, total=False):
    """Advertisement output including scalar fields"""
    id: _int
    content: _str
    partnerId: _int
    isActive: _bool


AdvertisementMinAggregateOutput = AdvertisementScalarAggregateOutput
AdvertisementMaxAggregateOutput = AdvertisementScalarAggregateOutput


class AdvertisementMaxAggregateInput(TypedDict, total=False):
    """Advertisement input for aggregating by max"""
    id: bool
    content: bool
    partnerId: bool
    isActive: bool


class AdvertisementMinAggregateInput(TypedDict, total=False):
    """Advertisement input for aggregating by min"""
    id: bool
    content: bool
    partnerId: bool
    isActive: bool


class AdvertisementNumberAggregateInput(TypedDict, total=False):
    """Advertisement input for aggregating numbers"""
    id: bool
    partnerId: bool


AdvertisementAvgAggregateInput = AdvertisementNumberAggregateInput
AdvertisementSumAggregateInput = AdvertisementNumberAggregateInput


AdvertisementCountAggregateInput = TypedDict(
    'AdvertisementCountAggregateInput',
    {
        'id': bool,
        'content': bool,
        'partnerId': bool,
        'isActive': bool,
        '_all': bool,
    },
    total=False,
)

AdvertisementCountAggregateOutput = TypedDict(
    'AdvertisementCountAggregateOutput',
    {
        'id': int,
        'content': int,
        'partnerId': int,
        'isActive': int,
        '_all': int,
    },
    total=False,
)


AdvertisementKeys = Literal[
    'id',
    'content',
    'partnerId',
    'isActive',
    'partner',
]
AdvertisementScalarFieldKeys = Literal[
    'id',
    'content',
    'partnerId',
    'isActive',
]
AdvertisementScalarFieldKeysT = TypeVar('AdvertisementScalarFieldKeysT', bound=AdvertisementScalarFieldKeys)

AdvertisementRelationalFieldKeys = Literal[
        'partner',
    ]

# Partner types

class PartnerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Partner create method"""
    id: _int
    advertisements: 'AdvertisementCreateManyNestedWithoutRelationsInput'


class PartnerCreateInput(PartnerOptionalCreateInput):
    """Required arguments to the Partner create method"""
    name: _str
    contactInfo: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PartnerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Partner create method, without relations"""
    id: _int


class PartnerCreateWithoutRelationsInput(PartnerOptionalCreateWithoutRelationsInput):
    """Required arguments to the Partner create method, without relations"""
    name: _str
    contactInfo: _str

class PartnerConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PartnerCreateWithoutRelationsInput'
    where: 'PartnerWhereUniqueInput'

class PartnerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PartnerCreateWithoutRelationsInput'
    connect: 'PartnerWhereUniqueInput'
    connect_or_create: 'PartnerConnectOrCreateWithoutRelationsInput'


class PartnerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PartnerCreateWithoutRelationsInput', List['PartnerCreateWithoutRelationsInput']]
    connect: Union['PartnerWhereUniqueInput', List['PartnerWhereUniqueInput']]
    connect_or_create: Union['PartnerConnectOrCreateWithoutRelationsInput', List['PartnerConnectOrCreateWithoutRelationsInput']]

_PartnerWhereUnique_id_Input = TypedDict(
    '_PartnerWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

PartnerWhereUniqueInput = _PartnerWhereUnique_id_Input


class PartnerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    contactInfo: _str
    advertisements: 'AdvertisementUpdateManyWithoutRelationsInput'


class PartnerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    contactInfo: _str


class PartnerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PartnerCreateWithoutRelationsInput']
    connect: List['PartnerWhereUniqueInput']
    connect_or_create: List['PartnerConnectOrCreateWithoutRelationsInput']
    set: List['PartnerWhereUniqueInput']
    disconnect: List['PartnerWhereUniqueInput']
    delete: List['PartnerWhereUniqueInput']

    # TODO
    # update: List['PartnerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PartnerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PartnerScalarWhereInput']
    # upsert: List['PartnerUpserteWithWhereUniqueWithoutRelationsInput']


class PartnerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PartnerCreateWithoutRelationsInput'
    connect: 'PartnerWhereUniqueInput'
    connect_or_create: 'PartnerConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PartnerUpdateInput'
    # upsert: 'PartnerUpsertWithoutRelationsInput'


class PartnerUpsertInput(TypedDict):
    create: 'PartnerCreateInput'
    update: 'PartnerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Partner_id_OrderByInput = TypedDict(
    '_Partner_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Partner_name_OrderByInput = TypedDict(
    '_Partner_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Partner_contactInfo_OrderByInput = TypedDict(
    '_Partner_contactInfo_OrderByInput',
    {
        'contactInfo': 'SortOrder',
    },
    total=True
)

_Partner_RelevanceInner = TypedDict(
    '_Partner_RelevanceInner',
    {
        'fields': 'List[PartnerScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Partner_RelevanceOrderByInput = TypedDict(
    '_Partner_RelevanceOrderByInput',
    {
        '_relevance': '_Partner_RelevanceInner',
    },
    total=True
)

PartnerOrderByInput = Union[
    '_Partner_id_OrderByInput',
    '_Partner_name_OrderByInput',
    '_Partner_contactInfo_OrderByInput',
    '_Partner_RelevanceOrderByInput',
]



# recursive Partner types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PartnerRelationFilter = TypedDict(
    'PartnerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PartnerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PartnerInclude(TypedDict, total=False):
    """Partner relational arguments"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPartner']


    

class UserIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    groups: Union[bool, 'FindManyUserGroupArgsFromPartnerRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPartnerRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromPartnerRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromPartnerRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromPartnerRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromPartnerRecursive1']


class UserIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    groups: Union[bool, 'FindManyUserGroupArgsFromPartnerRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPartnerRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromPartnerRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromPartnerRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromPartnerRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromPartnerRecursive2']


class UserIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    groups: Union[bool, 'FindManyUserGroupArgsFromPartnerRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPartnerRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromPartnerRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromPartnerRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromPartnerRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromPartnerRecursive3']


class UserIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    groups: Union[bool, 'FindManyUserGroupArgsFromPartnerRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromPartnerRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromPartnerRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromPartnerRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromPartnerRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromPartnerRecursive4']


class UserIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class UserArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyUserArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserGroupArgsFromPartnerRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromPartnerRecursive1']


class GroupIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserGroupArgsFromPartnerRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromPartnerRecursive2']


class GroupIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserGroupArgsFromPartnerRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromPartnerRecursive3']


class GroupIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserGroupArgsFromPartnerRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromPartnerRecursive4']


class GroupIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class GroupArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyGroupArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserPermissionArgsFromPartnerRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromPartnerRecursive1']


class PermissionIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserPermissionArgsFromPartnerRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromPartnerRecursive2']


class PermissionIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserPermissionArgsFromPartnerRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromPartnerRecursive3']


class PermissionIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserPermissionArgsFromPartnerRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromPartnerRecursive4']


class PermissionIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class PermissionArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyPermissionArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive1']
    group: Union[bool, 'GroupArgsFromPartnerRecursive1']


class UserGroupIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive2']
    group: Union[bool, 'GroupArgsFromPartnerRecursive2']


class UserGroupIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive3']
    group: Union[bool, 'GroupArgsFromPartnerRecursive3']


class UserGroupIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive4']
    group: Union[bool, 'GroupArgsFromPartnerRecursive4']


class UserGroupIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class UserGroupArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyUserGroupArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive1']
    permission: Union[bool, 'PermissionArgsFromPartnerRecursive1']


class UserPermissionIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive2']
    permission: Union[bool, 'PermissionArgsFromPartnerRecursive2']


class UserPermissionIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive3']
    permission: Union[bool, 'PermissionArgsFromPartnerRecursive3']


class UserPermissionIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive4']
    permission: Union[bool, 'PermissionArgsFromPartnerRecursive4']


class UserPermissionIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class UserPermissionArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyUserPermissionArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    group: Union[bool, 'GroupArgsFromPartnerRecursive1']
    permission: Union[bool, 'PermissionArgsFromPartnerRecursive1']


class GroupPermissionIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    group: Union[bool, 'GroupArgsFromPartnerRecursive2']
    permission: Union[bool, 'PermissionArgsFromPartnerRecursive2']


class GroupPermissionIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    group: Union[bool, 'GroupArgsFromPartnerRecursive3']
    permission: Union[bool, 'PermissionArgsFromPartnerRecursive3']


class GroupPermissionIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    group: Union[bool, 'GroupArgsFromPartnerRecursive4']
    permission: Union[bool, 'PermissionArgsFromPartnerRecursive4']


class GroupPermissionIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class GroupPermissionArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyGroupPermissionArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive1']


class TokenIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive2']


class TokenIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive3']


class TokenIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive4']


class TokenIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class TokenArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyTokenArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive1']


class SessionIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive2']


class SessionIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive3']


class SessionIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive4']


class SessionIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class SessionArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManySessionArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive1']
    parent: Union[bool, 'GenreArgsFromPartnerRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromPartnerRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive1']


class GenreIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive2']
    parent: Union[bool, 'GenreArgsFromPartnerRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromPartnerRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive2']


class GenreIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive3']
    parent: Union[bool, 'GenreArgsFromPartnerRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromPartnerRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive3']


class GenreIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive4']
    parent: Union[bool, 'GenreArgsFromPartnerRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromPartnerRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive4']


class GenreIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class GenreArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyGenreArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive1']


class AgeCategoryIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive2']


class AgeCategoryIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive3']


class AgeCategoryIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive4']


class AgeCategoryIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class AgeCategoryArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyAgeCategoryArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive1']


class AuthorIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive2']


class AuthorIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive3']


class AuthorIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive4']


class AuthorIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class AuthorArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyAuthorArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    author: Union[bool, 'AuthorArgsFromPartnerRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive1']
    genre: Union[bool, 'GenreArgsFromPartnerRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive1']


class BookIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    author: Union[bool, 'AuthorArgsFromPartnerRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive2']
    genre: Union[bool, 'GenreArgsFromPartnerRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive2']


class BookIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    author: Union[bool, 'AuthorArgsFromPartnerRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive3']
    genre: Union[bool, 'GenreArgsFromPartnerRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive3']


class BookIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    author: Union[bool, 'AuthorArgsFromPartnerRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive4']
    genre: Union[bool, 'GenreArgsFromPartnerRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive4']


class BookIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class BookArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyBookArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive1']
    user: Union[bool, 'UserArgsFromPartnerRecursive1']


class UserBookIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive2']
    user: Union[bool, 'UserArgsFromPartnerRecursive2']


class UserBookIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive3']
    user: Union[bool, 'UserArgsFromPartnerRecursive3']


class UserBookIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive4']
    user: Union[bool, 'UserArgsFromPartnerRecursive4']


class UserBookIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class UserBookArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyUserBookArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive1']
    user: Union[bool, 'UserArgsFromPartnerRecursive1']


class VoteIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive2']
    user: Union[bool, 'UserArgsFromPartnerRecursive2']


class VoteIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive3']
    user: Union[bool, 'UserArgsFromPartnerRecursive3']


class VoteIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive4']
    user: Union[bool, 'UserArgsFromPartnerRecursive4']


class VoteIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class VoteArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyVoteArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive1']
    user: Union[bool, 'UserArgsFromPartnerRecursive1']


class ReadingProgressIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive2']
    user: Union[bool, 'UserArgsFromPartnerRecursive2']


class ReadingProgressIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive3']
    user: Union[bool, 'UserArgsFromPartnerRecursive3']


class ReadingProgressIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    book: Union[bool, 'BookArgsFromPartnerRecursive4']
    user: Union[bool, 'UserArgsFromPartnerRecursive4']


class ReadingProgressIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class ReadingProgressArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyReadingProgressArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive1']
    book: Union[bool, 'BookArgsFromPartnerRecursive1']
    genre: Union[bool, 'GenreArgsFromPartnerRecursive1']
    leader: Union[bool, 'UserArgsFromPartnerRecursive1']


class WeeklyResultIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive2']
    book: Union[bool, 'BookArgsFromPartnerRecursive2']
    genre: Union[bool, 'GenreArgsFromPartnerRecursive2']
    leader: Union[bool, 'UserArgsFromPartnerRecursive2']


class WeeklyResultIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive3']
    book: Union[bool, 'BookArgsFromPartnerRecursive3']
    genre: Union[bool, 'GenreArgsFromPartnerRecursive3']
    leader: Union[bool, 'UserArgsFromPartnerRecursive3']


class WeeklyResultIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive4']
    book: Union[bool, 'BookArgsFromPartnerRecursive4']
    genre: Union[bool, 'GenreArgsFromPartnerRecursive4']
    leader: Union[bool, 'UserArgsFromPartnerRecursive4']


class WeeklyResultIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class WeeklyResultArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyWeeklyResultArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive1']


class NotificationIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive2']


class NotificationIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive3']


class NotificationIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive4']


class NotificationIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class NotificationArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyNotificationArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    partner: Union[bool, 'PartnerArgsFromPartnerRecursive1']


class AdvertisementIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    partner: Union[bool, 'PartnerArgsFromPartnerRecursive2']


class AdvertisementIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    partner: Union[bool, 'PartnerArgsFromPartnerRecursive3']


class AdvertisementIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    partner: Union[bool, 'PartnerArgsFromPartnerRecursive4']


class AdvertisementIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class AdvertisementArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyAdvertisementArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPartnerRecursive1']


class PartnerIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPartnerRecursive2']


class PartnerIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPartnerRecursive3']


class PartnerIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPartnerRecursive4']


class PartnerIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class PartnerArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyPartnerArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserAchievementArgsFromPartnerRecursive1']


class AchievementIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserAchievementArgsFromPartnerRecursive2']


class AchievementIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserAchievementArgsFromPartnerRecursive3']


class AchievementIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    users: Union[bool, 'FindManyUserAchievementArgsFromPartnerRecursive4']


class AchievementIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class AchievementArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyAchievementArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive1']
    achievement: Union[bool, 'AchievementArgsFromPartnerRecursive1']


class UserAchievementIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive2']
    achievement: Union[bool, 'AchievementArgsFromPartnerRecursive2']


class UserAchievementIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive3']
    achievement: Union[bool, 'AchievementArgsFromPartnerRecursive3']


class UserAchievementIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive4']
    achievement: Union[bool, 'AchievementArgsFromPartnerRecursive4']


class UserAchievementIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class UserAchievementArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyUserAchievementArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyPartnerArgs = FindManyPartnerArgsFromPartner
FindFirstPartnerArgs = FindManyPartnerArgsFromPartner


    

class PartnerWhereInput(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    contactInfo: Union[_str, 'types.StringFilter']
    advertisements: 'AdvertisementListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerWhereInputRecursive1', List['PartnerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PartnerWhereInputRecursive1']
    OR: List['PartnerWhereInputRecursive1']
    NOT: List['PartnerWhereInputRecursive1']


class PartnerWhereInputRecursive1(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    contactInfo: Union[_str, 'types.StringFilter']
    advertisements: 'AdvertisementListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerWhereInputRecursive2', List['PartnerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PartnerWhereInputRecursive2']
    OR: List['PartnerWhereInputRecursive2']
    NOT: List['PartnerWhereInputRecursive2']


class PartnerWhereInputRecursive2(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    contactInfo: Union[_str, 'types.StringFilter']
    advertisements: 'AdvertisementListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerWhereInputRecursive3', List['PartnerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PartnerWhereInputRecursive3']
    OR: List['PartnerWhereInputRecursive3']
    NOT: List['PartnerWhereInputRecursive3']


class PartnerWhereInputRecursive3(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    contactInfo: Union[_str, 'types.StringFilter']
    advertisements: 'AdvertisementListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerWhereInputRecursive4', List['PartnerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PartnerWhereInputRecursive4']
    OR: List['PartnerWhereInputRecursive4']
    NOT: List['PartnerWhereInputRecursive4']


class PartnerWhereInputRecursive4(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    contactInfo: Union[_str, 'types.StringFilter']
    advertisements: 'AdvertisementListRelationFilter'



# aggregate Partner types


    

class PartnerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    contactInfo: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PartnerScalarWhereWithAggregatesInputRecursive1']
    OR: List['PartnerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PartnerScalarWhereWithAggregatesInputRecursive1']


class PartnerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    contactInfo: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PartnerScalarWhereWithAggregatesInputRecursive2']
    OR: List['PartnerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PartnerScalarWhereWithAggregatesInputRecursive2']


class PartnerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    contactInfo: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PartnerScalarWhereWithAggregatesInputRecursive3']
    OR: List['PartnerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PartnerScalarWhereWithAggregatesInputRecursive3']


class PartnerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    contactInfo: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PartnerScalarWhereWithAggregatesInputRecursive4']
    OR: List['PartnerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PartnerScalarWhereWithAggregatesInputRecursive4']


class PartnerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    contactInfo: Union[_str, 'types.StringWithAggregatesFilter']



class PartnerGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    contactInfo: _str
    _sum: 'PartnerSumAggregateOutput'
    _avg: 'PartnerAvgAggregateOutput'
    _min: 'PartnerMinAggregateOutput'
    _max: 'PartnerMaxAggregateOutput'
    _count: 'PartnerCountAggregateOutput'


class PartnerAvgAggregateOutput(TypedDict, total=False):
    """Partner output for aggregating averages"""
    id: float


class PartnerSumAggregateOutput(TypedDict, total=False):
    """Partner output for aggregating sums"""
    id: _int


class PartnerScalarAggregateOutput(TypedDict, total=False):
    """Partner output including scalar fields"""
    id: _int
    name: _str
    contactInfo: _str


PartnerMinAggregateOutput = PartnerScalarAggregateOutput
PartnerMaxAggregateOutput = PartnerScalarAggregateOutput


class PartnerMaxAggregateInput(TypedDict, total=False):
    """Partner input for aggregating by max"""
    id: bool
    name: bool
    contactInfo: bool


class PartnerMinAggregateInput(TypedDict, total=False):
    """Partner input for aggregating by min"""
    id: bool
    name: bool
    contactInfo: bool


class PartnerNumberAggregateInput(TypedDict, total=False):
    """Partner input for aggregating numbers"""
    id: bool


PartnerAvgAggregateInput = PartnerNumberAggregateInput
PartnerSumAggregateInput = PartnerNumberAggregateInput


PartnerCountAggregateInput = TypedDict(
    'PartnerCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'contactInfo': bool,
        '_all': bool,
    },
    total=False,
)

PartnerCountAggregateOutput = TypedDict(
    'PartnerCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'contactInfo': int,
        '_all': int,
    },
    total=False,
)


PartnerKeys = Literal[
    'id',
    'name',
    'contactInfo',
    'advertisements',
]
PartnerScalarFieldKeys = Literal[
    'id',
    'name',
    'contactInfo',
]
PartnerScalarFieldKeysT = TypeVar('PartnerScalarFieldKeysT', bound=PartnerScalarFieldKeys)

PartnerRelationalFieldKeys = Literal[
        'advertisements',
    ]

# Achievement types

class AchievementOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Achievement create method"""
    id: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    users: 'UserAchievementCreateManyNestedWithoutRelationsInput'


class AchievementCreateInput(AchievementOptionalCreateInput):
    """Required arguments to the Achievement create method"""
    name: _str
    description: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AchievementOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Achievement create method, without relations"""
    id: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AchievementCreateWithoutRelationsInput(AchievementOptionalCreateWithoutRelationsInput):
    """Required arguments to the Achievement create method, without relations"""
    name: _str
    description: _str

class AchievementConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AchievementCreateWithoutRelationsInput'
    where: 'AchievementWhereUniqueInput'

class AchievementCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AchievementCreateWithoutRelationsInput'
    connect: 'AchievementWhereUniqueInput'
    connect_or_create: 'AchievementConnectOrCreateWithoutRelationsInput'


class AchievementCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AchievementCreateWithoutRelationsInput', List['AchievementCreateWithoutRelationsInput']]
    connect: Union['AchievementWhereUniqueInput', List['AchievementWhereUniqueInput']]
    connect_or_create: Union['AchievementConnectOrCreateWithoutRelationsInput', List['AchievementConnectOrCreateWithoutRelationsInput']]

_AchievementWhereUnique_id_Input = TypedDict(
    '_AchievementWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_AchievementWhereUnique_name_Input = TypedDict(
    '_AchievementWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

AchievementWhereUniqueInput = Union[
    '_AchievementWhereUnique_id_Input',
    '_AchievementWhereUnique_name_Input',
]


class AchievementUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    users: 'UserAchievementUpdateManyWithoutRelationsInput'


class AchievementUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class AchievementUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AchievementCreateWithoutRelationsInput']
    connect: List['AchievementWhereUniqueInput']
    connect_or_create: List['AchievementConnectOrCreateWithoutRelationsInput']
    set: List['AchievementWhereUniqueInput']
    disconnect: List['AchievementWhereUniqueInput']
    delete: List['AchievementWhereUniqueInput']

    # TODO
    # update: List['AchievementUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AchievementUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AchievementScalarWhereInput']
    # upsert: List['AchievementUpserteWithWhereUniqueWithoutRelationsInput']


class AchievementUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AchievementCreateWithoutRelationsInput'
    connect: 'AchievementWhereUniqueInput'
    connect_or_create: 'AchievementConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AchievementUpdateInput'
    # upsert: 'AchievementUpsertWithoutRelationsInput'


class AchievementUpsertInput(TypedDict):
    create: 'AchievementCreateInput'
    update: 'AchievementUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Achievement_id_OrderByInput = TypedDict(
    '_Achievement_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Achievement_name_OrderByInput = TypedDict(
    '_Achievement_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Achievement_description_OrderByInput = TypedDict(
    '_Achievement_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Achievement_createdAt_OrderByInput = TypedDict(
    '_Achievement_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Achievement_updatedAt_OrderByInput = TypedDict(
    '_Achievement_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Achievement_RelevanceInner = TypedDict(
    '_Achievement_RelevanceInner',
    {
        'fields': 'List[AchievementScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Achievement_RelevanceOrderByInput = TypedDict(
    '_Achievement_RelevanceOrderByInput',
    {
        '_relevance': '_Achievement_RelevanceInner',
    },
    total=True
)

AchievementOrderByInput = Union[
    '_Achievement_id_OrderByInput',
    '_Achievement_name_OrderByInput',
    '_Achievement_description_OrderByInput',
    '_Achievement_createdAt_OrderByInput',
    '_Achievement_updatedAt_OrderByInput',
    '_Achievement_RelevanceOrderByInput',
]



# recursive Achievement types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AchievementRelationFilter = TypedDict(
    'AchievementRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AchievementListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AchievementInclude(TypedDict, total=False):
    """Achievement relational arguments"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAchievement']


    

class UserIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAchievementRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAchievementRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromAchievementRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAchievementRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromAchievementRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAchievementRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAchievementRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromAchievementRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive1']


class UserIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAchievementRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAchievementRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromAchievementRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAchievementRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromAchievementRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAchievementRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAchievementRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromAchievementRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive2']


class UserIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAchievementRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAchievementRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromAchievementRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAchievementRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromAchievementRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAchievementRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAchievementRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromAchievementRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive3']


class UserIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromAchievementRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromAchievementRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromAchievementRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAchievementRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromAchievementRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAchievementRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAchievementRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromAchievementRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive4']


class UserIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class UserArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyUserArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserGroupArgsFromAchievementRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAchievementRecursive1']


class GroupIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserGroupArgsFromAchievementRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAchievementRecursive2']


class GroupIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserGroupArgsFromAchievementRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAchievementRecursive3']


class GroupIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserGroupArgsFromAchievementRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromAchievementRecursive4']


class GroupIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class GroupArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyGroupArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAchievementRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAchievementRecursive1']


class PermissionIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAchievementRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAchievementRecursive2']


class PermissionIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAchievementRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAchievementRecursive3']


class PermissionIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromAchievementRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromAchievementRecursive4']


class PermissionIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class PermissionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyPermissionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive1']
    group: Union[bool, 'GroupArgsFromAchievementRecursive1']


class UserGroupIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive2']
    group: Union[bool, 'GroupArgsFromAchievementRecursive2']


class UserGroupIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive3']
    group: Union[bool, 'GroupArgsFromAchievementRecursive3']


class UserGroupIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive4']
    group: Union[bool, 'GroupArgsFromAchievementRecursive4']


class UserGroupIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class UserGroupArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyUserGroupArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive1']
    permission: Union[bool, 'PermissionArgsFromAchievementRecursive1']


class UserPermissionIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive2']
    permission: Union[bool, 'PermissionArgsFromAchievementRecursive2']


class UserPermissionIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive3']
    permission: Union[bool, 'PermissionArgsFromAchievementRecursive3']


class UserPermissionIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive4']
    permission: Union[bool, 'PermissionArgsFromAchievementRecursive4']


class UserPermissionIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class UserPermissionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyUserPermissionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    group: Union[bool, 'GroupArgsFromAchievementRecursive1']
    permission: Union[bool, 'PermissionArgsFromAchievementRecursive1']


class GroupPermissionIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    group: Union[bool, 'GroupArgsFromAchievementRecursive2']
    permission: Union[bool, 'PermissionArgsFromAchievementRecursive2']


class GroupPermissionIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    group: Union[bool, 'GroupArgsFromAchievementRecursive3']
    permission: Union[bool, 'PermissionArgsFromAchievementRecursive3']


class GroupPermissionIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    group: Union[bool, 'GroupArgsFromAchievementRecursive4']
    permission: Union[bool, 'PermissionArgsFromAchievementRecursive4']


class GroupPermissionIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class GroupPermissionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyGroupPermissionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive1']


class TokenIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive2']


class TokenIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive3']


class TokenIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive4']


class TokenIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class TokenArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyTokenArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive1']


class SessionIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive2']


class SessionIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive3']


class SessionIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive4']


class SessionIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class SessionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManySessionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive1']
    parent: Union[bool, 'GenreArgsFromAchievementRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromAchievementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive1']


class GenreIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive2']
    parent: Union[bool, 'GenreArgsFromAchievementRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromAchievementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive2']


class GenreIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive3']
    parent: Union[bool, 'GenreArgsFromAchievementRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromAchievementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive3']


class GenreIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive4']
    parent: Union[bool, 'GenreArgsFromAchievementRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromAchievementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive4']


class GenreIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class GenreArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyGenreArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive1']


class AgeCategoryIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive2']


class AgeCategoryIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive3']


class AgeCategoryIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive4']


class AgeCategoryIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class AgeCategoryArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyAgeCategoryArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive1']


class AuthorIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive2']


class AuthorIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive3']


class AuthorIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    books: Union[bool, 'FindManyBookArgsFromAchievementRecursive4']


class AuthorIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class AuthorArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyAuthorArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    author: Union[bool, 'AuthorArgsFromAchievementRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAchievementRecursive1']
    genre: Union[bool, 'GenreArgsFromAchievementRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAchievementRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAchievementRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromAchievementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive1']


class BookIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    author: Union[bool, 'AuthorArgsFromAchievementRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAchievementRecursive2']
    genre: Union[bool, 'GenreArgsFromAchievementRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAchievementRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAchievementRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromAchievementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive2']


class BookIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    author: Union[bool, 'AuthorArgsFromAchievementRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAchievementRecursive3']
    genre: Union[bool, 'GenreArgsFromAchievementRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAchievementRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAchievementRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromAchievementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive3']


class BookIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    author: Union[bool, 'AuthorArgsFromAchievementRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAchievementRecursive4']
    genre: Union[bool, 'GenreArgsFromAchievementRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAchievementRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAchievementRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromAchievementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAchievementRecursive4']


class BookIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class BookArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyBookArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive1']
    user: Union[bool, 'UserArgsFromAchievementRecursive1']


class UserBookIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive2']
    user: Union[bool, 'UserArgsFromAchievementRecursive2']


class UserBookIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive3']
    user: Union[bool, 'UserArgsFromAchievementRecursive3']


class UserBookIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive4']
    user: Union[bool, 'UserArgsFromAchievementRecursive4']


class UserBookIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class UserBookArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyUserBookArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive1']
    user: Union[bool, 'UserArgsFromAchievementRecursive1']


class VoteIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive2']
    user: Union[bool, 'UserArgsFromAchievementRecursive2']


class VoteIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive3']
    user: Union[bool, 'UserArgsFromAchievementRecursive3']


class VoteIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive4']
    user: Union[bool, 'UserArgsFromAchievementRecursive4']


class VoteIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class VoteArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyVoteArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive1']
    user: Union[bool, 'UserArgsFromAchievementRecursive1']


class ReadingProgressIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive2']
    user: Union[bool, 'UserArgsFromAchievementRecursive2']


class ReadingProgressIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive3']
    user: Union[bool, 'UserArgsFromAchievementRecursive3']


class ReadingProgressIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    book: Union[bool, 'BookArgsFromAchievementRecursive4']
    user: Union[bool, 'UserArgsFromAchievementRecursive4']


class ReadingProgressIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class ReadingProgressArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyReadingProgressArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAchievementRecursive1']
    book: Union[bool, 'BookArgsFromAchievementRecursive1']
    genre: Union[bool, 'GenreArgsFromAchievementRecursive1']
    leader: Union[bool, 'UserArgsFromAchievementRecursive1']


class WeeklyResultIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAchievementRecursive2']
    book: Union[bool, 'BookArgsFromAchievementRecursive2']
    genre: Union[bool, 'GenreArgsFromAchievementRecursive2']
    leader: Union[bool, 'UserArgsFromAchievementRecursive2']


class WeeklyResultIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAchievementRecursive3']
    book: Union[bool, 'BookArgsFromAchievementRecursive3']
    genre: Union[bool, 'GenreArgsFromAchievementRecursive3']
    leader: Union[bool, 'UserArgsFromAchievementRecursive3']


class WeeklyResultIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromAchievementRecursive4']
    book: Union[bool, 'BookArgsFromAchievementRecursive4']
    genre: Union[bool, 'GenreArgsFromAchievementRecursive4']
    leader: Union[bool, 'UserArgsFromAchievementRecursive4']


class WeeklyResultIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class WeeklyResultArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyWeeklyResultArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive1']


class NotificationIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive2']


class NotificationIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive3']


class NotificationIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive4']


class NotificationIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class NotificationArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyNotificationArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    partner: Union[bool, 'PartnerArgsFromAchievementRecursive1']


class AdvertisementIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    partner: Union[bool, 'PartnerArgsFromAchievementRecursive2']


class AdvertisementIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    partner: Union[bool, 'PartnerArgsFromAchievementRecursive3']


class AdvertisementIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    partner: Union[bool, 'PartnerArgsFromAchievementRecursive4']


class AdvertisementIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class AdvertisementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyAdvertisementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAchievementRecursive1']


class PartnerIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAchievementRecursive2']


class PartnerIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAchievementRecursive3']


class PartnerIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAchievementRecursive4']


class PartnerIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class PartnerArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyPartnerArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive1']


class AchievementIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive2']


class AchievementIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive3']


class AchievementIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive4']


class AchievementIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class AchievementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyAchievementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive1']
    achievement: Union[bool, 'AchievementArgsFromAchievementRecursive1']


class UserAchievementIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive2']
    achievement: Union[bool, 'AchievementArgsFromAchievementRecursive2']


class UserAchievementIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive3']
    achievement: Union[bool, 'AchievementArgsFromAchievementRecursive3']


class UserAchievementIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive4']
    achievement: Union[bool, 'AchievementArgsFromAchievementRecursive4']


class UserAchievementIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class UserAchievementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyUserAchievementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyAchievementArgs = FindManyAchievementArgsFromAchievement
FindFirstAchievementArgs = FindManyAchievementArgsFromAchievement


    

class AchievementWhereInput(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive1', List['AchievementWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive1']
    OR: List['AchievementWhereInputRecursive1']
    NOT: List['AchievementWhereInputRecursive1']


class AchievementWhereInputRecursive1(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive2', List['AchievementWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive2']
    OR: List['AchievementWhereInputRecursive2']
    NOT: List['AchievementWhereInputRecursive2']


class AchievementWhereInputRecursive2(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive3', List['AchievementWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive3']
    OR: List['AchievementWhereInputRecursive3']
    NOT: List['AchievementWhereInputRecursive3']


class AchievementWhereInputRecursive3(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive4', List['AchievementWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive4']
    OR: List['AchievementWhereInputRecursive4']
    NOT: List['AchievementWhereInputRecursive4']


class AchievementWhereInputRecursive4(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    users: 'UserAchievementListRelationFilter'



# aggregate Achievement types


    

class AchievementScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive1']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive1']


class AchievementScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive2']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive2']


class AchievementScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive3']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive3']


class AchievementScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive4']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive4']


class AchievementScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Achievement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class AchievementGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'AchievementSumAggregateOutput'
    _avg: 'AchievementAvgAggregateOutput'
    _min: 'AchievementMinAggregateOutput'
    _max: 'AchievementMaxAggregateOutput'
    _count: 'AchievementCountAggregateOutput'


class AchievementAvgAggregateOutput(TypedDict, total=False):
    """Achievement output for aggregating averages"""
    id: float


class AchievementSumAggregateOutput(TypedDict, total=False):
    """Achievement output for aggregating sums"""
    id: _int


class AchievementScalarAggregateOutput(TypedDict, total=False):
    """Achievement output including scalar fields"""
    id: _int
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


AchievementMinAggregateOutput = AchievementScalarAggregateOutput
AchievementMaxAggregateOutput = AchievementScalarAggregateOutput


class AchievementMaxAggregateInput(TypedDict, total=False):
    """Achievement input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    createdAt: bool
    updatedAt: bool


class AchievementMinAggregateInput(TypedDict, total=False):
    """Achievement input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    createdAt: bool
    updatedAt: bool


class AchievementNumberAggregateInput(TypedDict, total=False):
    """Achievement input for aggregating numbers"""
    id: bool


AchievementAvgAggregateInput = AchievementNumberAggregateInput
AchievementSumAggregateInput = AchievementNumberAggregateInput


AchievementCountAggregateInput = TypedDict(
    'AchievementCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

AchievementCountAggregateOutput = TypedDict(
    'AchievementCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


AchievementKeys = Literal[
    'id',
    'name',
    'description',
    'createdAt',
    'updatedAt',
    'users',
]
AchievementScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'createdAt',
    'updatedAt',
]
AchievementScalarFieldKeysT = TypeVar('AchievementScalarFieldKeysT', bound=AchievementScalarFieldKeys)

AchievementRelationalFieldKeys = Literal[
        'users',
    ]

# UserAchievement types

class UserAchievementOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserAchievement create method"""
    id: _int
    userId: _int
    achievementId: _int
    earnedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    achievement: 'AchievementCreateNestedWithoutRelationsInput'


class UserAchievementCreateInput(UserAchievementOptionalCreateInput):
    """Required arguments to the UserAchievement create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserAchievementOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserAchievement create method, without relations"""
    id: _int
    userId: _int
    achievementId: _int
    earnedAt: datetime.datetime


class UserAchievementCreateWithoutRelationsInput(UserAchievementOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserAchievement create method, without relations"""

class UserAchievementConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserAchievementCreateWithoutRelationsInput'
    where: 'UserAchievementWhereUniqueInput'

class UserAchievementCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserAchievementCreateWithoutRelationsInput'
    connect: 'UserAchievementWhereUniqueInput'
    connect_or_create: 'UserAchievementConnectOrCreateWithoutRelationsInput'


class UserAchievementCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserAchievementCreateWithoutRelationsInput', List['UserAchievementCreateWithoutRelationsInput']]
    connect: Union['UserAchievementWhereUniqueInput', List['UserAchievementWhereUniqueInput']]
    connect_or_create: Union['UserAchievementConnectOrCreateWithoutRelationsInput', List['UserAchievementConnectOrCreateWithoutRelationsInput']]

_UserAchievementWhereUnique_id_Input = TypedDict(
    '_UserAchievementWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserAchievementCompounduserId_achievementIdKeyInner = TypedDict(
    '_UserAchievementCompounduserId_achievementIdKeyInner',
    {
        'userId': '_int',
        'achievementId': '_int',
    },
    total=True
)

_UserAchievementCompounduserId_achievementIdKey = TypedDict(
    '_UserAchievementCompounduserId_achievementIdKey',
    {
        'userId_achievementId': '_UserAchievementCompounduserId_achievementIdKeyInner',
    },
    total=True
)

UserAchievementWhereUniqueInput = Union[
    '_UserAchievementWhereUnique_id_Input',
    '_UserAchievementCompounduserId_achievementIdKey',
]


class UserAchievementUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    earnedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    achievement: 'AchievementUpdateOneWithoutRelationsInput'


class UserAchievementUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    earnedAt: datetime.datetime


class UserAchievementUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserAchievementCreateWithoutRelationsInput']
    connect: List['UserAchievementWhereUniqueInput']
    connect_or_create: List['UserAchievementConnectOrCreateWithoutRelationsInput']
    set: List['UserAchievementWhereUniqueInput']
    disconnect: List['UserAchievementWhereUniqueInput']
    delete: List['UserAchievementWhereUniqueInput']

    # TODO
    # update: List['UserAchievementUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserAchievementUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserAchievementScalarWhereInput']
    # upsert: List['UserAchievementUpserteWithWhereUniqueWithoutRelationsInput']


class UserAchievementUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserAchievementCreateWithoutRelationsInput'
    connect: 'UserAchievementWhereUniqueInput'
    connect_or_create: 'UserAchievementConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserAchievementUpdateInput'
    # upsert: 'UserAchievementUpsertWithoutRelationsInput'


class UserAchievementUpsertInput(TypedDict):
    create: 'UserAchievementCreateInput'
    update: 'UserAchievementUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserAchievement_id_OrderByInput = TypedDict(
    '_UserAchievement_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserAchievement_userId_OrderByInput = TypedDict(
    '_UserAchievement_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserAchievement_achievementId_OrderByInput = TypedDict(
    '_UserAchievement_achievementId_OrderByInput',
    {
        'achievementId': 'SortOrder',
    },
    total=True
)

_UserAchievement_earnedAt_OrderByInput = TypedDict(
    '_UserAchievement_earnedAt_OrderByInput',
    {
        'earnedAt': 'SortOrder',
    },
    total=True
)

_UserAchievement_RelevanceInner = TypedDict(
    '_UserAchievement_RelevanceInner',
    {
        'fields': 'List[UserAchievementScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserAchievement_RelevanceOrderByInput = TypedDict(
    '_UserAchievement_RelevanceOrderByInput',
    {
        '_relevance': '_UserAchievement_RelevanceInner',
    },
    total=True
)

UserAchievementOrderByInput = Union[
    '_UserAchievement_id_OrderByInput',
    '_UserAchievement_userId_OrderByInput',
    '_UserAchievement_achievementId_OrderByInput',
    '_UserAchievement_earnedAt_OrderByInput',
    '_UserAchievement_RelevanceOrderByInput',
]



# recursive UserAchievement types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserAchievementRelationFilter = TypedDict(
    'UserAchievementRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserAchievementListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserAchievementInclude(TypedDict, total=False):
    """UserAchievement relational arguments"""
    user: Union[bool, 'UserArgsFromUserAchievement']
    achievement: Union[bool, 'AchievementArgsFromUserAchievement']


    

class UserIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserAchievementRecursive1']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserAchievementRecursive1']
    tokens: Union[bool, 'FindManyTokenArgsFromUserAchievementRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserAchievementRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserAchievementRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserAchievementRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserAchievementRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserAchievementRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive1']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive1']


class UserIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserAchievementRecursive2']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserAchievementRecursive2']
    tokens: Union[bool, 'FindManyTokenArgsFromUserAchievementRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserAchievementRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserAchievementRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserAchievementRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserAchievementRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserAchievementRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive2']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive2']


class UserIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserAchievementRecursive3']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserAchievementRecursive3']
    tokens: Union[bool, 'FindManyTokenArgsFromUserAchievementRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserAchievementRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserAchievementRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserAchievementRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserAchievementRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserAchievementRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive3']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive3']


class UserIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    groups: Union[bool, 'FindManyUserGroupArgsFromUserAchievementRecursive4']
    permissions: Union[bool, 'FindManyUserPermissionArgsFromUserAchievementRecursive4']
    tokens: Union[bool, 'FindManyTokenArgsFromUserAchievementRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserAchievementRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserAchievementRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserAchievementRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserAchievementRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserAchievementRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive4']
    userAchievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive4']


class UserIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class UserArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyUserArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GroupIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserAchievementRecursive1']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserAchievementRecursive1']


class GroupIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserAchievementRecursive2']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserAchievementRecursive2']


class GroupIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserAchievementRecursive3']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserAchievementRecursive3']


class GroupIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserGroupArgsFromUserAchievementRecursive4']
    permissions: Union[bool, 'FindManyGroupPermissionArgsFromUserAchievementRecursive4']


class GroupIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class GroupArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyGroupArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class PermissionIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserAchievementRecursive1']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserAchievementRecursive1']


class PermissionIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserAchievementRecursive2']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserAchievementRecursive2']


class PermissionIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserAchievementRecursive3']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserAchievementRecursive3']


class PermissionIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserPermissionArgsFromUserAchievementRecursive4']
    groups: Union[bool, 'FindManyGroupPermissionArgsFromUserAchievementRecursive4']


class PermissionIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class PermissionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'PermissionIncludeFromPermissionRecursive1'


class PermissionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'PermissionIncludeFromPermissionRecursive2'


class PermissionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'PermissionIncludeFromPermissionRecursive3'


class PermissionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'PermissionIncludeFromPermissionRecursive4'


class PermissionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyPermissionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive1'


class FindManyPermissionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive2'


class FindManyPermissionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive3'


class FindManyPermissionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    include: 'PermissionIncludeFromPermissionRecursive4'


class FindManyPermissionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['PermissionOrderByInput', List['PermissionOrderByInput']]
    where: 'PermissionWhereInput'
    cursor: 'PermissionWhereUniqueInput'
    distinct: List['PermissionScalarFieldKeys']
    
    

class UserGroupIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']
    group: Union[bool, 'GroupArgsFromUserAchievementRecursive1']


class UserGroupIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']
    group: Union[bool, 'GroupArgsFromUserAchievementRecursive2']


class UserGroupIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']
    group: Union[bool, 'GroupArgsFromUserAchievementRecursive3']


class UserGroupIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']
    group: Union[bool, 'GroupArgsFromUserAchievementRecursive4']


class UserGroupIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class UserGroupArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class UserGroupArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class UserGroupArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class UserGroupArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class UserGroupArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyUserGroupArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive1'


class FindManyUserGroupArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive2'


class FindManyUserGroupArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive3'


class FindManyUserGroupArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    include: 'UserGroupIncludeFromUserGroupRecursive4'


class FindManyUserGroupArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserGroupOrderByInput', List['UserGroupOrderByInput']]
    where: 'UserGroupWhereInput'
    cursor: 'UserGroupWhereUniqueInput'
    distinct: List['UserGroupScalarFieldKeys']
    
    

class UserPermissionIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserAchievementRecursive1']


class UserPermissionIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserAchievementRecursive2']


class UserPermissionIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserAchievementRecursive3']


class UserPermissionIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserAchievementRecursive4']


class UserPermissionIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class UserPermissionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class UserPermissionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class UserPermissionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class UserPermissionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class UserPermissionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyUserPermissionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive1'


class FindManyUserPermissionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive2'


class FindManyUserPermissionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive3'


class FindManyUserPermissionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    include: 'UserPermissionIncludeFromUserPermissionRecursive4'


class FindManyUserPermissionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserPermissionOrderByInput', List['UserPermissionOrderByInput']]
    where: 'UserPermissionWhereInput'
    cursor: 'UserPermissionWhereUniqueInput'
    distinct: List['UserPermissionScalarFieldKeys']
    
    

class GroupPermissionIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    group: Union[bool, 'GroupArgsFromUserAchievementRecursive1']
    permission: Union[bool, 'PermissionArgsFromUserAchievementRecursive1']


class GroupPermissionIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    group: Union[bool, 'GroupArgsFromUserAchievementRecursive2']
    permission: Union[bool, 'PermissionArgsFromUserAchievementRecursive2']


class GroupPermissionIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    group: Union[bool, 'GroupArgsFromUserAchievementRecursive3']
    permission: Union[bool, 'PermissionArgsFromUserAchievementRecursive3']


class GroupPermissionIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    group: Union[bool, 'GroupArgsFromUserAchievementRecursive4']
    permission: Union[bool, 'PermissionArgsFromUserAchievementRecursive4']


class GroupPermissionIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class GroupPermissionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class GroupPermissionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class GroupPermissionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class GroupPermissionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class GroupPermissionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyGroupPermissionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive1'


class FindManyGroupPermissionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive2'


class FindManyGroupPermissionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive3'


class FindManyGroupPermissionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    include: 'GroupPermissionIncludeFromGroupPermissionRecursive4'


class FindManyGroupPermissionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GroupPermissionOrderByInput', List['GroupPermissionOrderByInput']]
    where: 'GroupPermissionWhereInput'
    cursor: 'GroupPermissionWhereUniqueInput'
    distinct: List['GroupPermissionScalarFieldKeys']
    
    

class TokenIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']


class TokenIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']


class TokenIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']


class TokenIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']


class TokenIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class TokenArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TokenIncludeFromTokenRecursive1'


class TokenArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TokenIncludeFromTokenRecursive2'


class TokenArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TokenIncludeFromTokenRecursive3'


class TokenArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TokenIncludeFromTokenRecursive4'


class TokenArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyTokenArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive1'


class FindManyTokenArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive2'


class FindManyTokenArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive3'


class FindManyTokenArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    include: 'TokenIncludeFromTokenRecursive4'


class FindManyTokenArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TokenOrderByInput', List['TokenOrderByInput']]
    where: 'TokenWhereInput'
    cursor: 'TokenWhereUniqueInput'
    distinct: List['TokenScalarFieldKeys']
    
    

class SessionIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']


class SessionIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']


class SessionIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']


class SessionIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']


class SessionIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class SessionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManySessionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class GenreIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive1']
    parent: Union[bool, 'GenreArgsFromUserAchievementRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserAchievementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive1']


class GenreIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive2']
    parent: Union[bool, 'GenreArgsFromUserAchievementRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserAchievementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive2']


class GenreIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive3']
    parent: Union[bool, 'GenreArgsFromUserAchievementRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserAchievementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive3']


class GenreIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive4']
    parent: Union[bool, 'GenreArgsFromUserAchievementRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserAchievementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive4']


class GenreIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class GenreArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyGenreArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive1']


class AgeCategoryIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive2']


class AgeCategoryIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive3']


class AgeCategoryIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive4']


class AgeCategoryIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class AgeCategoryArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyAgeCategoryArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class AuthorIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive1']


class AuthorIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive2']


class AuthorIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive3']


class AuthorIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    books: Union[bool, 'FindManyBookArgsFromUserAchievementRecursive4']


class AuthorIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class AuthorArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AuthorIncludeFromAuthorRecursive1'


class AuthorArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AuthorIncludeFromAuthorRecursive2'


class AuthorArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AuthorIncludeFromAuthorRecursive3'


class AuthorArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AuthorIncludeFromAuthorRecursive4'


class AuthorArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyAuthorArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive1'


class FindManyAuthorArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive2'


class FindManyAuthorArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive3'


class FindManyAuthorArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    include: 'AuthorIncludeFromAuthorRecursive4'


class FindManyAuthorArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AuthorOrderByInput', List['AuthorOrderByInput']]
    where: 'AuthorWhereInput'
    cursor: 'AuthorWhereUniqueInput'
    distinct: List['AuthorScalarFieldKeys']
    
    

class BookIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    author: Union[bool, 'AuthorArgsFromUserAchievementRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserAchievementRecursive1']
    genre: Union[bool, 'GenreArgsFromUserAchievementRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserAchievementRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserAchievementRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserAchievementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive1']


class BookIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    author: Union[bool, 'AuthorArgsFromUserAchievementRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserAchievementRecursive2']
    genre: Union[bool, 'GenreArgsFromUserAchievementRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserAchievementRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserAchievementRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserAchievementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive2']


class BookIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    author: Union[bool, 'AuthorArgsFromUserAchievementRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserAchievementRecursive3']
    genre: Union[bool, 'GenreArgsFromUserAchievementRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserAchievementRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserAchievementRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserAchievementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive3']


class BookIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    author: Union[bool, 'AuthorArgsFromUserAchievementRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserAchievementRecursive4']
    genre: Union[bool, 'GenreArgsFromUserAchievementRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserAchievementRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserAchievementRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserAchievementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserAchievementRecursive4']


class BookIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class BookArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyBookArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive1']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']


class UserBookIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive2']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']


class UserBookIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive3']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']


class UserBookIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive4']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']


class UserBookIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class UserBookArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyUserBookArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive1']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']


class VoteIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive2']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']


class VoteIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive3']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']


class VoteIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive4']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']


class VoteIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class VoteArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyVoteArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive1']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']


class ReadingProgressIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive2']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']


class ReadingProgressIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive3']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']


class ReadingProgressIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    book: Union[bool, 'BookArgsFromUserAchievementRecursive4']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']


class ReadingProgressIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class ReadingProgressArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyReadingProgressArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserAchievementRecursive1']
    book: Union[bool, 'BookArgsFromUserAchievementRecursive1']
    genre: Union[bool, 'GenreArgsFromUserAchievementRecursive1']
    leader: Union[bool, 'UserArgsFromUserAchievementRecursive1']


class WeeklyResultIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserAchievementRecursive2']
    book: Union[bool, 'BookArgsFromUserAchievementRecursive2']
    genre: Union[bool, 'GenreArgsFromUserAchievementRecursive2']
    leader: Union[bool, 'UserArgsFromUserAchievementRecursive2']


class WeeklyResultIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserAchievementRecursive3']
    book: Union[bool, 'BookArgsFromUserAchievementRecursive3']
    genre: Union[bool, 'GenreArgsFromUserAchievementRecursive3']
    leader: Union[bool, 'UserArgsFromUserAchievementRecursive3']


class WeeklyResultIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserAchievementRecursive4']
    book: Union[bool, 'BookArgsFromUserAchievementRecursive4']
    genre: Union[bool, 'GenreArgsFromUserAchievementRecursive4']
    leader: Union[bool, 'UserArgsFromUserAchievementRecursive4']


class WeeklyResultIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class WeeklyResultArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyWeeklyResultArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']


class NotificationIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']


class NotificationIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']


class NotificationIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']


class NotificationIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class NotificationArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyNotificationArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    partner: Union[bool, 'PartnerArgsFromUserAchievementRecursive1']


class AdvertisementIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    partner: Union[bool, 'PartnerArgsFromUserAchievementRecursive2']


class AdvertisementIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    partner: Union[bool, 'PartnerArgsFromUserAchievementRecursive3']


class AdvertisementIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    partner: Union[bool, 'PartnerArgsFromUserAchievementRecursive4']


class AdvertisementIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class AdvertisementArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyAdvertisementArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserAchievementRecursive1']


class PartnerIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserAchievementRecursive2']


class PartnerIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserAchievementRecursive3']


class PartnerIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserAchievementRecursive4']


class PartnerIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class PartnerArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyPartnerArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    
    

class AchievementIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive1']


class AchievementIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive2']


class AchievementIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive3']


class AchievementIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    users: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive4']


class AchievementIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class AchievementArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyAchievementArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']
    achievement: Union[bool, 'AchievementArgsFromUserAchievementRecursive1']


class UserAchievementIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']
    achievement: Union[bool, 'AchievementArgsFromUserAchievementRecursive2']


class UserAchievementIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']
    achievement: Union[bool, 'AchievementArgsFromUserAchievementRecursive3']


class UserAchievementIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']
    achievement: Union[bool, 'AchievementArgsFromUserAchievementRecursive4']


class UserAchievementIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class UserAchievementArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyUserAchievementArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyUserAchievementArgs = FindManyUserAchievementArgsFromUserAchievement
FindFirstUserAchievementArgs = FindManyUserAchievementArgsFromUserAchievement


    

class UserAchievementWhereInput(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    achievementId: Union[_int, 'types.IntFilter']
    earnedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    achievement: 'AchievementRelationFilter'

    # should be noted that AND and NOT should be Union['UserAchievementWhereInputRecursive1', List['UserAchievementWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserAchievementWhereInputRecursive1']
    OR: List['UserAchievementWhereInputRecursive1']
    NOT: List['UserAchievementWhereInputRecursive1']


class UserAchievementWhereInputRecursive1(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    achievementId: Union[_int, 'types.IntFilter']
    earnedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    achievement: 'AchievementRelationFilter'

    # should be noted that AND and NOT should be Union['UserAchievementWhereInputRecursive2', List['UserAchievementWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserAchievementWhereInputRecursive2']
    OR: List['UserAchievementWhereInputRecursive2']
    NOT: List['UserAchievementWhereInputRecursive2']


class UserAchievementWhereInputRecursive2(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    achievementId: Union[_int, 'types.IntFilter']
    earnedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    achievement: 'AchievementRelationFilter'

    # should be noted that AND and NOT should be Union['UserAchievementWhereInputRecursive3', List['UserAchievementWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserAchievementWhereInputRecursive3']
    OR: List['UserAchievementWhereInputRecursive3']
    NOT: List['UserAchievementWhereInputRecursive3']


class UserAchievementWhereInputRecursive3(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    achievementId: Union[_int, 'types.IntFilter']
    earnedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    achievement: 'AchievementRelationFilter'

    # should be noted that AND and NOT should be Union['UserAchievementWhereInputRecursive4', List['UserAchievementWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserAchievementWhereInputRecursive4']
    OR: List['UserAchievementWhereInputRecursive4']
    NOT: List['UserAchievementWhereInputRecursive4']


class UserAchievementWhereInputRecursive4(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    achievementId: Union[_int, 'types.IntFilter']
    earnedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    achievement: 'AchievementRelationFilter'



# aggregate UserAchievement types


    

class UserAchievementScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    achievementId: Union[_int, 'types.IntWithAggregatesFilter']
    earnedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserAchievementScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserAchievementScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserAchievementScalarWhereWithAggregatesInputRecursive1']


class UserAchievementScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    achievementId: Union[_int, 'types.IntWithAggregatesFilter']
    earnedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserAchievementScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserAchievementScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserAchievementScalarWhereWithAggregatesInputRecursive2']


class UserAchievementScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    achievementId: Union[_int, 'types.IntWithAggregatesFilter']
    earnedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserAchievementScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserAchievementScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserAchievementScalarWhereWithAggregatesInputRecursive3']


class UserAchievementScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    achievementId: Union[_int, 'types.IntWithAggregatesFilter']
    earnedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserAchievementScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserAchievementScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserAchievementScalarWhereWithAggregatesInputRecursive4']


class UserAchievementScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    achievementId: Union[_int, 'types.IntWithAggregatesFilter']
    earnedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserAchievementGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    achievementId: _int
    earnedAt: datetime.datetime
    _sum: 'UserAchievementSumAggregateOutput'
    _avg: 'UserAchievementAvgAggregateOutput'
    _min: 'UserAchievementMinAggregateOutput'
    _max: 'UserAchievementMaxAggregateOutput'
    _count: 'UserAchievementCountAggregateOutput'


class UserAchievementAvgAggregateOutput(TypedDict, total=False):
    """UserAchievement output for aggregating averages"""
    id: float
    userId: float
    achievementId: float


class UserAchievementSumAggregateOutput(TypedDict, total=False):
    """UserAchievement output for aggregating sums"""
    id: _int
    userId: _int
    achievementId: _int


class UserAchievementScalarAggregateOutput(TypedDict, total=False):
    """UserAchievement output including scalar fields"""
    id: _int
    userId: _int
    achievementId: _int
    earnedAt: datetime.datetime


UserAchievementMinAggregateOutput = UserAchievementScalarAggregateOutput
UserAchievementMaxAggregateOutput = UserAchievementScalarAggregateOutput


class UserAchievementMaxAggregateInput(TypedDict, total=False):
    """UserAchievement input for aggregating by max"""
    id: bool
    userId: bool
    achievementId: bool
    earnedAt: bool


class UserAchievementMinAggregateInput(TypedDict, total=False):
    """UserAchievement input for aggregating by min"""
    id: bool
    userId: bool
    achievementId: bool
    earnedAt: bool


class UserAchievementNumberAggregateInput(TypedDict, total=False):
    """UserAchievement input for aggregating numbers"""
    id: bool
    userId: bool
    achievementId: bool


UserAchievementAvgAggregateInput = UserAchievementNumberAggregateInput
UserAchievementSumAggregateInput = UserAchievementNumberAggregateInput


UserAchievementCountAggregateInput = TypedDict(
    'UserAchievementCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'achievementId': bool,
        'earnedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserAchievementCountAggregateOutput = TypedDict(
    'UserAchievementCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'achievementId': int,
        'earnedAt': int,
        '_all': int,
    },
    total=False,
)


UserAchievementKeys = Literal[
    'id',
    'userId',
    'achievementId',
    'earnedAt',
    'user',
    'achievement',
]
UserAchievementScalarFieldKeys = Literal[
    'id',
    'userId',
    'achievementId',
    'earnedAt',
]
UserAchievementScalarFieldKeysT = TypeVar('UserAchievementScalarFieldKeysT', bound=UserAchievementScalarFieldKeys)

UserAchievementRelationalFieldKeys = Literal[
        'user',
        'achievement',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields