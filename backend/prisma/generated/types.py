# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _BookStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.BookStatus']]


class _BookStatusListFilterHasInput(TypedDict):
    has: 'enums.BookStatus'


class _BookStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.BookStatus']


class _BookStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.BookStatus']


class _BookStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BookStatusListFilter = Union[
    _BookStatusListFilterHasInput,
    _BookStatusListFilterEqualsInput,
    _BookStatusListFilterHasSomeInput,
    _BookStatusListFilterIsEmptyInput,
    _BookStatusListFilterHasEveryInput,
]


class _BookStatusListUpdateSet(TypedDict):
    set: List['enums.BookStatus']


class _BookStatusListUpdatePush(TypedDict):
    push: List['enums.BookStatus']


BookStatusListUpdate = Union[
    List['enums.BookStatus'],
    _BookStatusListUpdateSet,
    _BookStatusListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    registrationDate: datetime.datetime
    isPremium: _bool
    premiumExpirationDate: Optional[datetime.datetime]
    hideAds: _bool
    votes: 'VoteCreateManyNestedWithoutRelationsInput'
    readingProgress: 'ReadingProgressCreateManyNestedWithoutRelationsInput'
    notifications: 'NotificationCreateManyNestedWithoutRelationsInput'
    leaderResults: 'WeeklyResultCreateManyNestedWithoutRelationsInput'
    userBooks: 'UserBookCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    username: _str
    passwordHash: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int
    registrationDate: datetime.datetime
    isPremium: _bool
    premiumExpirationDate: Optional[datetime.datetime]
    hideAds: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    username: _str
    passwordHash: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    email: _str
    username: _str
    passwordHash: _str
    registrationDate: datetime.datetime
    isPremium: _bool
    premiumExpirationDate: Optional[datetime.datetime]
    hideAds: _bool
    votes: 'VoteUpdateManyWithoutRelationsInput'
    readingProgress: 'ReadingProgressUpdateManyWithoutRelationsInput'
    notifications: 'NotificationUpdateManyWithoutRelationsInput'
    leaderResults: 'WeeklyResultUpdateManyWithoutRelationsInput'
    userBooks: 'UserBookUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    email: _str
    username: _str
    passwordHash: _str
    registrationDate: datetime.datetime
    isPremium: _bool
    premiumExpirationDate: Optional[datetime.datetime]
    hideAds: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_passwordHash_OrderByInput = TypedDict(
    '_User_passwordHash_OrderByInput',
    {
        'passwordHash': 'SortOrder',
    },
    total=True
)

_User_registrationDate_OrderByInput = TypedDict(
    '_User_registrationDate_OrderByInput',
    {
        'registrationDate': 'SortOrder',
    },
    total=True
)

_User_isPremium_OrderByInput = TypedDict(
    '_User_isPremium_OrderByInput',
    {
        'isPremium': 'SortOrder',
    },
    total=True
)

_User_premiumExpirationDate_OrderByInput = TypedDict(
    '_User_premiumExpirationDate_OrderByInput',
    {
        'premiumExpirationDate': 'SortOrder',
    },
    total=True
)

_User_hideAds_OrderByInput = TypedDict(
    '_User_hideAds_OrderByInput',
    {
        'hideAds': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_username_OrderByInput',
    '_User_passwordHash_OrderByInput',
    '_User_registrationDate_OrderByInput',
    '_User_isPremium_OrderByInput',
    '_User_premiumExpirationDate_OrderByInput',
    '_User_hideAds_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    votes: Union[bool, 'FindManyVoteArgsFromUser']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUser']
    notifications: Union[bool, 'FindManyNotificationArgsFromUser']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUser']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    parent: Union[bool, 'GenreArgsFromUserRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserRecursive1']
    books: Union[bool, 'FindManyBookArgsFromUserRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive1']


class GenreIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    parent: Union[bool, 'GenreArgsFromUserRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserRecursive2']
    books: Union[bool, 'FindManyBookArgsFromUserRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive2']


class GenreIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    parent: Union[bool, 'GenreArgsFromUserRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserRecursive3']
    books: Union[bool, 'FindManyBookArgsFromUserRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive3']


class GenreIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    parent: Union[bool, 'GenreArgsFromUserRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserRecursive4']
    books: Union[bool, 'FindManyBookArgsFromUserRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive4']


class GenreIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class GenreArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyGenreArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive1']


class AgeCategoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive2']


class AgeCategoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive3']


class AgeCategoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    books: Union[bool, 'FindManyBookArgsFromUserRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive4']


class AgeCategoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AgeCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAgeCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    genre: Union[bool, 'GenreArgsFromUserRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive1']


class BookIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    genre: Union[bool, 'GenreArgsFromUserRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive2']


class BookIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    genre: Union[bool, 'GenreArgsFromUserRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive3']


class BookIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    genre: Union[bool, 'GenreArgsFromUserRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserRecursive4']


class BookIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class BookArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyBookArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    book: Union[bool, 'BookArgsFromUserRecursive1']


class UserBookIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    book: Union[bool, 'BookArgsFromUserRecursive2']


class UserBookIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    book: Union[bool, 'BookArgsFromUserRecursive3']


class UserBookIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    book: Union[bool, 'BookArgsFromUserRecursive4']


class UserBookIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserBookArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserBookArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    book: Union[bool, 'BookArgsFromUserRecursive1']


class VoteIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    book: Union[bool, 'BookArgsFromUserRecursive2']


class VoteIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    book: Union[bool, 'BookArgsFromUserRecursive3']


class VoteIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    book: Union[bool, 'BookArgsFromUserRecursive4']


class VoteIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class VoteArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyVoteArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    book: Union[bool, 'BookArgsFromUserRecursive1']


class ReadingProgressIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    book: Union[bool, 'BookArgsFromUserRecursive2']


class ReadingProgressIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    book: Union[bool, 'BookArgsFromUserRecursive3']


class ReadingProgressIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    book: Union[bool, 'BookArgsFromUserRecursive4']


class ReadingProgressIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ReadingProgressArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyReadingProgressArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    genre: Union[bool, 'GenreArgsFromUserRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive1']
    book: Union[bool, 'BookArgsFromUserRecursive1']
    leader: Union[bool, 'UserArgsFromUserRecursive1']


class WeeklyResultIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    genre: Union[bool, 'GenreArgsFromUserRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive2']
    book: Union[bool, 'BookArgsFromUserRecursive2']
    leader: Union[bool, 'UserArgsFromUserRecursive2']


class WeeklyResultIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    genre: Union[bool, 'GenreArgsFromUserRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive3']
    book: Union[bool, 'BookArgsFromUserRecursive3']
    leader: Union[bool, 'UserArgsFromUserRecursive3']


class WeeklyResultIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    genre: Union[bool, 'GenreArgsFromUserRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserRecursive4']
    book: Union[bool, 'BookArgsFromUserRecursive4']
    leader: Union[bool, 'UserArgsFromUserRecursive4']


class WeeklyResultIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class WeeklyResultArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyWeeklyResultArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class NotificationIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class NotificationIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class NotificationIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class NotificationIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class NotificationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyNotificationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    partner: Union[bool, 'PartnerArgsFromUserRecursive1']


class AdvertisementIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    partner: Union[bool, 'PartnerArgsFromUserRecursive2']


class AdvertisementIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    partner: Union[bool, 'PartnerArgsFromUserRecursive3']


class AdvertisementIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    partner: Union[bool, 'PartnerArgsFromUserRecursive4']


class AdvertisementIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AdvertisementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAdvertisementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserRecursive1']


class PartnerIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserRecursive2']


class PartnerIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserRecursive3']


class PartnerIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserRecursive4']


class PartnerIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PartnerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPartnerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    premiumExpirationDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hideAds: Union[_bool, 'types.BooleanFilter']
    votes: 'VoteListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    notifications: 'NotificationListRelationFilter'
    leaderResults: 'WeeklyResultListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    premiumExpirationDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hideAds: Union[_bool, 'types.BooleanFilter']
    votes: 'VoteListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    notifications: 'NotificationListRelationFilter'
    leaderResults: 'WeeklyResultListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    premiumExpirationDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hideAds: Union[_bool, 'types.BooleanFilter']
    votes: 'VoteListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    notifications: 'NotificationListRelationFilter'
    leaderResults: 'WeeklyResultListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    premiumExpirationDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hideAds: Union[_bool, 'types.BooleanFilter']
    votes: 'VoteListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    notifications: 'NotificationListRelationFilter'
    leaderResults: 'WeeklyResultListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    passwordHash: Union[_str, 'types.StringFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    premiumExpirationDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    hideAds: Union[_bool, 'types.BooleanFilter']
    votes: 'VoteListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    notifications: 'NotificationListRelationFilter'
    leaderResults: 'WeeklyResultListRelationFilter'
    userBooks: 'UserBookListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    premiumExpirationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hideAds: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    premiumExpirationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hideAds: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    premiumExpirationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hideAds: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    premiumExpirationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hideAds: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    passwordHash: Union[_str, 'types.StringWithAggregatesFilter']
    registrationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    premiumExpirationDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    hideAds: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    email: _str
    username: _str
    passwordHash: _str
    registrationDate: datetime.datetime
    isPremium: _bool
    premiumExpirationDate: datetime.datetime
    hideAds: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    email: _str
    username: _str
    passwordHash: _str
    registrationDate: datetime.datetime
    isPremium: _bool
    premiumExpirationDate: datetime.datetime
    hideAds: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    username: bool
    passwordHash: bool
    registrationDate: bool
    isPremium: bool
    premiumExpirationDate: bool
    hideAds: bool
    createdAt: bool
    updatedAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    username: bool
    passwordHash: bool
    registrationDate: bool
    isPremium: bool
    premiumExpirationDate: bool
    hideAds: bool
    createdAt: bool
    updatedAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'username': bool,
        'passwordHash': bool,
        'registrationDate': bool,
        'isPremium': bool,
        'premiumExpirationDate': bool,
        'hideAds': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'username': int,
        'passwordHash': int,
        'registrationDate': int,
        'isPremium': int,
        'premiumExpirationDate': int,
        'hideAds': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'username',
    'passwordHash',
    'registrationDate',
    'isPremium',
    'premiumExpirationDate',
    'hideAds',
    'votes',
    'readingProgress',
    'notifications',
    'leaderResults',
    'userBooks',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'username',
    'passwordHash',
    'registrationDate',
    'isPremium',
    'premiumExpirationDate',
    'hideAds',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'votes',
        'readingProgress',
        'notifications',
        'leaderResults',
        'userBooks',
    ]

# Genre types

class GenreOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Genre create method"""
    id: _str
    parentId: Optional[_str]
    parent: 'GenreCreateNestedWithoutRelationsInput'
    subgenres: 'GenreCreateManyNestedWithoutRelationsInput'
    books: 'BookCreateManyNestedWithoutRelationsInput'
    weeklyResults: 'WeeklyResultCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class GenreCreateInput(GenreOptionalCreateInput):
    """Required arguments to the Genre create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class GenreOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Genre create method, without relations"""
    id: _str
    parentId: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class GenreCreateWithoutRelationsInput(GenreOptionalCreateWithoutRelationsInput):
    """Required arguments to the Genre create method, without relations"""
    name: _str

class GenreConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'GenreCreateWithoutRelationsInput'
    where: 'GenreWhereUniqueInput'

class GenreCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'GenreCreateWithoutRelationsInput'
    connect: 'GenreWhereUniqueInput'
    connect_or_create: 'GenreConnectOrCreateWithoutRelationsInput'


class GenreCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['GenreCreateWithoutRelationsInput', List['GenreCreateWithoutRelationsInput']]
    connect: Union['GenreWhereUniqueInput', List['GenreWhereUniqueInput']]
    connect_or_create: Union['GenreConnectOrCreateWithoutRelationsInput', List['GenreConnectOrCreateWithoutRelationsInput']]

_GenreWhereUnique_id_Input = TypedDict(
    '_GenreWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

GenreWhereUniqueInput = _GenreWhereUnique_id_Input


class GenreUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    parent: 'GenreUpdateOneWithoutRelationsInput'
    subgenres: 'GenreUpdateManyWithoutRelationsInput'
    books: 'BookUpdateManyWithoutRelationsInput'
    weeklyResults: 'WeeklyResultUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class GenreUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class GenreUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['GenreCreateWithoutRelationsInput']
    connect: List['GenreWhereUniqueInput']
    connect_or_create: List['GenreConnectOrCreateWithoutRelationsInput']
    set: List['GenreWhereUniqueInput']
    disconnect: List['GenreWhereUniqueInput']
    delete: List['GenreWhereUniqueInput']

    # TODO
    # update: List['GenreUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['GenreUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['GenreScalarWhereInput']
    # upsert: List['GenreUpserteWithWhereUniqueWithoutRelationsInput']


class GenreUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'GenreCreateWithoutRelationsInput'
    connect: 'GenreWhereUniqueInput'
    connect_or_create: 'GenreConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'GenreUpdateInput'
    # upsert: 'GenreUpsertWithoutRelationsInput'


class GenreUpsertInput(TypedDict):
    create: 'GenreCreateInput'
    update: 'GenreUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Genre_id_OrderByInput = TypedDict(
    '_Genre_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Genre_name_OrderByInput = TypedDict(
    '_Genre_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Genre_parentId_OrderByInput = TypedDict(
    '_Genre_parentId_OrderByInput',
    {
        'parentId': 'SortOrder',
    },
    total=True
)

_Genre_createdAt_OrderByInput = TypedDict(
    '_Genre_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Genre_updatedAt_OrderByInput = TypedDict(
    '_Genre_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Genre_RelevanceInner = TypedDict(
    '_Genre_RelevanceInner',
    {
        'fields': 'List[GenreScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Genre_RelevanceOrderByInput = TypedDict(
    '_Genre_RelevanceOrderByInput',
    {
        '_relevance': '_Genre_RelevanceInner',
    },
    total=True
)

GenreOrderByInput = Union[
    '_Genre_id_OrderByInput',
    '_Genre_name_OrderByInput',
    '_Genre_parentId_OrderByInput',
    '_Genre_createdAt_OrderByInput',
    '_Genre_updatedAt_OrderByInput',
    '_Genre_RelevanceOrderByInput',
]



# recursive Genre types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

GenreRelationFilter = TypedDict(
    'GenreRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class GenreListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class GenreInclude(TypedDict, total=False):
    """Genre relational arguments"""
    parent: Union[bool, 'GenreArgsFromGenre']
    subgenres: Union[bool, 'FindManyGenreArgsFromGenre']
    books: Union[bool, 'FindManyBookArgsFromGenre']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenre']


    

class UserIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromGenreRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive1']


class UserIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromGenreRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive2']


class UserIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromGenreRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive3']


class UserIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromGenreRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive4']


class UserIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class UserArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyUserArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    parent: Union[bool, 'GenreArgsFromGenreRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromGenreRecursive1']
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive1']


class GenreIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    parent: Union[bool, 'GenreArgsFromGenreRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromGenreRecursive2']
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive2']


class GenreIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    parent: Union[bool, 'GenreArgsFromGenreRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromGenreRecursive3']
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive3']


class GenreIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    parent: Union[bool, 'GenreArgsFromGenreRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromGenreRecursive4']
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive4']


class GenreIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class GenreArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyGenreArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive1']


class AgeCategoryIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive2']


class AgeCategoryIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive3']


class AgeCategoryIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    books: Union[bool, 'FindManyBookArgsFromGenreRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive4']


class AgeCategoryIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class AgeCategoryArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyAgeCategoryArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    genre: Union[bool, 'GenreArgsFromGenreRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive1']


class BookIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    genre: Union[bool, 'GenreArgsFromGenreRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive2']


class BookIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    genre: Union[bool, 'GenreArgsFromGenreRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive3']


class BookIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    genre: Union[bool, 'GenreArgsFromGenreRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromGenreRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromGenreRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromGenreRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromGenreRecursive4']


class BookIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class BookArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyBookArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive1']
    book: Union[bool, 'BookArgsFromGenreRecursive1']


class UserBookIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive2']
    book: Union[bool, 'BookArgsFromGenreRecursive2']


class UserBookIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive3']
    book: Union[bool, 'BookArgsFromGenreRecursive3']


class UserBookIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive4']
    book: Union[bool, 'BookArgsFromGenreRecursive4']


class UserBookIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class UserBookArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyUserBookArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive1']
    book: Union[bool, 'BookArgsFromGenreRecursive1']


class VoteIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive2']
    book: Union[bool, 'BookArgsFromGenreRecursive2']


class VoteIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive3']
    book: Union[bool, 'BookArgsFromGenreRecursive3']


class VoteIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive4']
    book: Union[bool, 'BookArgsFromGenreRecursive4']


class VoteIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class VoteArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyVoteArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive1']
    book: Union[bool, 'BookArgsFromGenreRecursive1']


class ReadingProgressIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive2']
    book: Union[bool, 'BookArgsFromGenreRecursive2']


class ReadingProgressIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive3']
    book: Union[bool, 'BookArgsFromGenreRecursive3']


class ReadingProgressIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive4']
    book: Union[bool, 'BookArgsFromGenreRecursive4']


class ReadingProgressIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class ReadingProgressArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyReadingProgressArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    genre: Union[bool, 'GenreArgsFromGenreRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive1']
    book: Union[bool, 'BookArgsFromGenreRecursive1']
    leader: Union[bool, 'UserArgsFromGenreRecursive1']


class WeeklyResultIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    genre: Union[bool, 'GenreArgsFromGenreRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive2']
    book: Union[bool, 'BookArgsFromGenreRecursive2']
    leader: Union[bool, 'UserArgsFromGenreRecursive2']


class WeeklyResultIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    genre: Union[bool, 'GenreArgsFromGenreRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive3']
    book: Union[bool, 'BookArgsFromGenreRecursive3']
    leader: Union[bool, 'UserArgsFromGenreRecursive3']


class WeeklyResultIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    genre: Union[bool, 'GenreArgsFromGenreRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromGenreRecursive4']
    book: Union[bool, 'BookArgsFromGenreRecursive4']
    leader: Union[bool, 'UserArgsFromGenreRecursive4']


class WeeklyResultIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class WeeklyResultArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyWeeklyResultArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive1']


class NotificationIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive2']


class NotificationIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive3']


class NotificationIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    user: Union[bool, 'UserArgsFromGenreRecursive4']


class NotificationIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class NotificationArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyNotificationArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    partner: Union[bool, 'PartnerArgsFromGenreRecursive1']


class AdvertisementIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    partner: Union[bool, 'PartnerArgsFromGenreRecursive2']


class AdvertisementIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    partner: Union[bool, 'PartnerArgsFromGenreRecursive3']


class AdvertisementIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    partner: Union[bool, 'PartnerArgsFromGenreRecursive4']


class AdvertisementIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class AdvertisementArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyAdvertisementArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromGenre(TypedDict, total=False):
    """Relational arguments for Genre"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGenreRecursive1']


class PartnerIncludeFromGenreRecursive1(TypedDict, total=False):
    """Relational arguments for Genre"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGenreRecursive2']


class PartnerIncludeFromGenreRecursive2(TypedDict, total=False):
    """Relational arguments for Genre"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGenreRecursive3']


class PartnerIncludeFromGenreRecursive3(TypedDict, total=False):
    """Relational arguments for Genre"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromGenreRecursive4']


class PartnerIncludeFromGenreRecursive4(TypedDict, total=False):
    """Relational arguments for Genre"""

    

class PartnerArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    
    

class FindManyPartnerArgsFromGenre(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromGenreRecursive1(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromGenreRecursive2(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromGenreRecursive3(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromGenreRecursive4(TypedDict, total=False):
    """Arguments for Genre"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyGenreArgs = FindManyGenreArgsFromGenre
FindFirstGenreArgs = FindManyGenreArgsFromGenre


    

class GenreWhereInput(TypedDict, total=False):
    """Genre arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    parentId: Union[None, _str, 'types.StringFilter']
    parent: 'GenreRelationFilter'
    subgenres: 'GenreListRelationFilter'
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GenreWhereInputRecursive1', List['GenreWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['GenreWhereInputRecursive1']
    OR: List['GenreWhereInputRecursive1']
    NOT: List['GenreWhereInputRecursive1']


class GenreWhereInputRecursive1(TypedDict, total=False):
    """Genre arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    parentId: Union[None, _str, 'types.StringFilter']
    parent: 'GenreRelationFilter'
    subgenres: 'GenreListRelationFilter'
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GenreWhereInputRecursive2', List['GenreWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['GenreWhereInputRecursive2']
    OR: List['GenreWhereInputRecursive2']
    NOT: List['GenreWhereInputRecursive2']


class GenreWhereInputRecursive2(TypedDict, total=False):
    """Genre arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    parentId: Union[None, _str, 'types.StringFilter']
    parent: 'GenreRelationFilter'
    subgenres: 'GenreListRelationFilter'
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GenreWhereInputRecursive3', List['GenreWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['GenreWhereInputRecursive3']
    OR: List['GenreWhereInputRecursive3']
    NOT: List['GenreWhereInputRecursive3']


class GenreWhereInputRecursive3(TypedDict, total=False):
    """Genre arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    parentId: Union[None, _str, 'types.StringFilter']
    parent: 'GenreRelationFilter'
    subgenres: 'GenreListRelationFilter'
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GenreWhereInputRecursive4', List['GenreWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['GenreWhereInputRecursive4']
    OR: List['GenreWhereInputRecursive4']
    NOT: List['GenreWhereInputRecursive4']


class GenreWhereInputRecursive4(TypedDict, total=False):
    """Genre arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    parentId: Union[None, _str, 'types.StringFilter']
    parent: 'GenreRelationFilter'
    subgenres: 'GenreListRelationFilter'
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Genre types


    

class GenreScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Genre arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    parentId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GenreScalarWhereWithAggregatesInputRecursive1']
    OR: List['GenreScalarWhereWithAggregatesInputRecursive1']
    NOT: List['GenreScalarWhereWithAggregatesInputRecursive1']


class GenreScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Genre arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    parentId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GenreScalarWhereWithAggregatesInputRecursive2']
    OR: List['GenreScalarWhereWithAggregatesInputRecursive2']
    NOT: List['GenreScalarWhereWithAggregatesInputRecursive2']


class GenreScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Genre arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    parentId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GenreScalarWhereWithAggregatesInputRecursive3']
    OR: List['GenreScalarWhereWithAggregatesInputRecursive3']
    NOT: List['GenreScalarWhereWithAggregatesInputRecursive3']


class GenreScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Genre arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    parentId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GenreScalarWhereWithAggregatesInputRecursive4']
    OR: List['GenreScalarWhereWithAggregatesInputRecursive4']
    NOT: List['GenreScalarWhereWithAggregatesInputRecursive4']


class GenreScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Genre arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    parentId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class GenreGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    parentId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'GenreSumAggregateOutput'
    _avg: 'GenreAvgAggregateOutput'
    _min: 'GenreMinAggregateOutput'
    _max: 'GenreMaxAggregateOutput'
    _count: 'GenreCountAggregateOutput'


class GenreAvgAggregateOutput(TypedDict, total=False):
    """Genre output for aggregating averages"""


class GenreSumAggregateOutput(TypedDict, total=False):
    """Genre output for aggregating sums"""


class GenreScalarAggregateOutput(TypedDict, total=False):
    """Genre output including scalar fields"""
    id: _str
    name: _str
    parentId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


GenreMinAggregateOutput = GenreScalarAggregateOutput
GenreMaxAggregateOutput = GenreScalarAggregateOutput


class GenreMaxAggregateInput(TypedDict, total=False):
    """Genre input for aggregating by max"""
    id: bool
    name: bool
    parentId: bool
    createdAt: bool
    updatedAt: bool


class GenreMinAggregateInput(TypedDict, total=False):
    """Genre input for aggregating by min"""
    id: bool
    name: bool
    parentId: bool
    createdAt: bool
    updatedAt: bool


class GenreNumberAggregateInput(TypedDict, total=False):
    """Genre input for aggregating numbers"""


GenreAvgAggregateInput = GenreNumberAggregateInput
GenreSumAggregateInput = GenreNumberAggregateInput


GenreCountAggregateInput = TypedDict(
    'GenreCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'parentId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

GenreCountAggregateOutput = TypedDict(
    'GenreCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'parentId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


GenreKeys = Literal[
    'id',
    'name',
    'parentId',
    'parent',
    'subgenres',
    'books',
    'weeklyResults',
    'createdAt',
    'updatedAt',
]
GenreScalarFieldKeys = Literal[
    'id',
    'name',
    'parentId',
    'createdAt',
    'updatedAt',
]
GenreScalarFieldKeysT = TypeVar('GenreScalarFieldKeysT', bound=GenreScalarFieldKeys)

GenreRelationalFieldKeys = Literal[
        'parent',
        'subgenres',
        'books',
        'weeklyResults',
    ]

# AgeCategory types

class AgeCategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the AgeCategory create method"""
    id: _int
    books: 'BookCreateManyNestedWithoutRelationsInput'
    weeklyResults: 'WeeklyResultCreateManyNestedWithoutRelationsInput'


class AgeCategoryCreateInput(AgeCategoryOptionalCreateInput):
    """Required arguments to the AgeCategory create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AgeCategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the AgeCategory create method, without relations"""
    id: _int


class AgeCategoryCreateWithoutRelationsInput(AgeCategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the AgeCategory create method, without relations"""
    name: _str

class AgeCategoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AgeCategoryCreateWithoutRelationsInput'
    where: 'AgeCategoryWhereUniqueInput'

class AgeCategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AgeCategoryCreateWithoutRelationsInput'
    connect: 'AgeCategoryWhereUniqueInput'
    connect_or_create: 'AgeCategoryConnectOrCreateWithoutRelationsInput'


class AgeCategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AgeCategoryCreateWithoutRelationsInput', List['AgeCategoryCreateWithoutRelationsInput']]
    connect: Union['AgeCategoryWhereUniqueInput', List['AgeCategoryWhereUniqueInput']]
    connect_or_create: Union['AgeCategoryConnectOrCreateWithoutRelationsInput', List['AgeCategoryConnectOrCreateWithoutRelationsInput']]

_AgeCategoryWhereUnique_id_Input = TypedDict(
    '_AgeCategoryWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

AgeCategoryWhereUniqueInput = _AgeCategoryWhereUnique_id_Input


class AgeCategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    books: 'BookUpdateManyWithoutRelationsInput'
    weeklyResults: 'WeeklyResultUpdateManyWithoutRelationsInput'


class AgeCategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str


class AgeCategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AgeCategoryCreateWithoutRelationsInput']
    connect: List['AgeCategoryWhereUniqueInput']
    connect_or_create: List['AgeCategoryConnectOrCreateWithoutRelationsInput']
    set: List['AgeCategoryWhereUniqueInput']
    disconnect: List['AgeCategoryWhereUniqueInput']
    delete: List['AgeCategoryWhereUniqueInput']

    # TODO
    # update: List['AgeCategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AgeCategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AgeCategoryScalarWhereInput']
    # upsert: List['AgeCategoryUpserteWithWhereUniqueWithoutRelationsInput']


class AgeCategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AgeCategoryCreateWithoutRelationsInput'
    connect: 'AgeCategoryWhereUniqueInput'
    connect_or_create: 'AgeCategoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AgeCategoryUpdateInput'
    # upsert: 'AgeCategoryUpsertWithoutRelationsInput'


class AgeCategoryUpsertInput(TypedDict):
    create: 'AgeCategoryCreateInput'
    update: 'AgeCategoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_AgeCategory_id_OrderByInput = TypedDict(
    '_AgeCategory_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_AgeCategory_name_OrderByInput = TypedDict(
    '_AgeCategory_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_AgeCategory_RelevanceInner = TypedDict(
    '_AgeCategory_RelevanceInner',
    {
        'fields': 'List[AgeCategoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_AgeCategory_RelevanceOrderByInput = TypedDict(
    '_AgeCategory_RelevanceOrderByInput',
    {
        '_relevance': '_AgeCategory_RelevanceInner',
    },
    total=True
)

AgeCategoryOrderByInput = Union[
    '_AgeCategory_id_OrderByInput',
    '_AgeCategory_name_OrderByInput',
    '_AgeCategory_RelevanceOrderByInput',
]



# recursive AgeCategory types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AgeCategoryRelationFilter = TypedDict(
    'AgeCategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AgeCategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AgeCategoryInclude(TypedDict, total=False):
    """AgeCategory relational arguments"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategory']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategory']


    

class UserIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromAgeCategoryRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive1']


class UserIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromAgeCategoryRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive2']


class UserIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromAgeCategoryRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive3']


class UserIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromAgeCategoryRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive4']


class UserIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class UserArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyUserArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    parent: Union[bool, 'GenreArgsFromAgeCategoryRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromAgeCategoryRecursive1']
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive1']


class GenreIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    parent: Union[bool, 'GenreArgsFromAgeCategoryRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromAgeCategoryRecursive2']
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive2']


class GenreIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    parent: Union[bool, 'GenreArgsFromAgeCategoryRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromAgeCategoryRecursive3']
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive3']


class GenreIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    parent: Union[bool, 'GenreArgsFromAgeCategoryRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromAgeCategoryRecursive4']
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive4']


class GenreIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class GenreArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyGenreArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive1']


class AgeCategoryIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive2']


class AgeCategoryIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive3']


class AgeCategoryIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    books: Union[bool, 'FindManyBookArgsFromAgeCategoryRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive4']


class AgeCategoryIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class AgeCategoryArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyAgeCategoryArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive1']


class BookIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive2']


class BookIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive3']


class BookIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromAgeCategoryRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAgeCategoryRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAgeCategoryRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAgeCategoryRecursive4']


class BookIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class BookArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyBookArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive1']


class UserBookIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive2']


class UserBookIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive3']


class UserBookIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive4']


class UserBookIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class UserBookArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyUserBookArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive1']


class VoteIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive2']


class VoteIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive3']


class VoteIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive4']


class VoteIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class VoteArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyVoteArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive1']


class ReadingProgressIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive2']


class ReadingProgressIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive3']


class ReadingProgressIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive4']


class ReadingProgressIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class ReadingProgressArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyReadingProgressArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive1']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive1']
    leader: Union[bool, 'UserArgsFromAgeCategoryRecursive1']


class WeeklyResultIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive2']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive2']
    leader: Union[bool, 'UserArgsFromAgeCategoryRecursive2']


class WeeklyResultIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive3']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive3']
    leader: Union[bool, 'UserArgsFromAgeCategoryRecursive3']


class WeeklyResultIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    genre: Union[bool, 'GenreArgsFromAgeCategoryRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAgeCategoryRecursive4']
    book: Union[bool, 'BookArgsFromAgeCategoryRecursive4']
    leader: Union[bool, 'UserArgsFromAgeCategoryRecursive4']


class WeeklyResultIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class WeeklyResultArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyWeeklyResultArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive1']


class NotificationIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive2']


class NotificationIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive3']


class NotificationIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    user: Union[bool, 'UserArgsFromAgeCategoryRecursive4']


class NotificationIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class NotificationArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyNotificationArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    partner: Union[bool, 'PartnerArgsFromAgeCategoryRecursive1']


class AdvertisementIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    partner: Union[bool, 'PartnerArgsFromAgeCategoryRecursive2']


class AdvertisementIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    partner: Union[bool, 'PartnerArgsFromAgeCategoryRecursive3']


class AdvertisementIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    partner: Union[bool, 'PartnerArgsFromAgeCategoryRecursive4']


class AdvertisementIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class AdvertisementArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyAdvertisementArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromAgeCategory(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAgeCategoryRecursive1']


class PartnerIncludeFromAgeCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAgeCategoryRecursive2']


class PartnerIncludeFromAgeCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAgeCategoryRecursive3']


class PartnerIncludeFromAgeCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for AgeCategory"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAgeCategoryRecursive4']


class PartnerIncludeFromAgeCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for AgeCategory"""

    

class PartnerArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    
    

class FindManyPartnerArgsFromAgeCategory(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromAgeCategoryRecursive1(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromAgeCategoryRecursive2(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromAgeCategoryRecursive3(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromAgeCategoryRecursive4(TypedDict, total=False):
    """Arguments for AgeCategory"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyAgeCategoryArgs = FindManyAgeCategoryArgsFromAgeCategory
FindFirstAgeCategoryArgs = FindManyAgeCategoryArgsFromAgeCategory


    

class AgeCategoryWhereInput(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['AgeCategoryWhereInputRecursive1', List['AgeCategoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AgeCategoryWhereInputRecursive1']
    OR: List['AgeCategoryWhereInputRecursive1']
    NOT: List['AgeCategoryWhereInputRecursive1']


class AgeCategoryWhereInputRecursive1(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['AgeCategoryWhereInputRecursive2', List['AgeCategoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AgeCategoryWhereInputRecursive2']
    OR: List['AgeCategoryWhereInputRecursive2']
    NOT: List['AgeCategoryWhereInputRecursive2']


class AgeCategoryWhereInputRecursive2(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['AgeCategoryWhereInputRecursive3', List['AgeCategoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AgeCategoryWhereInputRecursive3']
    OR: List['AgeCategoryWhereInputRecursive3']
    NOT: List['AgeCategoryWhereInputRecursive3']


class AgeCategoryWhereInputRecursive3(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'

    # should be noted that AND and NOT should be Union['AgeCategoryWhereInputRecursive4', List['AgeCategoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AgeCategoryWhereInputRecursive4']
    OR: List['AgeCategoryWhereInputRecursive4']
    NOT: List['AgeCategoryWhereInputRecursive4']


class AgeCategoryWhereInputRecursive4(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    books: 'BookListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'



# aggregate AgeCategory types


    

class AgeCategoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AgeCategoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['AgeCategoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AgeCategoryScalarWhereWithAggregatesInputRecursive1']


class AgeCategoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AgeCategoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['AgeCategoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AgeCategoryScalarWhereWithAggregatesInputRecursive2']


class AgeCategoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AgeCategoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['AgeCategoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AgeCategoryScalarWhereWithAggregatesInputRecursive3']


class AgeCategoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AgeCategoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['AgeCategoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AgeCategoryScalarWhereWithAggregatesInputRecursive4']


class AgeCategoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """AgeCategory arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class AgeCategoryGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    _sum: 'AgeCategorySumAggregateOutput'
    _avg: 'AgeCategoryAvgAggregateOutput'
    _min: 'AgeCategoryMinAggregateOutput'
    _max: 'AgeCategoryMaxAggregateOutput'
    _count: 'AgeCategoryCountAggregateOutput'


class AgeCategoryAvgAggregateOutput(TypedDict, total=False):
    """AgeCategory output for aggregating averages"""
    id: float


class AgeCategorySumAggregateOutput(TypedDict, total=False):
    """AgeCategory output for aggregating sums"""
    id: _int


class AgeCategoryScalarAggregateOutput(TypedDict, total=False):
    """AgeCategory output including scalar fields"""
    id: _int
    name: _str


AgeCategoryMinAggregateOutput = AgeCategoryScalarAggregateOutput
AgeCategoryMaxAggregateOutput = AgeCategoryScalarAggregateOutput


class AgeCategoryMaxAggregateInput(TypedDict, total=False):
    """AgeCategory input for aggregating by max"""
    id: bool
    name: bool


class AgeCategoryMinAggregateInput(TypedDict, total=False):
    """AgeCategory input for aggregating by min"""
    id: bool
    name: bool


class AgeCategoryNumberAggregateInput(TypedDict, total=False):
    """AgeCategory input for aggregating numbers"""
    id: bool


AgeCategoryAvgAggregateInput = AgeCategoryNumberAggregateInput
AgeCategorySumAggregateInput = AgeCategoryNumberAggregateInput


AgeCategoryCountAggregateInput = TypedDict(
    'AgeCategoryCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

AgeCategoryCountAggregateOutput = TypedDict(
    'AgeCategoryCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


AgeCategoryKeys = Literal[
    'id',
    'name',
    'books',
    'weeklyResults',
]
AgeCategoryScalarFieldKeys = Literal[
    'id',
    'name',
]
AgeCategoryScalarFieldKeysT = TypeVar('AgeCategoryScalarFieldKeysT', bound=AgeCategoryScalarFieldKeys)

AgeCategoryRelationalFieldKeys = Literal[
        'books',
        'weeklyResults',
    ]

# Book types

class BookOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Book create method"""
    id: _int
    description: Optional[_str]
    coverUrl: Optional[_str]
    genreId: Optional[_str]
    ageCategoryId: _int
    rating: _float
    isPremium: _bool
    litresRating: Optional[_float]
    litresRatingCount: Optional[_int]
    series: Optional[_str]
    translator: Optional[_str]
    volume: Optional[_str]
    year: Optional[_str]
    isbn: Optional[_str]
    copyrightHolder: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    genre: 'GenreCreateNestedWithoutRelationsInput'
    ageCategory: 'AgeCategoryCreateNestedWithoutRelationsInput'
    votes: 'VoteCreateManyNestedWithoutRelationsInput'
    readingProgress: 'ReadingProgressCreateManyNestedWithoutRelationsInput'
    weeklyResults: 'WeeklyResultCreateManyNestedWithoutRelationsInput'
    userBooks: 'UserBookCreateManyNestedWithoutRelationsInput'


class BookCreateInput(BookOptionalCreateInput):
    """Required arguments to the Book create method"""
    title: _str
    author: _str
    litresId: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class BookOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Book create method, without relations"""
    id: _int
    description: Optional[_str]
    coverUrl: Optional[_str]
    genreId: Optional[_str]
    ageCategoryId: _int
    rating: _float
    isPremium: _bool
    litresRating: Optional[_float]
    litresRatingCount: Optional[_int]
    series: Optional[_str]
    translator: Optional[_str]
    volume: Optional[_str]
    year: Optional[_str]
    isbn: Optional[_str]
    copyrightHolder: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BookCreateWithoutRelationsInput(BookOptionalCreateWithoutRelationsInput):
    """Required arguments to the Book create method, without relations"""
    title: _str
    author: _str
    litresId: _int

class BookConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'BookCreateWithoutRelationsInput'
    where: 'BookWhereUniqueInput'

class BookCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'BookCreateWithoutRelationsInput'
    connect: 'BookWhereUniqueInput'
    connect_or_create: 'BookConnectOrCreateWithoutRelationsInput'


class BookCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['BookCreateWithoutRelationsInput', List['BookCreateWithoutRelationsInput']]
    connect: Union['BookWhereUniqueInput', List['BookWhereUniqueInput']]
    connect_or_create: Union['BookConnectOrCreateWithoutRelationsInput', List['BookConnectOrCreateWithoutRelationsInput']]

_BookWhereUnique_id_Input = TypedDict(
    '_BookWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_BookWhereUnique_litresId_Input = TypedDict(
    '_BookWhereUnique_litresId_Input',
    {
        'litresId': '_int',
    },
    total=True
)

BookWhereUniqueInput = Union[
    '_BookWhereUnique_id_Input',
    '_BookWhereUnique_litresId_Input',
]


class BookUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    title: _str
    author: _str
    description: Optional[_str]
    coverUrl: Optional[_str]
    litresId: Union[AtomicIntInput, _int]
    rating: Union[AtomicFloatInput, _float]
    isPremium: _bool
    litresRating: Optional[Union[AtomicFloatInput, _float]]
    litresRatingCount: Optional[Union[AtomicIntInput, _int]]
    series: Optional[_str]
    translator: Optional[_str]
    volume: Optional[_str]
    year: Optional[_str]
    isbn: Optional[_str]
    copyrightHolder: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    genre: 'GenreUpdateOneWithoutRelationsInput'
    ageCategory: 'AgeCategoryUpdateOneWithoutRelationsInput'
    votes: 'VoteUpdateManyWithoutRelationsInput'
    readingProgress: 'ReadingProgressUpdateManyWithoutRelationsInput'
    weeklyResults: 'WeeklyResultUpdateManyWithoutRelationsInput'
    userBooks: 'UserBookUpdateManyWithoutRelationsInput'


class BookUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    title: _str
    author: _str
    description: Optional[_str]
    coverUrl: Optional[_str]
    litresId: Union[AtomicIntInput, _int]
    rating: Union[AtomicFloatInput, _float]
    isPremium: _bool
    litresRating: Optional[Union[AtomicFloatInput, _float]]
    litresRatingCount: Optional[Union[AtomicIntInput, _int]]
    series: Optional[_str]
    translator: Optional[_str]
    volume: Optional[_str]
    year: Optional[_str]
    isbn: Optional[_str]
    copyrightHolder: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BookUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['BookCreateWithoutRelationsInput']
    connect: List['BookWhereUniqueInput']
    connect_or_create: List['BookConnectOrCreateWithoutRelationsInput']
    set: List['BookWhereUniqueInput']
    disconnect: List['BookWhereUniqueInput']
    delete: List['BookWhereUniqueInput']

    # TODO
    # update: List['BookUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['BookUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['BookScalarWhereInput']
    # upsert: List['BookUpserteWithWhereUniqueWithoutRelationsInput']


class BookUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'BookCreateWithoutRelationsInput'
    connect: 'BookWhereUniqueInput'
    connect_or_create: 'BookConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'BookUpdateInput'
    # upsert: 'BookUpsertWithoutRelationsInput'


class BookUpsertInput(TypedDict):
    create: 'BookCreateInput'
    update: 'BookUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Book_id_OrderByInput = TypedDict(
    '_Book_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Book_title_OrderByInput = TypedDict(
    '_Book_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Book_author_OrderByInput = TypedDict(
    '_Book_author_OrderByInput',
    {
        'author': 'SortOrder',
    },
    total=True
)

_Book_description_OrderByInput = TypedDict(
    '_Book_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Book_coverUrl_OrderByInput = TypedDict(
    '_Book_coverUrl_OrderByInput',
    {
        'coverUrl': 'SortOrder',
    },
    total=True
)

_Book_litresId_OrderByInput = TypedDict(
    '_Book_litresId_OrderByInput',
    {
        'litresId': 'SortOrder',
    },
    total=True
)

_Book_genreId_OrderByInput = TypedDict(
    '_Book_genreId_OrderByInput',
    {
        'genreId': 'SortOrder',
    },
    total=True
)

_Book_ageCategoryId_OrderByInput = TypedDict(
    '_Book_ageCategoryId_OrderByInput',
    {
        'ageCategoryId': 'SortOrder',
    },
    total=True
)

_Book_rating_OrderByInput = TypedDict(
    '_Book_rating_OrderByInput',
    {
        'rating': 'SortOrder',
    },
    total=True
)

_Book_isPremium_OrderByInput = TypedDict(
    '_Book_isPremium_OrderByInput',
    {
        'isPremium': 'SortOrder',
    },
    total=True
)

_Book_litresRating_OrderByInput = TypedDict(
    '_Book_litresRating_OrderByInput',
    {
        'litresRating': 'SortOrder',
    },
    total=True
)

_Book_litresRatingCount_OrderByInput = TypedDict(
    '_Book_litresRatingCount_OrderByInput',
    {
        'litresRatingCount': 'SortOrder',
    },
    total=True
)

_Book_series_OrderByInput = TypedDict(
    '_Book_series_OrderByInput',
    {
        'series': 'SortOrder',
    },
    total=True
)

_Book_translator_OrderByInput = TypedDict(
    '_Book_translator_OrderByInput',
    {
        'translator': 'SortOrder',
    },
    total=True
)

_Book_volume_OrderByInput = TypedDict(
    '_Book_volume_OrderByInput',
    {
        'volume': 'SortOrder',
    },
    total=True
)

_Book_year_OrderByInput = TypedDict(
    '_Book_year_OrderByInput',
    {
        'year': 'SortOrder',
    },
    total=True
)

_Book_isbn_OrderByInput = TypedDict(
    '_Book_isbn_OrderByInput',
    {
        'isbn': 'SortOrder',
    },
    total=True
)

_Book_copyrightHolder_OrderByInput = TypedDict(
    '_Book_copyrightHolder_OrderByInput',
    {
        'copyrightHolder': 'SortOrder',
    },
    total=True
)

_Book_createdAt_OrderByInput = TypedDict(
    '_Book_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Book_updatedAt_OrderByInput = TypedDict(
    '_Book_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Book_RelevanceInner = TypedDict(
    '_Book_RelevanceInner',
    {
        'fields': 'List[BookScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Book_RelevanceOrderByInput = TypedDict(
    '_Book_RelevanceOrderByInput',
    {
        '_relevance': '_Book_RelevanceInner',
    },
    total=True
)

BookOrderByInput = Union[
    '_Book_id_OrderByInput',
    '_Book_title_OrderByInput',
    '_Book_author_OrderByInput',
    '_Book_description_OrderByInput',
    '_Book_coverUrl_OrderByInput',
    '_Book_litresId_OrderByInput',
    '_Book_genreId_OrderByInput',
    '_Book_ageCategoryId_OrderByInput',
    '_Book_rating_OrderByInput',
    '_Book_isPremium_OrderByInput',
    '_Book_litresRating_OrderByInput',
    '_Book_litresRatingCount_OrderByInput',
    '_Book_series_OrderByInput',
    '_Book_translator_OrderByInput',
    '_Book_volume_OrderByInput',
    '_Book_year_OrderByInput',
    '_Book_isbn_OrderByInput',
    '_Book_copyrightHolder_OrderByInput',
    '_Book_createdAt_OrderByInput',
    '_Book_updatedAt_OrderByInput',
    '_Book_RelevanceOrderByInput',
]



# recursive Book types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

BookRelationFilter = TypedDict(
    'BookRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class BookListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class BookInclude(TypedDict, total=False):
    """Book relational arguments"""
    genre: Union[bool, 'GenreArgsFromBook']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBook']
    votes: Union[bool, 'FindManyVoteArgsFromBook']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBook']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBook']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBook']


    

class UserIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromBookRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive1']


class UserIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromBookRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive2']


class UserIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromBookRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive3']


class UserIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromBookRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive4']


class UserIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class UserArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyUserArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    parent: Union[bool, 'GenreArgsFromBookRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromBookRecursive1']
    books: Union[bool, 'FindManyBookArgsFromBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive1']


class GenreIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    parent: Union[bool, 'GenreArgsFromBookRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromBookRecursive2']
    books: Union[bool, 'FindManyBookArgsFromBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive2']


class GenreIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    parent: Union[bool, 'GenreArgsFromBookRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromBookRecursive3']
    books: Union[bool, 'FindManyBookArgsFromBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive3']


class GenreIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    parent: Union[bool, 'GenreArgsFromBookRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromBookRecursive4']
    books: Union[bool, 'FindManyBookArgsFromBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive4']


class GenreIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class GenreArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyGenreArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive1']


class AgeCategoryIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive2']


class AgeCategoryIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive3']


class AgeCategoryIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    books: Union[bool, 'FindManyBookArgsFromBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive4']


class AgeCategoryIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class AgeCategoryArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyAgeCategoryArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    genre: Union[bool, 'GenreArgsFromBookRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive1']


class BookIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    genre: Union[bool, 'GenreArgsFromBookRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive2']


class BookIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    genre: Union[bool, 'GenreArgsFromBookRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive3']


class BookIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    genre: Union[bool, 'GenreArgsFromBookRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromBookRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromBookRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromBookRecursive4']


class BookIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class BookArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyBookArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive1']
    book: Union[bool, 'BookArgsFromBookRecursive1']


class UserBookIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive2']
    book: Union[bool, 'BookArgsFromBookRecursive2']


class UserBookIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive3']
    book: Union[bool, 'BookArgsFromBookRecursive3']


class UserBookIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive4']
    book: Union[bool, 'BookArgsFromBookRecursive4']


class UserBookIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class UserBookArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyUserBookArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive1']
    book: Union[bool, 'BookArgsFromBookRecursive1']


class VoteIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive2']
    book: Union[bool, 'BookArgsFromBookRecursive2']


class VoteIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive3']
    book: Union[bool, 'BookArgsFromBookRecursive3']


class VoteIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive4']
    book: Union[bool, 'BookArgsFromBookRecursive4']


class VoteIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class VoteArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyVoteArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive1']
    book: Union[bool, 'BookArgsFromBookRecursive1']


class ReadingProgressIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive2']
    book: Union[bool, 'BookArgsFromBookRecursive2']


class ReadingProgressIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive3']
    book: Union[bool, 'BookArgsFromBookRecursive3']


class ReadingProgressIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive4']
    book: Union[bool, 'BookArgsFromBookRecursive4']


class ReadingProgressIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class ReadingProgressArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyReadingProgressArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    genre: Union[bool, 'GenreArgsFromBookRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive1']
    book: Union[bool, 'BookArgsFromBookRecursive1']
    leader: Union[bool, 'UserArgsFromBookRecursive1']


class WeeklyResultIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    genre: Union[bool, 'GenreArgsFromBookRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive2']
    book: Union[bool, 'BookArgsFromBookRecursive2']
    leader: Union[bool, 'UserArgsFromBookRecursive2']


class WeeklyResultIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    genre: Union[bool, 'GenreArgsFromBookRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive3']
    book: Union[bool, 'BookArgsFromBookRecursive3']
    leader: Union[bool, 'UserArgsFromBookRecursive3']


class WeeklyResultIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    genre: Union[bool, 'GenreArgsFromBookRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromBookRecursive4']
    book: Union[bool, 'BookArgsFromBookRecursive4']
    leader: Union[bool, 'UserArgsFromBookRecursive4']


class WeeklyResultIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class WeeklyResultArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyWeeklyResultArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive1']


class NotificationIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive2']


class NotificationIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive3']


class NotificationIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    user: Union[bool, 'UserArgsFromBookRecursive4']


class NotificationIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class NotificationArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyNotificationArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    partner: Union[bool, 'PartnerArgsFromBookRecursive1']


class AdvertisementIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    partner: Union[bool, 'PartnerArgsFromBookRecursive2']


class AdvertisementIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    partner: Union[bool, 'PartnerArgsFromBookRecursive3']


class AdvertisementIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    partner: Union[bool, 'PartnerArgsFromBookRecursive4']


class AdvertisementIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class AdvertisementArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyAdvertisementArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromBook(TypedDict, total=False):
    """Relational arguments for Book"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromBookRecursive1']


class PartnerIncludeFromBookRecursive1(TypedDict, total=False):
    """Relational arguments for Book"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromBookRecursive2']


class PartnerIncludeFromBookRecursive2(TypedDict, total=False):
    """Relational arguments for Book"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromBookRecursive3']


class PartnerIncludeFromBookRecursive3(TypedDict, total=False):
    """Relational arguments for Book"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromBookRecursive4']


class PartnerIncludeFromBookRecursive4(TypedDict, total=False):
    """Relational arguments for Book"""

    

class PartnerArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    
    

class FindManyPartnerArgsFromBook(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromBookRecursive1(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromBookRecursive2(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromBookRecursive3(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromBookRecursive4(TypedDict, total=False):
    """Arguments for Book"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyBookArgs = FindManyBookArgsFromBook
FindFirstBookArgs = FindManyBookArgsFromBook


    

class BookWhereInput(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    author: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    coverUrl: Union[None, _str, 'types.StringFilter']
    litresId: Union[_int, 'types.IntFilter']
    genreId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    litresRating: Union[None, _float, 'types.FloatFilter']
    litresRatingCount: Union[None, _int, 'types.IntFilter']
    series: Union[None, _str, 'types.StringFilter']
    translator: Union[None, _str, 'types.StringFilter']
    volume: Union[None, _str, 'types.StringFilter']
    year: Union[None, _str, 'types.StringFilter']
    isbn: Union[None, _str, 'types.StringFilter']
    copyrightHolder: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    genre: 'GenreRelationFilter'
    ageCategory: 'AgeCategoryRelationFilter'
    votes: 'VoteListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'
    userBooks: 'UserBookListRelationFilter'

    # should be noted that AND and NOT should be Union['BookWhereInputRecursive1', List['BookWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['BookWhereInputRecursive1']
    OR: List['BookWhereInputRecursive1']
    NOT: List['BookWhereInputRecursive1']


class BookWhereInputRecursive1(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    author: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    coverUrl: Union[None, _str, 'types.StringFilter']
    litresId: Union[_int, 'types.IntFilter']
    genreId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    litresRating: Union[None, _float, 'types.FloatFilter']
    litresRatingCount: Union[None, _int, 'types.IntFilter']
    series: Union[None, _str, 'types.StringFilter']
    translator: Union[None, _str, 'types.StringFilter']
    volume: Union[None, _str, 'types.StringFilter']
    year: Union[None, _str, 'types.StringFilter']
    isbn: Union[None, _str, 'types.StringFilter']
    copyrightHolder: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    genre: 'GenreRelationFilter'
    ageCategory: 'AgeCategoryRelationFilter'
    votes: 'VoteListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'
    userBooks: 'UserBookListRelationFilter'

    # should be noted that AND and NOT should be Union['BookWhereInputRecursive2', List['BookWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['BookWhereInputRecursive2']
    OR: List['BookWhereInputRecursive2']
    NOT: List['BookWhereInputRecursive2']


class BookWhereInputRecursive2(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    author: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    coverUrl: Union[None, _str, 'types.StringFilter']
    litresId: Union[_int, 'types.IntFilter']
    genreId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    litresRating: Union[None, _float, 'types.FloatFilter']
    litresRatingCount: Union[None, _int, 'types.IntFilter']
    series: Union[None, _str, 'types.StringFilter']
    translator: Union[None, _str, 'types.StringFilter']
    volume: Union[None, _str, 'types.StringFilter']
    year: Union[None, _str, 'types.StringFilter']
    isbn: Union[None, _str, 'types.StringFilter']
    copyrightHolder: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    genre: 'GenreRelationFilter'
    ageCategory: 'AgeCategoryRelationFilter'
    votes: 'VoteListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'
    userBooks: 'UserBookListRelationFilter'

    # should be noted that AND and NOT should be Union['BookWhereInputRecursive3', List['BookWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['BookWhereInputRecursive3']
    OR: List['BookWhereInputRecursive3']
    NOT: List['BookWhereInputRecursive3']


class BookWhereInputRecursive3(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    author: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    coverUrl: Union[None, _str, 'types.StringFilter']
    litresId: Union[_int, 'types.IntFilter']
    genreId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    litresRating: Union[None, _float, 'types.FloatFilter']
    litresRatingCount: Union[None, _int, 'types.IntFilter']
    series: Union[None, _str, 'types.StringFilter']
    translator: Union[None, _str, 'types.StringFilter']
    volume: Union[None, _str, 'types.StringFilter']
    year: Union[None, _str, 'types.StringFilter']
    isbn: Union[None, _str, 'types.StringFilter']
    copyrightHolder: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    genre: 'GenreRelationFilter'
    ageCategory: 'AgeCategoryRelationFilter'
    votes: 'VoteListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'
    userBooks: 'UserBookListRelationFilter'

    # should be noted that AND and NOT should be Union['BookWhereInputRecursive4', List['BookWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['BookWhereInputRecursive4']
    OR: List['BookWhereInputRecursive4']
    NOT: List['BookWhereInputRecursive4']


class BookWhereInputRecursive4(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    author: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    coverUrl: Union[None, _str, 'types.StringFilter']
    litresId: Union[_int, 'types.IntFilter']
    genreId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    rating: Union[_float, 'types.FloatFilter']
    isPremium: Union[_bool, 'types.BooleanFilter']
    litresRating: Union[None, _float, 'types.FloatFilter']
    litresRatingCount: Union[None, _int, 'types.IntFilter']
    series: Union[None, _str, 'types.StringFilter']
    translator: Union[None, _str, 'types.StringFilter']
    volume: Union[None, _str, 'types.StringFilter']
    year: Union[None, _str, 'types.StringFilter']
    isbn: Union[None, _str, 'types.StringFilter']
    copyrightHolder: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    genre: 'GenreRelationFilter'
    ageCategory: 'AgeCategoryRelationFilter'
    votes: 'VoteListRelationFilter'
    readingProgress: 'ReadingProgressListRelationFilter'
    weeklyResults: 'WeeklyResultListRelationFilter'
    userBooks: 'UserBookListRelationFilter'



# aggregate Book types


    

class BookScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    author: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coverUrl: Union[_str, 'types.StringWithAggregatesFilter']
    litresId: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    litresRating: Union[_float, 'types.FloatWithAggregatesFilter']
    litresRatingCount: Union[_int, 'types.IntWithAggregatesFilter']
    series: Union[_str, 'types.StringWithAggregatesFilter']
    translator: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_str, 'types.StringWithAggregatesFilter']
    isbn: Union[_str, 'types.StringWithAggregatesFilter']
    copyrightHolder: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BookScalarWhereWithAggregatesInputRecursive1']
    OR: List['BookScalarWhereWithAggregatesInputRecursive1']
    NOT: List['BookScalarWhereWithAggregatesInputRecursive1']


class BookScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    author: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coverUrl: Union[_str, 'types.StringWithAggregatesFilter']
    litresId: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    litresRating: Union[_float, 'types.FloatWithAggregatesFilter']
    litresRatingCount: Union[_int, 'types.IntWithAggregatesFilter']
    series: Union[_str, 'types.StringWithAggregatesFilter']
    translator: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_str, 'types.StringWithAggregatesFilter']
    isbn: Union[_str, 'types.StringWithAggregatesFilter']
    copyrightHolder: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BookScalarWhereWithAggregatesInputRecursive2']
    OR: List['BookScalarWhereWithAggregatesInputRecursive2']
    NOT: List['BookScalarWhereWithAggregatesInputRecursive2']


class BookScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    author: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coverUrl: Union[_str, 'types.StringWithAggregatesFilter']
    litresId: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    litresRating: Union[_float, 'types.FloatWithAggregatesFilter']
    litresRatingCount: Union[_int, 'types.IntWithAggregatesFilter']
    series: Union[_str, 'types.StringWithAggregatesFilter']
    translator: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_str, 'types.StringWithAggregatesFilter']
    isbn: Union[_str, 'types.StringWithAggregatesFilter']
    copyrightHolder: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BookScalarWhereWithAggregatesInputRecursive3']
    OR: List['BookScalarWhereWithAggregatesInputRecursive3']
    NOT: List['BookScalarWhereWithAggregatesInputRecursive3']


class BookScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    author: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coverUrl: Union[_str, 'types.StringWithAggregatesFilter']
    litresId: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    litresRating: Union[_float, 'types.FloatWithAggregatesFilter']
    litresRatingCount: Union[_int, 'types.IntWithAggregatesFilter']
    series: Union[_str, 'types.StringWithAggregatesFilter']
    translator: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_str, 'types.StringWithAggregatesFilter']
    isbn: Union[_str, 'types.StringWithAggregatesFilter']
    copyrightHolder: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BookScalarWhereWithAggregatesInputRecursive4']
    OR: List['BookScalarWhereWithAggregatesInputRecursive4']
    NOT: List['BookScalarWhereWithAggregatesInputRecursive4']


class BookScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Book arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    author: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coverUrl: Union[_str, 'types.StringWithAggregatesFilter']
    litresId: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_float, 'types.FloatWithAggregatesFilter']
    isPremium: Union[_bool, 'types.BooleanWithAggregatesFilter']
    litresRating: Union[_float, 'types.FloatWithAggregatesFilter']
    litresRatingCount: Union[_int, 'types.IntWithAggregatesFilter']
    series: Union[_str, 'types.StringWithAggregatesFilter']
    translator: Union[_str, 'types.StringWithAggregatesFilter']
    volume: Union[_str, 'types.StringWithAggregatesFilter']
    year: Union[_str, 'types.StringWithAggregatesFilter']
    isbn: Union[_str, 'types.StringWithAggregatesFilter']
    copyrightHolder: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class BookGroupByOutput(TypedDict, total=False):
    id: _int
    title: _str
    author: _str
    description: _str
    coverUrl: _str
    litresId: _int
    genreId: _str
    ageCategoryId: _int
    rating: _float
    isPremium: _bool
    litresRating: _float
    litresRatingCount: _int
    series: _str
    translator: _str
    volume: _str
    year: _str
    isbn: _str
    copyrightHolder: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'BookSumAggregateOutput'
    _avg: 'BookAvgAggregateOutput'
    _min: 'BookMinAggregateOutput'
    _max: 'BookMaxAggregateOutput'
    _count: 'BookCountAggregateOutput'


class BookAvgAggregateOutput(TypedDict, total=False):
    """Book output for aggregating averages"""
    id: float
    litresId: float
    ageCategoryId: float
    rating: float
    litresRating: float
    litresRatingCount: float


class BookSumAggregateOutput(TypedDict, total=False):
    """Book output for aggregating sums"""
    id: _int
    litresId: _int
    ageCategoryId: _int
    rating: _float
    litresRating: _float
    litresRatingCount: _int


class BookScalarAggregateOutput(TypedDict, total=False):
    """Book output including scalar fields"""
    id: _int
    title: _str
    author: _str
    description: _str
    coverUrl: _str
    litresId: _int
    genreId: _str
    ageCategoryId: _int
    rating: _float
    isPremium: _bool
    litresRating: _float
    litresRatingCount: _int
    series: _str
    translator: _str
    volume: _str
    year: _str
    isbn: _str
    copyrightHolder: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


BookMinAggregateOutput = BookScalarAggregateOutput
BookMaxAggregateOutput = BookScalarAggregateOutput


class BookMaxAggregateInput(TypedDict, total=False):
    """Book input for aggregating by max"""
    id: bool
    title: bool
    author: bool
    description: bool
    coverUrl: bool
    litresId: bool
    genreId: bool
    ageCategoryId: bool
    rating: bool
    isPremium: bool
    litresRating: bool
    litresRatingCount: bool
    series: bool
    translator: bool
    volume: bool
    year: bool
    isbn: bool
    copyrightHolder: bool
    createdAt: bool
    updatedAt: bool


class BookMinAggregateInput(TypedDict, total=False):
    """Book input for aggregating by min"""
    id: bool
    title: bool
    author: bool
    description: bool
    coverUrl: bool
    litresId: bool
    genreId: bool
    ageCategoryId: bool
    rating: bool
    isPremium: bool
    litresRating: bool
    litresRatingCount: bool
    series: bool
    translator: bool
    volume: bool
    year: bool
    isbn: bool
    copyrightHolder: bool
    createdAt: bool
    updatedAt: bool


class BookNumberAggregateInput(TypedDict, total=False):
    """Book input for aggregating numbers"""
    id: bool
    litresId: bool
    ageCategoryId: bool
    rating: bool
    litresRating: bool
    litresRatingCount: bool


BookAvgAggregateInput = BookNumberAggregateInput
BookSumAggregateInput = BookNumberAggregateInput


BookCountAggregateInput = TypedDict(
    'BookCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'author': bool,
        'description': bool,
        'coverUrl': bool,
        'litresId': bool,
        'genreId': bool,
        'ageCategoryId': bool,
        'rating': bool,
        'isPremium': bool,
        'litresRating': bool,
        'litresRatingCount': bool,
        'series': bool,
        'translator': bool,
        'volume': bool,
        'year': bool,
        'isbn': bool,
        'copyrightHolder': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

BookCountAggregateOutput = TypedDict(
    'BookCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'author': int,
        'description': int,
        'coverUrl': int,
        'litresId': int,
        'genreId': int,
        'ageCategoryId': int,
        'rating': int,
        'isPremium': int,
        'litresRating': int,
        'litresRatingCount': int,
        'series': int,
        'translator': int,
        'volume': int,
        'year': int,
        'isbn': int,
        'copyrightHolder': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


BookKeys = Literal[
    'id',
    'title',
    'author',
    'description',
    'coverUrl',
    'litresId',
    'genreId',
    'ageCategoryId',
    'rating',
    'isPremium',
    'litresRating',
    'litresRatingCount',
    'series',
    'translator',
    'volume',
    'year',
    'isbn',
    'copyrightHolder',
    'createdAt',
    'updatedAt',
    'genre',
    'ageCategory',
    'votes',
    'readingProgress',
    'weeklyResults',
    'userBooks',
]
BookScalarFieldKeys = Literal[
    'id',
    'title',
    'author',
    'description',
    'coverUrl',
    'litresId',
    'genreId',
    'ageCategoryId',
    'rating',
    'isPremium',
    'litresRating',
    'litresRatingCount',
    'series',
    'translator',
    'volume',
    'year',
    'isbn',
    'copyrightHolder',
    'createdAt',
    'updatedAt',
]
BookScalarFieldKeysT = TypeVar('BookScalarFieldKeysT', bound=BookScalarFieldKeys)

BookRelationalFieldKeys = Literal[
        'genre',
        'ageCategory',
        'votes',
        'readingProgress',
        'weeklyResults',
        'userBooks',
    ]

# UserBook types

class UserBookOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserBook create method"""
    id: _int
    userId: _int
    bookId: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    book: 'BookCreateNestedWithoutRelationsInput'


class UserBookCreateInput(UserBookOptionalCreateInput):
    """Required arguments to the UserBook create method"""
    status: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserBookOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserBook create method, without relations"""
    id: _int
    userId: _int
    bookId: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserBookCreateWithoutRelationsInput(UserBookOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserBook create method, without relations"""
    status: _str

class UserBookConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserBookCreateWithoutRelationsInput'
    where: 'UserBookWhereUniqueInput'

class UserBookCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserBookCreateWithoutRelationsInput'
    connect: 'UserBookWhereUniqueInput'
    connect_or_create: 'UserBookConnectOrCreateWithoutRelationsInput'


class UserBookCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserBookCreateWithoutRelationsInput', List['UserBookCreateWithoutRelationsInput']]
    connect: Union['UserBookWhereUniqueInput', List['UserBookWhereUniqueInput']]
    connect_or_create: Union['UserBookConnectOrCreateWithoutRelationsInput', List['UserBookConnectOrCreateWithoutRelationsInput']]

_UserBookWhereUnique_id_Input = TypedDict(
    '_UserBookWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserBookCompounduserId_bookIdKeyInner = TypedDict(
    '_UserBookCompounduserId_bookIdKeyInner',
    {
        'userId': '_int',
        'bookId': '_int',
    },
    total=True
)

_UserBookCompounduserId_bookIdKey = TypedDict(
    '_UserBookCompounduserId_bookIdKey',
    {
        'userId_bookId': '_UserBookCompounduserId_bookIdKeyInner',
    },
    total=True
)

UserBookWhereUniqueInput = Union[
    '_UserBookWhereUnique_id_Input',
    '_UserBookCompounduserId_bookIdKey',
]


class UserBookUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    status: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    book: 'BookUpdateOneWithoutRelationsInput'


class UserBookUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    status: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserBookUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserBookCreateWithoutRelationsInput']
    connect: List['UserBookWhereUniqueInput']
    connect_or_create: List['UserBookConnectOrCreateWithoutRelationsInput']
    set: List['UserBookWhereUniqueInput']
    disconnect: List['UserBookWhereUniqueInput']
    delete: List['UserBookWhereUniqueInput']

    # TODO
    # update: List['UserBookUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserBookUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserBookScalarWhereInput']
    # upsert: List['UserBookUpserteWithWhereUniqueWithoutRelationsInput']


class UserBookUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserBookCreateWithoutRelationsInput'
    connect: 'UserBookWhereUniqueInput'
    connect_or_create: 'UserBookConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserBookUpdateInput'
    # upsert: 'UserBookUpsertWithoutRelationsInput'


class UserBookUpsertInput(TypedDict):
    create: 'UserBookCreateInput'
    update: 'UserBookUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserBook_id_OrderByInput = TypedDict(
    '_UserBook_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserBook_userId_OrderByInput = TypedDict(
    '_UserBook_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserBook_bookId_OrderByInput = TypedDict(
    '_UserBook_bookId_OrderByInput',
    {
        'bookId': 'SortOrder',
    },
    total=True
)

_UserBook_status_OrderByInput = TypedDict(
    '_UserBook_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_UserBook_createdAt_OrderByInput = TypedDict(
    '_UserBook_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_UserBook_updatedAt_OrderByInput = TypedDict(
    '_UserBook_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_UserBook_RelevanceInner = TypedDict(
    '_UserBook_RelevanceInner',
    {
        'fields': 'List[UserBookScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserBook_RelevanceOrderByInput = TypedDict(
    '_UserBook_RelevanceOrderByInput',
    {
        '_relevance': '_UserBook_RelevanceInner',
    },
    total=True
)

UserBookOrderByInput = Union[
    '_UserBook_id_OrderByInput',
    '_UserBook_userId_OrderByInput',
    '_UserBook_bookId_OrderByInput',
    '_UserBook_status_OrderByInput',
    '_UserBook_createdAt_OrderByInput',
    '_UserBook_updatedAt_OrderByInput',
    '_UserBook_RelevanceOrderByInput',
]



# recursive UserBook types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserBookRelationFilter = TypedDict(
    'UserBookRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserBookListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserBookInclude(TypedDict, total=False):
    """UserBook relational arguments"""
    user: Union[bool, 'UserArgsFromUserBook']
    book: Union[bool, 'BookArgsFromUserBook']


    

class UserIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserBookRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive1']


class UserIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserBookRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive2']


class UserIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserBookRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive3']


class UserIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromUserBookRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive4']


class UserIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class UserArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyUserArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    parent: Union[bool, 'GenreArgsFromUserBookRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserBookRecursive1']
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive1']


class GenreIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    parent: Union[bool, 'GenreArgsFromUserBookRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserBookRecursive2']
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive2']


class GenreIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    parent: Union[bool, 'GenreArgsFromUserBookRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserBookRecursive3']
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive3']


class GenreIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    parent: Union[bool, 'GenreArgsFromUserBookRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromUserBookRecursive4']
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive4']


class GenreIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class GenreArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyGenreArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive1']


class AgeCategoryIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive2']


class AgeCategoryIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive3']


class AgeCategoryIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    books: Union[bool, 'FindManyBookArgsFromUserBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive4']


class AgeCategoryIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class AgeCategoryArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyAgeCategoryArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    genre: Union[bool, 'GenreArgsFromUserBookRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive1']


class BookIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    genre: Union[bool, 'GenreArgsFromUserBookRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive2']


class BookIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    genre: Union[bool, 'GenreArgsFromUserBookRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive3']


class BookIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    genre: Union[bool, 'GenreArgsFromUserBookRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromUserBookRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromUserBookRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromUserBookRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromUserBookRecursive4']


class BookIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class BookArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyBookArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive1']
    book: Union[bool, 'BookArgsFromUserBookRecursive1']


class UserBookIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive2']
    book: Union[bool, 'BookArgsFromUserBookRecursive2']


class UserBookIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive3']
    book: Union[bool, 'BookArgsFromUserBookRecursive3']


class UserBookIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive4']
    book: Union[bool, 'BookArgsFromUserBookRecursive4']


class UserBookIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class UserBookArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyUserBookArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive1']
    book: Union[bool, 'BookArgsFromUserBookRecursive1']


class VoteIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive2']
    book: Union[bool, 'BookArgsFromUserBookRecursive2']


class VoteIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive3']
    book: Union[bool, 'BookArgsFromUserBookRecursive3']


class VoteIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive4']
    book: Union[bool, 'BookArgsFromUserBookRecursive4']


class VoteIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class VoteArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyVoteArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive1']
    book: Union[bool, 'BookArgsFromUserBookRecursive1']


class ReadingProgressIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive2']
    book: Union[bool, 'BookArgsFromUserBookRecursive2']


class ReadingProgressIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive3']
    book: Union[bool, 'BookArgsFromUserBookRecursive3']


class ReadingProgressIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive4']
    book: Union[bool, 'BookArgsFromUserBookRecursive4']


class ReadingProgressIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class ReadingProgressArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyReadingProgressArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    genre: Union[bool, 'GenreArgsFromUserBookRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive1']
    book: Union[bool, 'BookArgsFromUserBookRecursive1']
    leader: Union[bool, 'UserArgsFromUserBookRecursive1']


class WeeklyResultIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    genre: Union[bool, 'GenreArgsFromUserBookRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive2']
    book: Union[bool, 'BookArgsFromUserBookRecursive2']
    leader: Union[bool, 'UserArgsFromUserBookRecursive2']


class WeeklyResultIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    genre: Union[bool, 'GenreArgsFromUserBookRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive3']
    book: Union[bool, 'BookArgsFromUserBookRecursive3']
    leader: Union[bool, 'UserArgsFromUserBookRecursive3']


class WeeklyResultIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    genre: Union[bool, 'GenreArgsFromUserBookRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromUserBookRecursive4']
    book: Union[bool, 'BookArgsFromUserBookRecursive4']
    leader: Union[bool, 'UserArgsFromUserBookRecursive4']


class WeeklyResultIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class WeeklyResultArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyWeeklyResultArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive1']


class NotificationIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive2']


class NotificationIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive3']


class NotificationIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    user: Union[bool, 'UserArgsFromUserBookRecursive4']


class NotificationIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class NotificationArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyNotificationArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    partner: Union[bool, 'PartnerArgsFromUserBookRecursive1']


class AdvertisementIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    partner: Union[bool, 'PartnerArgsFromUserBookRecursive2']


class AdvertisementIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    partner: Union[bool, 'PartnerArgsFromUserBookRecursive3']


class AdvertisementIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    partner: Union[bool, 'PartnerArgsFromUserBookRecursive4']


class AdvertisementIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class AdvertisementArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyAdvertisementArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromUserBook(TypedDict, total=False):
    """Relational arguments for UserBook"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserBookRecursive1']


class PartnerIncludeFromUserBookRecursive1(TypedDict, total=False):
    """Relational arguments for UserBook"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserBookRecursive2']


class PartnerIncludeFromUserBookRecursive2(TypedDict, total=False):
    """Relational arguments for UserBook"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserBookRecursive3']


class PartnerIncludeFromUserBookRecursive3(TypedDict, total=False):
    """Relational arguments for UserBook"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromUserBookRecursive4']


class PartnerIncludeFromUserBookRecursive4(TypedDict, total=False):
    """Relational arguments for UserBook"""

    

class PartnerArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    
    

class FindManyPartnerArgsFromUserBook(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromUserBookRecursive1(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromUserBookRecursive2(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromUserBookRecursive3(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromUserBookRecursive4(TypedDict, total=False):
    """Arguments for UserBook"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyUserBookArgs = FindManyUserBookArgsFromUserBook
FindFirstUserBookArgs = FindManyUserBookArgsFromUserBook


    

class UserBookWhereInput(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['UserBookWhereInputRecursive1', List['UserBookWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserBookWhereInputRecursive1']
    OR: List['UserBookWhereInputRecursive1']
    NOT: List['UserBookWhereInputRecursive1']


class UserBookWhereInputRecursive1(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['UserBookWhereInputRecursive2', List['UserBookWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserBookWhereInputRecursive2']
    OR: List['UserBookWhereInputRecursive2']
    NOT: List['UserBookWhereInputRecursive2']


class UserBookWhereInputRecursive2(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['UserBookWhereInputRecursive3', List['UserBookWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserBookWhereInputRecursive3']
    OR: List['UserBookWhereInputRecursive3']
    NOT: List['UserBookWhereInputRecursive3']


class UserBookWhereInputRecursive3(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['UserBookWhereInputRecursive4', List['UserBookWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserBookWhereInputRecursive4']
    OR: List['UserBookWhereInputRecursive4']
    NOT: List['UserBookWhereInputRecursive4']


class UserBookWhereInputRecursive4(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    status: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'



# aggregate UserBook types


    

class UserBookScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserBookScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserBookScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserBookScalarWhereWithAggregatesInputRecursive1']


class UserBookScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserBookScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserBookScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserBookScalarWhereWithAggregatesInputRecursive2']


class UserBookScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserBookScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserBookScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserBookScalarWhereWithAggregatesInputRecursive3']


class UserBookScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserBookScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserBookScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserBookScalarWhereWithAggregatesInputRecursive4']


class UserBookScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserBook arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserBookGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    bookId: _int
    status: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserBookSumAggregateOutput'
    _avg: 'UserBookAvgAggregateOutput'
    _min: 'UserBookMinAggregateOutput'
    _max: 'UserBookMaxAggregateOutput'
    _count: 'UserBookCountAggregateOutput'


class UserBookAvgAggregateOutput(TypedDict, total=False):
    """UserBook output for aggregating averages"""
    id: float
    userId: float
    bookId: float


class UserBookSumAggregateOutput(TypedDict, total=False):
    """UserBook output for aggregating sums"""
    id: _int
    userId: _int
    bookId: _int


class UserBookScalarAggregateOutput(TypedDict, total=False):
    """UserBook output including scalar fields"""
    id: _int
    userId: _int
    bookId: _int
    status: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserBookMinAggregateOutput = UserBookScalarAggregateOutput
UserBookMaxAggregateOutput = UserBookScalarAggregateOutput


class UserBookMaxAggregateInput(TypedDict, total=False):
    """UserBook input for aggregating by max"""
    id: bool
    userId: bool
    bookId: bool
    status: bool
    createdAt: bool
    updatedAt: bool


class UserBookMinAggregateInput(TypedDict, total=False):
    """UserBook input for aggregating by min"""
    id: bool
    userId: bool
    bookId: bool
    status: bool
    createdAt: bool
    updatedAt: bool


class UserBookNumberAggregateInput(TypedDict, total=False):
    """UserBook input for aggregating numbers"""
    id: bool
    userId: bool
    bookId: bool


UserBookAvgAggregateInput = UserBookNumberAggregateInput
UserBookSumAggregateInput = UserBookNumberAggregateInput


UserBookCountAggregateInput = TypedDict(
    'UserBookCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'bookId': bool,
        'status': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserBookCountAggregateOutput = TypedDict(
    'UserBookCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'bookId': int,
        'status': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserBookKeys = Literal[
    'id',
    'userId',
    'bookId',
    'status',
    'createdAt',
    'updatedAt',
    'user',
    'book',
]
UserBookScalarFieldKeys = Literal[
    'id',
    'userId',
    'bookId',
    'status',
    'createdAt',
    'updatedAt',
]
UserBookScalarFieldKeysT = TypeVar('UserBookScalarFieldKeysT', bound=UserBookScalarFieldKeys)

UserBookRelationalFieldKeys = Literal[
        'user',
        'book',
    ]

# Vote types

class VoteOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Vote create method"""
    id: _int
    userId: _int
    bookId: _int
    voteDate: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    book: 'BookCreateNestedWithoutRelationsInput'


class VoteCreateInput(VoteOptionalCreateInput):
    """Required arguments to the Vote create method"""
    weekNumber: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VoteOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Vote create method, without relations"""
    id: _int
    userId: _int
    bookId: _int
    voteDate: datetime.datetime


class VoteCreateWithoutRelationsInput(VoteOptionalCreateWithoutRelationsInput):
    """Required arguments to the Vote create method, without relations"""
    weekNumber: _int

class VoteConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'VoteCreateWithoutRelationsInput'
    where: 'VoteWhereUniqueInput'

class VoteCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VoteCreateWithoutRelationsInput'
    connect: 'VoteWhereUniqueInput'
    connect_or_create: 'VoteConnectOrCreateWithoutRelationsInput'


class VoteCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VoteCreateWithoutRelationsInput', List['VoteCreateWithoutRelationsInput']]
    connect: Union['VoteWhereUniqueInput', List['VoteWhereUniqueInput']]
    connect_or_create: Union['VoteConnectOrCreateWithoutRelationsInput', List['VoteConnectOrCreateWithoutRelationsInput']]

_VoteWhereUnique_id_Input = TypedDict(
    '_VoteWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_VoteCompounduserId_bookId_weekNumberKeyInner = TypedDict(
    '_VoteCompounduserId_bookId_weekNumberKeyInner',
    {
        'userId': '_int',
        'bookId': '_int',
        'weekNumber': '_int',
    },
    total=True
)

_VoteCompounduserId_bookId_weekNumberKey = TypedDict(
    '_VoteCompounduserId_bookId_weekNumberKey',
    {
        'userId_bookId_weekNumber': '_VoteCompounduserId_bookId_weekNumberKeyInner',
    },
    total=True
)

VoteWhereUniqueInput = Union[
    '_VoteWhereUnique_id_Input',
    '_VoteCompounduserId_bookId_weekNumberKey',
]


class VoteUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    voteDate: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    book: 'BookUpdateOneWithoutRelationsInput'


class VoteUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    voteDate: datetime.datetime


class VoteUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VoteCreateWithoutRelationsInput']
    connect: List['VoteWhereUniqueInput']
    connect_or_create: List['VoteConnectOrCreateWithoutRelationsInput']
    set: List['VoteWhereUniqueInput']
    disconnect: List['VoteWhereUniqueInput']
    delete: List['VoteWhereUniqueInput']

    # TODO
    # update: List['VoteUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VoteUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VoteScalarWhereInput']
    # upsert: List['VoteUpserteWithWhereUniqueWithoutRelationsInput']


class VoteUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VoteCreateWithoutRelationsInput'
    connect: 'VoteWhereUniqueInput'
    connect_or_create: 'VoteConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VoteUpdateInput'
    # upsert: 'VoteUpsertWithoutRelationsInput'


class VoteUpsertInput(TypedDict):
    create: 'VoteCreateInput'
    update: 'VoteUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Vote_id_OrderByInput = TypedDict(
    '_Vote_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Vote_userId_OrderByInput = TypedDict(
    '_Vote_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Vote_bookId_OrderByInput = TypedDict(
    '_Vote_bookId_OrderByInput',
    {
        'bookId': 'SortOrder',
    },
    total=True
)

_Vote_weekNumber_OrderByInput = TypedDict(
    '_Vote_weekNumber_OrderByInput',
    {
        'weekNumber': 'SortOrder',
    },
    total=True
)

_Vote_voteDate_OrderByInput = TypedDict(
    '_Vote_voteDate_OrderByInput',
    {
        'voteDate': 'SortOrder',
    },
    total=True
)

_Vote_RelevanceInner = TypedDict(
    '_Vote_RelevanceInner',
    {
        'fields': 'List[VoteScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Vote_RelevanceOrderByInput = TypedDict(
    '_Vote_RelevanceOrderByInput',
    {
        '_relevance': '_Vote_RelevanceInner',
    },
    total=True
)

VoteOrderByInput = Union[
    '_Vote_id_OrderByInput',
    '_Vote_userId_OrderByInput',
    '_Vote_bookId_OrderByInput',
    '_Vote_weekNumber_OrderByInput',
    '_Vote_voteDate_OrderByInput',
    '_Vote_RelevanceOrderByInput',
]



# recursive Vote types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VoteRelationFilter = TypedDict(
    'VoteRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VoteListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VoteInclude(TypedDict, total=False):
    """Vote relational arguments"""
    user: Union[bool, 'UserArgsFromVote']
    book: Union[bool, 'BookArgsFromVote']


    

class UserIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromVoteRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive1']


class UserIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromVoteRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive2']


class UserIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromVoteRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive3']


class UserIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromVoteRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive4']


class UserIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class UserArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyUserArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    parent: Union[bool, 'GenreArgsFromVoteRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromVoteRecursive1']
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive1']


class GenreIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    parent: Union[bool, 'GenreArgsFromVoteRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromVoteRecursive2']
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive2']


class GenreIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    parent: Union[bool, 'GenreArgsFromVoteRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromVoteRecursive3']
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive3']


class GenreIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    parent: Union[bool, 'GenreArgsFromVoteRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromVoteRecursive4']
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive4']


class GenreIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class GenreArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyGenreArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive1']


class AgeCategoryIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive2']


class AgeCategoryIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive3']


class AgeCategoryIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    books: Union[bool, 'FindManyBookArgsFromVoteRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive4']


class AgeCategoryIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class AgeCategoryArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyAgeCategoryArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    genre: Union[bool, 'GenreArgsFromVoteRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive1']


class BookIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    genre: Union[bool, 'GenreArgsFromVoteRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive2']


class BookIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    genre: Union[bool, 'GenreArgsFromVoteRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive3']


class BookIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    genre: Union[bool, 'GenreArgsFromVoteRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromVoteRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromVoteRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromVoteRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromVoteRecursive4']


class BookIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class BookArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyBookArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive1']
    book: Union[bool, 'BookArgsFromVoteRecursive1']


class UserBookIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive2']
    book: Union[bool, 'BookArgsFromVoteRecursive2']


class UserBookIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive3']
    book: Union[bool, 'BookArgsFromVoteRecursive3']


class UserBookIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive4']
    book: Union[bool, 'BookArgsFromVoteRecursive4']


class UserBookIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class UserBookArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyUserBookArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive1']
    book: Union[bool, 'BookArgsFromVoteRecursive1']


class VoteIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive2']
    book: Union[bool, 'BookArgsFromVoteRecursive2']


class VoteIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive3']
    book: Union[bool, 'BookArgsFromVoteRecursive3']


class VoteIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive4']
    book: Union[bool, 'BookArgsFromVoteRecursive4']


class VoteIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class VoteArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyVoteArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive1']
    book: Union[bool, 'BookArgsFromVoteRecursive1']


class ReadingProgressIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive2']
    book: Union[bool, 'BookArgsFromVoteRecursive2']


class ReadingProgressIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive3']
    book: Union[bool, 'BookArgsFromVoteRecursive3']


class ReadingProgressIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive4']
    book: Union[bool, 'BookArgsFromVoteRecursive4']


class ReadingProgressIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class ReadingProgressArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyReadingProgressArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    genre: Union[bool, 'GenreArgsFromVoteRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive1']
    book: Union[bool, 'BookArgsFromVoteRecursive1']
    leader: Union[bool, 'UserArgsFromVoteRecursive1']


class WeeklyResultIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    genre: Union[bool, 'GenreArgsFromVoteRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive2']
    book: Union[bool, 'BookArgsFromVoteRecursive2']
    leader: Union[bool, 'UserArgsFromVoteRecursive2']


class WeeklyResultIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    genre: Union[bool, 'GenreArgsFromVoteRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive3']
    book: Union[bool, 'BookArgsFromVoteRecursive3']
    leader: Union[bool, 'UserArgsFromVoteRecursive3']


class WeeklyResultIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    genre: Union[bool, 'GenreArgsFromVoteRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromVoteRecursive4']
    book: Union[bool, 'BookArgsFromVoteRecursive4']
    leader: Union[bool, 'UserArgsFromVoteRecursive4']


class WeeklyResultIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class WeeklyResultArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyWeeklyResultArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive1']


class NotificationIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive2']


class NotificationIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive3']


class NotificationIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    user: Union[bool, 'UserArgsFromVoteRecursive4']


class NotificationIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class NotificationArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyNotificationArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    partner: Union[bool, 'PartnerArgsFromVoteRecursive1']


class AdvertisementIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    partner: Union[bool, 'PartnerArgsFromVoteRecursive2']


class AdvertisementIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    partner: Union[bool, 'PartnerArgsFromVoteRecursive3']


class AdvertisementIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    partner: Union[bool, 'PartnerArgsFromVoteRecursive4']


class AdvertisementIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class AdvertisementArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyAdvertisementArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromVote(TypedDict, total=False):
    """Relational arguments for Vote"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromVoteRecursive1']


class PartnerIncludeFromVoteRecursive1(TypedDict, total=False):
    """Relational arguments for Vote"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromVoteRecursive2']


class PartnerIncludeFromVoteRecursive2(TypedDict, total=False):
    """Relational arguments for Vote"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromVoteRecursive3']


class PartnerIncludeFromVoteRecursive3(TypedDict, total=False):
    """Relational arguments for Vote"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromVoteRecursive4']


class PartnerIncludeFromVoteRecursive4(TypedDict, total=False):
    """Relational arguments for Vote"""

    

class PartnerArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    
    

class FindManyPartnerArgsFromVote(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromVoteRecursive1(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromVoteRecursive2(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromVoteRecursive3(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromVoteRecursive4(TypedDict, total=False):
    """Arguments for Vote"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyVoteArgs = FindManyVoteArgsFromVote
FindFirstVoteArgs = FindManyVoteArgsFromVote


    

class VoteWhereInput(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['VoteWhereInputRecursive1', List['VoteWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VoteWhereInputRecursive1']
    OR: List['VoteWhereInputRecursive1']
    NOT: List['VoteWhereInputRecursive1']


class VoteWhereInputRecursive1(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['VoteWhereInputRecursive2', List['VoteWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VoteWhereInputRecursive2']
    OR: List['VoteWhereInputRecursive2']
    NOT: List['VoteWhereInputRecursive2']


class VoteWhereInputRecursive2(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['VoteWhereInputRecursive3', List['VoteWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VoteWhereInputRecursive3']
    OR: List['VoteWhereInputRecursive3']
    NOT: List['VoteWhereInputRecursive3']


class VoteWhereInputRecursive3(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['VoteWhereInputRecursive4', List['VoteWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VoteWhereInputRecursive4']
    OR: List['VoteWhereInputRecursive4']
    NOT: List['VoteWhereInputRecursive4']


class VoteWhereInputRecursive4(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'



# aggregate Vote types


    

class VoteScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VoteScalarWhereWithAggregatesInputRecursive1']
    OR: List['VoteScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VoteScalarWhereWithAggregatesInputRecursive1']


class VoteScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VoteScalarWhereWithAggregatesInputRecursive2']
    OR: List['VoteScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VoteScalarWhereWithAggregatesInputRecursive2']


class VoteScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VoteScalarWhereWithAggregatesInputRecursive3']
    OR: List['VoteScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VoteScalarWhereWithAggregatesInputRecursive3']


class VoteScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VoteScalarWhereWithAggregatesInputRecursive4']
    OR: List['VoteScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VoteScalarWhereWithAggregatesInputRecursive4']


class VoteScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Vote arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    voteDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VoteGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int
    voteDate: datetime.datetime
    _sum: 'VoteSumAggregateOutput'
    _avg: 'VoteAvgAggregateOutput'
    _min: 'VoteMinAggregateOutput'
    _max: 'VoteMaxAggregateOutput'
    _count: 'VoteCountAggregateOutput'


class VoteAvgAggregateOutput(TypedDict, total=False):
    """Vote output for aggregating averages"""
    id: float
    userId: float
    bookId: float
    weekNumber: float


class VoteSumAggregateOutput(TypedDict, total=False):
    """Vote output for aggregating sums"""
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int


class VoteScalarAggregateOutput(TypedDict, total=False):
    """Vote output including scalar fields"""
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int
    voteDate: datetime.datetime


VoteMinAggregateOutput = VoteScalarAggregateOutput
VoteMaxAggregateOutput = VoteScalarAggregateOutput


class VoteMaxAggregateInput(TypedDict, total=False):
    """Vote input for aggregating by max"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool
    voteDate: bool


class VoteMinAggregateInput(TypedDict, total=False):
    """Vote input for aggregating by min"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool
    voteDate: bool


class VoteNumberAggregateInput(TypedDict, total=False):
    """Vote input for aggregating numbers"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool


VoteAvgAggregateInput = VoteNumberAggregateInput
VoteSumAggregateInput = VoteNumberAggregateInput


VoteCountAggregateInput = TypedDict(
    'VoteCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'bookId': bool,
        'weekNumber': bool,
        'voteDate': bool,
        '_all': bool,
    },
    total=False,
)

VoteCountAggregateOutput = TypedDict(
    'VoteCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'bookId': int,
        'weekNumber': int,
        'voteDate': int,
        '_all': int,
    },
    total=False,
)


VoteKeys = Literal[
    'id',
    'userId',
    'bookId',
    'weekNumber',
    'voteDate',
    'user',
    'book',
]
VoteScalarFieldKeys = Literal[
    'id',
    'userId',
    'bookId',
    'weekNumber',
    'voteDate',
]
VoteScalarFieldKeysT = TypeVar('VoteScalarFieldKeysT', bound=VoteScalarFieldKeys)

VoteRelationalFieldKeys = Literal[
        'user',
        'book',
    ]

# ReadingProgress types

class ReadingProgressOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ReadingProgress create method"""
    id: _int
    userId: _int
    bookId: _int
    marks: _int
    progressDate: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    book: 'BookCreateNestedWithoutRelationsInput'


class ReadingProgressCreateInput(ReadingProgressOptionalCreateInput):
    """Required arguments to the ReadingProgress create method"""
    weekNumber: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ReadingProgressOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ReadingProgress create method, without relations"""
    id: _int
    userId: _int
    bookId: _int
    marks: _int
    progressDate: datetime.datetime


class ReadingProgressCreateWithoutRelationsInput(ReadingProgressOptionalCreateWithoutRelationsInput):
    """Required arguments to the ReadingProgress create method, without relations"""
    weekNumber: _int

class ReadingProgressConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ReadingProgressCreateWithoutRelationsInput'
    where: 'ReadingProgressWhereUniqueInput'

class ReadingProgressCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ReadingProgressCreateWithoutRelationsInput'
    connect: 'ReadingProgressWhereUniqueInput'
    connect_or_create: 'ReadingProgressConnectOrCreateWithoutRelationsInput'


class ReadingProgressCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ReadingProgressCreateWithoutRelationsInput', List['ReadingProgressCreateWithoutRelationsInput']]
    connect: Union['ReadingProgressWhereUniqueInput', List['ReadingProgressWhereUniqueInput']]
    connect_or_create: Union['ReadingProgressConnectOrCreateWithoutRelationsInput', List['ReadingProgressConnectOrCreateWithoutRelationsInput']]

_ReadingProgressWhereUnique_id_Input = TypedDict(
    '_ReadingProgressWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_ReadingProgressCompounduserId_bookId_weekNumberKeyInner = TypedDict(
    '_ReadingProgressCompounduserId_bookId_weekNumberKeyInner',
    {
        'userId': '_int',
        'bookId': '_int',
        'weekNumber': '_int',
    },
    total=True
)

_ReadingProgressCompounduserId_bookId_weekNumberKey = TypedDict(
    '_ReadingProgressCompounduserId_bookId_weekNumberKey',
    {
        'userId_bookId_weekNumber': '_ReadingProgressCompounduserId_bookId_weekNumberKeyInner',
    },
    total=True
)

ReadingProgressWhereUniqueInput = Union[
    '_ReadingProgressWhereUnique_id_Input',
    '_ReadingProgressCompounduserId_bookId_weekNumberKey',
]


class ReadingProgressUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    marks: Union[AtomicIntInput, _int]
    progressDate: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    book: 'BookUpdateOneWithoutRelationsInput'


class ReadingProgressUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    marks: Union[AtomicIntInput, _int]
    progressDate: datetime.datetime


class ReadingProgressUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ReadingProgressCreateWithoutRelationsInput']
    connect: List['ReadingProgressWhereUniqueInput']
    connect_or_create: List['ReadingProgressConnectOrCreateWithoutRelationsInput']
    set: List['ReadingProgressWhereUniqueInput']
    disconnect: List['ReadingProgressWhereUniqueInput']
    delete: List['ReadingProgressWhereUniqueInput']

    # TODO
    # update: List['ReadingProgressUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ReadingProgressUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ReadingProgressScalarWhereInput']
    # upsert: List['ReadingProgressUpserteWithWhereUniqueWithoutRelationsInput']


class ReadingProgressUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ReadingProgressCreateWithoutRelationsInput'
    connect: 'ReadingProgressWhereUniqueInput'
    connect_or_create: 'ReadingProgressConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ReadingProgressUpdateInput'
    # upsert: 'ReadingProgressUpsertWithoutRelationsInput'


class ReadingProgressUpsertInput(TypedDict):
    create: 'ReadingProgressCreateInput'
    update: 'ReadingProgressUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ReadingProgress_id_OrderByInput = TypedDict(
    '_ReadingProgress_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ReadingProgress_userId_OrderByInput = TypedDict(
    '_ReadingProgress_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_ReadingProgress_bookId_OrderByInput = TypedDict(
    '_ReadingProgress_bookId_OrderByInput',
    {
        'bookId': 'SortOrder',
    },
    total=True
)

_ReadingProgress_weekNumber_OrderByInput = TypedDict(
    '_ReadingProgress_weekNumber_OrderByInput',
    {
        'weekNumber': 'SortOrder',
    },
    total=True
)

_ReadingProgress_marks_OrderByInput = TypedDict(
    '_ReadingProgress_marks_OrderByInput',
    {
        'marks': 'SortOrder',
    },
    total=True
)

_ReadingProgress_progressDate_OrderByInput = TypedDict(
    '_ReadingProgress_progressDate_OrderByInput',
    {
        'progressDate': 'SortOrder',
    },
    total=True
)

_ReadingProgress_RelevanceInner = TypedDict(
    '_ReadingProgress_RelevanceInner',
    {
        'fields': 'List[ReadingProgressScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ReadingProgress_RelevanceOrderByInput = TypedDict(
    '_ReadingProgress_RelevanceOrderByInput',
    {
        '_relevance': '_ReadingProgress_RelevanceInner',
    },
    total=True
)

ReadingProgressOrderByInput = Union[
    '_ReadingProgress_id_OrderByInput',
    '_ReadingProgress_userId_OrderByInput',
    '_ReadingProgress_bookId_OrderByInput',
    '_ReadingProgress_weekNumber_OrderByInput',
    '_ReadingProgress_marks_OrderByInput',
    '_ReadingProgress_progressDate_OrderByInput',
    '_ReadingProgress_RelevanceOrderByInput',
]



# recursive ReadingProgress types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ReadingProgressRelationFilter = TypedDict(
    'ReadingProgressRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ReadingProgressListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ReadingProgressInclude(TypedDict, total=False):
    """ReadingProgress relational arguments"""
    user: Union[bool, 'UserArgsFromReadingProgress']
    book: Union[bool, 'BookArgsFromReadingProgress']


    

class UserIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromReadingProgressRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive1']


class UserIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromReadingProgressRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive2']


class UserIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromReadingProgressRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive3']


class UserIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromReadingProgressRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive4']


class UserIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class UserArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyUserArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    parent: Union[bool, 'GenreArgsFromReadingProgressRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromReadingProgressRecursive1']
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive1']


class GenreIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    parent: Union[bool, 'GenreArgsFromReadingProgressRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromReadingProgressRecursive2']
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive2']


class GenreIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    parent: Union[bool, 'GenreArgsFromReadingProgressRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromReadingProgressRecursive3']
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive3']


class GenreIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    parent: Union[bool, 'GenreArgsFromReadingProgressRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromReadingProgressRecursive4']
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive4']


class GenreIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class GenreArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyGenreArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive1']


class AgeCategoryIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive2']


class AgeCategoryIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive3']


class AgeCategoryIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    books: Union[bool, 'FindManyBookArgsFromReadingProgressRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive4']


class AgeCategoryIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class AgeCategoryArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyAgeCategoryArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive1']


class BookIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive2']


class BookIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive3']


class BookIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromReadingProgressRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromReadingProgressRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromReadingProgressRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromReadingProgressRecursive4']


class BookIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class BookArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyBookArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive1']


class UserBookIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive2']


class UserBookIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive3']


class UserBookIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive4']


class UserBookIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class UserBookArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyUserBookArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive1']


class VoteIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive2']


class VoteIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive3']


class VoteIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive4']


class VoteIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class VoteArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyVoteArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive1']


class ReadingProgressIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive2']


class ReadingProgressIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive3']


class ReadingProgressIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive4']


class ReadingProgressIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class ReadingProgressArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyReadingProgressArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive1']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive1']
    leader: Union[bool, 'UserArgsFromReadingProgressRecursive1']


class WeeklyResultIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive2']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive2']
    leader: Union[bool, 'UserArgsFromReadingProgressRecursive2']


class WeeklyResultIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive3']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive3']
    leader: Union[bool, 'UserArgsFromReadingProgressRecursive3']


class WeeklyResultIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    genre: Union[bool, 'GenreArgsFromReadingProgressRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromReadingProgressRecursive4']
    book: Union[bool, 'BookArgsFromReadingProgressRecursive4']
    leader: Union[bool, 'UserArgsFromReadingProgressRecursive4']


class WeeklyResultIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class WeeklyResultArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyWeeklyResultArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive1']


class NotificationIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive2']


class NotificationIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive3']


class NotificationIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    user: Union[bool, 'UserArgsFromReadingProgressRecursive4']


class NotificationIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class NotificationArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyNotificationArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    partner: Union[bool, 'PartnerArgsFromReadingProgressRecursive1']


class AdvertisementIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    partner: Union[bool, 'PartnerArgsFromReadingProgressRecursive2']


class AdvertisementIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    partner: Union[bool, 'PartnerArgsFromReadingProgressRecursive3']


class AdvertisementIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    partner: Union[bool, 'PartnerArgsFromReadingProgressRecursive4']


class AdvertisementIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class AdvertisementArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyAdvertisementArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromReadingProgress(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromReadingProgressRecursive1']


class PartnerIncludeFromReadingProgressRecursive1(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromReadingProgressRecursive2']


class PartnerIncludeFromReadingProgressRecursive2(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromReadingProgressRecursive3']


class PartnerIncludeFromReadingProgressRecursive3(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromReadingProgressRecursive4']


class PartnerIncludeFromReadingProgressRecursive4(TypedDict, total=False):
    """Relational arguments for ReadingProgress"""

    

class PartnerArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    
    

class FindManyPartnerArgsFromReadingProgress(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromReadingProgressRecursive1(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromReadingProgressRecursive2(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromReadingProgressRecursive3(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromReadingProgressRecursive4(TypedDict, total=False):
    """Arguments for ReadingProgress"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyReadingProgressArgs = FindManyReadingProgressArgsFromReadingProgress
FindFirstReadingProgressArgs = FindManyReadingProgressArgsFromReadingProgress


    

class ReadingProgressWhereInput(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    marks: Union[_int, 'types.IntFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['ReadingProgressWhereInputRecursive1', List['ReadingProgressWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ReadingProgressWhereInputRecursive1']
    OR: List['ReadingProgressWhereInputRecursive1']
    NOT: List['ReadingProgressWhereInputRecursive1']


class ReadingProgressWhereInputRecursive1(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    marks: Union[_int, 'types.IntFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['ReadingProgressWhereInputRecursive2', List['ReadingProgressWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ReadingProgressWhereInputRecursive2']
    OR: List['ReadingProgressWhereInputRecursive2']
    NOT: List['ReadingProgressWhereInputRecursive2']


class ReadingProgressWhereInputRecursive2(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    marks: Union[_int, 'types.IntFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['ReadingProgressWhereInputRecursive3', List['ReadingProgressWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ReadingProgressWhereInputRecursive3']
    OR: List['ReadingProgressWhereInputRecursive3']
    NOT: List['ReadingProgressWhereInputRecursive3']


class ReadingProgressWhereInputRecursive3(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    marks: Union[_int, 'types.IntFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'

    # should be noted that AND and NOT should be Union['ReadingProgressWhereInputRecursive4', List['ReadingProgressWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ReadingProgressWhereInputRecursive4']
    OR: List['ReadingProgressWhereInputRecursive4']
    NOT: List['ReadingProgressWhereInputRecursive4']


class ReadingProgressWhereInputRecursive4(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    marks: Union[_int, 'types.IntFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    book: 'BookRelationFilter'



# aggregate ReadingProgress types


    

class ReadingProgressScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    marks: Union[_int, 'types.IntWithAggregatesFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReadingProgressScalarWhereWithAggregatesInputRecursive1']
    OR: List['ReadingProgressScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ReadingProgressScalarWhereWithAggregatesInputRecursive1']


class ReadingProgressScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    marks: Union[_int, 'types.IntWithAggregatesFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReadingProgressScalarWhereWithAggregatesInputRecursive2']
    OR: List['ReadingProgressScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ReadingProgressScalarWhereWithAggregatesInputRecursive2']


class ReadingProgressScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    marks: Union[_int, 'types.IntWithAggregatesFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReadingProgressScalarWhereWithAggregatesInputRecursive3']
    OR: List['ReadingProgressScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ReadingProgressScalarWhereWithAggregatesInputRecursive3']


class ReadingProgressScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    marks: Union[_int, 'types.IntWithAggregatesFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ReadingProgressScalarWhereWithAggregatesInputRecursive4']
    OR: List['ReadingProgressScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ReadingProgressScalarWhereWithAggregatesInputRecursive4']


class ReadingProgressScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ReadingProgress arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    marks: Union[_int, 'types.IntWithAggregatesFilter']
    progressDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ReadingProgressGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int
    marks: _int
    progressDate: datetime.datetime
    _sum: 'ReadingProgressSumAggregateOutput'
    _avg: 'ReadingProgressAvgAggregateOutput'
    _min: 'ReadingProgressMinAggregateOutput'
    _max: 'ReadingProgressMaxAggregateOutput'
    _count: 'ReadingProgressCountAggregateOutput'


class ReadingProgressAvgAggregateOutput(TypedDict, total=False):
    """ReadingProgress output for aggregating averages"""
    id: float
    userId: float
    bookId: float
    weekNumber: float
    marks: float


class ReadingProgressSumAggregateOutput(TypedDict, total=False):
    """ReadingProgress output for aggregating sums"""
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int
    marks: _int


class ReadingProgressScalarAggregateOutput(TypedDict, total=False):
    """ReadingProgress output including scalar fields"""
    id: _int
    userId: _int
    bookId: _int
    weekNumber: _int
    marks: _int
    progressDate: datetime.datetime


ReadingProgressMinAggregateOutput = ReadingProgressScalarAggregateOutput
ReadingProgressMaxAggregateOutput = ReadingProgressScalarAggregateOutput


class ReadingProgressMaxAggregateInput(TypedDict, total=False):
    """ReadingProgress input for aggregating by max"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool
    marks: bool
    progressDate: bool


class ReadingProgressMinAggregateInput(TypedDict, total=False):
    """ReadingProgress input for aggregating by min"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool
    marks: bool
    progressDate: bool


class ReadingProgressNumberAggregateInput(TypedDict, total=False):
    """ReadingProgress input for aggregating numbers"""
    id: bool
    userId: bool
    bookId: bool
    weekNumber: bool
    marks: bool


ReadingProgressAvgAggregateInput = ReadingProgressNumberAggregateInput
ReadingProgressSumAggregateInput = ReadingProgressNumberAggregateInput


ReadingProgressCountAggregateInput = TypedDict(
    'ReadingProgressCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'bookId': bool,
        'weekNumber': bool,
        'marks': bool,
        'progressDate': bool,
        '_all': bool,
    },
    total=False,
)

ReadingProgressCountAggregateOutput = TypedDict(
    'ReadingProgressCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'bookId': int,
        'weekNumber': int,
        'marks': int,
        'progressDate': int,
        '_all': int,
    },
    total=False,
)


ReadingProgressKeys = Literal[
    'id',
    'userId',
    'bookId',
    'weekNumber',
    'marks',
    'progressDate',
    'user',
    'book',
]
ReadingProgressScalarFieldKeys = Literal[
    'id',
    'userId',
    'bookId',
    'weekNumber',
    'marks',
    'progressDate',
]
ReadingProgressScalarFieldKeysT = TypeVar('ReadingProgressScalarFieldKeysT', bound=ReadingProgressScalarFieldKeys)

ReadingProgressRelationalFieldKeys = Literal[
        'user',
        'book',
    ]

# WeeklyResult types

class WeeklyResultOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the WeeklyResult create method"""
    id: _int
    genreId: Optional[_str]
    ageCategoryId: _int
    bookId: _int
    leaderUserId: _int
    genre: 'GenreCreateNestedWithoutRelationsInput'
    ageCategory: 'AgeCategoryCreateNestedWithoutRelationsInput'
    book: 'BookCreateNestedWithoutRelationsInput'
    leader: 'UserCreateNestedWithoutRelationsInput'


class WeeklyResultCreateInput(WeeklyResultOptionalCreateInput):
    """Required arguments to the WeeklyResult create method"""
    weekNumber: _int
    totalMarks: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class WeeklyResultOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the WeeklyResult create method, without relations"""
    id: _int
    genreId: Optional[_str]
    ageCategoryId: _int
    bookId: _int
    leaderUserId: _int


class WeeklyResultCreateWithoutRelationsInput(WeeklyResultOptionalCreateWithoutRelationsInput):
    """Required arguments to the WeeklyResult create method, without relations"""
    weekNumber: _int
    totalMarks: _int

class WeeklyResultConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'WeeklyResultCreateWithoutRelationsInput'
    where: 'WeeklyResultWhereUniqueInput'

class WeeklyResultCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'WeeklyResultCreateWithoutRelationsInput'
    connect: 'WeeklyResultWhereUniqueInput'
    connect_or_create: 'WeeklyResultConnectOrCreateWithoutRelationsInput'


class WeeklyResultCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['WeeklyResultCreateWithoutRelationsInput', List['WeeklyResultCreateWithoutRelationsInput']]
    connect: Union['WeeklyResultWhereUniqueInput', List['WeeklyResultWhereUniqueInput']]
    connect_or_create: Union['WeeklyResultConnectOrCreateWithoutRelationsInput', List['WeeklyResultConnectOrCreateWithoutRelationsInput']]

_WeeklyResultWhereUnique_id_Input = TypedDict(
    '_WeeklyResultWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKeyInner = TypedDict(
    '_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKeyInner',
    {
        'weekNumber': '_int',
        'genreId': '_str',
        'ageCategoryId': '_int',
    },
    total=True
)

_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKey = TypedDict(
    '_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKey',
    {
        'weekNumber_genreId_ageCategoryId': '_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKeyInner',
    },
    total=True
)

WeeklyResultWhereUniqueInput = Union[
    '_WeeklyResultWhereUnique_id_Input',
    '_WeeklyResultCompoundweekNumber_genreId_ageCategoryIdKey',
]


class WeeklyResultUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    totalMarks: Union[AtomicIntInput, _int]
    genre: 'GenreUpdateOneWithoutRelationsInput'
    ageCategory: 'AgeCategoryUpdateOneWithoutRelationsInput'
    book: 'BookUpdateOneWithoutRelationsInput'
    leader: 'UserUpdateOneWithoutRelationsInput'


class WeeklyResultUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    weekNumber: Union[AtomicIntInput, _int]
    totalMarks: Union[AtomicIntInput, _int]


class WeeklyResultUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['WeeklyResultCreateWithoutRelationsInput']
    connect: List['WeeklyResultWhereUniqueInput']
    connect_or_create: List['WeeklyResultConnectOrCreateWithoutRelationsInput']
    set: List['WeeklyResultWhereUniqueInput']
    disconnect: List['WeeklyResultWhereUniqueInput']
    delete: List['WeeklyResultWhereUniqueInput']

    # TODO
    # update: List['WeeklyResultUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['WeeklyResultUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['WeeklyResultScalarWhereInput']
    # upsert: List['WeeklyResultUpserteWithWhereUniqueWithoutRelationsInput']


class WeeklyResultUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'WeeklyResultCreateWithoutRelationsInput'
    connect: 'WeeklyResultWhereUniqueInput'
    connect_or_create: 'WeeklyResultConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'WeeklyResultUpdateInput'
    # upsert: 'WeeklyResultUpsertWithoutRelationsInput'


class WeeklyResultUpsertInput(TypedDict):
    create: 'WeeklyResultCreateInput'
    update: 'WeeklyResultUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_WeeklyResult_id_OrderByInput = TypedDict(
    '_WeeklyResult_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_WeeklyResult_weekNumber_OrderByInput = TypedDict(
    '_WeeklyResult_weekNumber_OrderByInput',
    {
        'weekNumber': 'SortOrder',
    },
    total=True
)

_WeeklyResult_genreId_OrderByInput = TypedDict(
    '_WeeklyResult_genreId_OrderByInput',
    {
        'genreId': 'SortOrder',
    },
    total=True
)

_WeeklyResult_ageCategoryId_OrderByInput = TypedDict(
    '_WeeklyResult_ageCategoryId_OrderByInput',
    {
        'ageCategoryId': 'SortOrder',
    },
    total=True
)

_WeeklyResult_bookId_OrderByInput = TypedDict(
    '_WeeklyResult_bookId_OrderByInput',
    {
        'bookId': 'SortOrder',
    },
    total=True
)

_WeeklyResult_leaderUserId_OrderByInput = TypedDict(
    '_WeeklyResult_leaderUserId_OrderByInput',
    {
        'leaderUserId': 'SortOrder',
    },
    total=True
)

_WeeklyResult_totalMarks_OrderByInput = TypedDict(
    '_WeeklyResult_totalMarks_OrderByInput',
    {
        'totalMarks': 'SortOrder',
    },
    total=True
)

_WeeklyResult_RelevanceInner = TypedDict(
    '_WeeklyResult_RelevanceInner',
    {
        'fields': 'List[WeeklyResultScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_WeeklyResult_RelevanceOrderByInput = TypedDict(
    '_WeeklyResult_RelevanceOrderByInput',
    {
        '_relevance': '_WeeklyResult_RelevanceInner',
    },
    total=True
)

WeeklyResultOrderByInput = Union[
    '_WeeklyResult_id_OrderByInput',
    '_WeeklyResult_weekNumber_OrderByInput',
    '_WeeklyResult_genreId_OrderByInput',
    '_WeeklyResult_ageCategoryId_OrderByInput',
    '_WeeklyResult_bookId_OrderByInput',
    '_WeeklyResult_leaderUserId_OrderByInput',
    '_WeeklyResult_totalMarks_OrderByInput',
    '_WeeklyResult_RelevanceOrderByInput',
]



# recursive WeeklyResult types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

WeeklyResultRelationFilter = TypedDict(
    'WeeklyResultRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class WeeklyResultListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class WeeklyResultInclude(TypedDict, total=False):
    """WeeklyResult relational arguments"""
    genre: Union[bool, 'GenreArgsFromWeeklyResult']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResult']
    book: Union[bool, 'BookArgsFromWeeklyResult']
    leader: Union[bool, 'UserArgsFromWeeklyResult']


    

class UserIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromWeeklyResultRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive1']


class UserIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromWeeklyResultRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive2']


class UserIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromWeeklyResultRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive3']


class UserIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromWeeklyResultRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive4']


class UserIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class UserArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyUserArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    parent: Union[bool, 'GenreArgsFromWeeklyResultRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromWeeklyResultRecursive1']
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive1']


class GenreIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    parent: Union[bool, 'GenreArgsFromWeeklyResultRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromWeeklyResultRecursive2']
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive2']


class GenreIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    parent: Union[bool, 'GenreArgsFromWeeklyResultRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromWeeklyResultRecursive3']
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive3']


class GenreIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    parent: Union[bool, 'GenreArgsFromWeeklyResultRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromWeeklyResultRecursive4']
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive4']


class GenreIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class GenreArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyGenreArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive1']


class AgeCategoryIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive2']


class AgeCategoryIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive3']


class AgeCategoryIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    books: Union[bool, 'FindManyBookArgsFromWeeklyResultRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive4']


class AgeCategoryIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class AgeCategoryArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyAgeCategoryArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive1']


class BookIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive2']


class BookIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive3']


class BookIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromWeeklyResultRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromWeeklyResultRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromWeeklyResultRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromWeeklyResultRecursive4']


class BookIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class BookArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyBookArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive1']


class UserBookIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive2']


class UserBookIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive3']


class UserBookIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive4']


class UserBookIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class UserBookArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyUserBookArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive1']


class VoteIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive2']


class VoteIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive3']


class VoteIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive4']


class VoteIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class VoteArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyVoteArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive1']


class ReadingProgressIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive2']


class ReadingProgressIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive3']


class ReadingProgressIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive4']


class ReadingProgressIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class ReadingProgressArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyReadingProgressArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive1']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive1']
    leader: Union[bool, 'UserArgsFromWeeklyResultRecursive1']


class WeeklyResultIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive2']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive2']
    leader: Union[bool, 'UserArgsFromWeeklyResultRecursive2']


class WeeklyResultIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive3']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive3']
    leader: Union[bool, 'UserArgsFromWeeklyResultRecursive3']


class WeeklyResultIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    genre: Union[bool, 'GenreArgsFromWeeklyResultRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromWeeklyResultRecursive4']
    book: Union[bool, 'BookArgsFromWeeklyResultRecursive4']
    leader: Union[bool, 'UserArgsFromWeeklyResultRecursive4']


class WeeklyResultIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class WeeklyResultArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyWeeklyResultArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive1']


class NotificationIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive2']


class NotificationIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive3']


class NotificationIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    user: Union[bool, 'UserArgsFromWeeklyResultRecursive4']


class NotificationIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class NotificationArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyNotificationArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    partner: Union[bool, 'PartnerArgsFromWeeklyResultRecursive1']


class AdvertisementIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    partner: Union[bool, 'PartnerArgsFromWeeklyResultRecursive2']


class AdvertisementIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    partner: Union[bool, 'PartnerArgsFromWeeklyResultRecursive3']


class AdvertisementIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    partner: Union[bool, 'PartnerArgsFromWeeklyResultRecursive4']


class AdvertisementIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class AdvertisementArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyAdvertisementArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromWeeklyResult(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromWeeklyResultRecursive1']


class PartnerIncludeFromWeeklyResultRecursive1(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromWeeklyResultRecursive2']


class PartnerIncludeFromWeeklyResultRecursive2(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromWeeklyResultRecursive3']


class PartnerIncludeFromWeeklyResultRecursive3(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromWeeklyResultRecursive4']


class PartnerIncludeFromWeeklyResultRecursive4(TypedDict, total=False):
    """Relational arguments for WeeklyResult"""

    

class PartnerArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    
    

class FindManyPartnerArgsFromWeeklyResult(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromWeeklyResultRecursive1(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromWeeklyResultRecursive2(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromWeeklyResultRecursive3(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromWeeklyResultRecursive4(TypedDict, total=False):
    """Arguments for WeeklyResult"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyWeeklyResultArgs = FindManyWeeklyResultArgsFromWeeklyResult
FindFirstWeeklyResultArgs = FindManyWeeklyResultArgsFromWeeklyResult


    

class WeeklyResultWhereInput(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    genreId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    leaderUserId: Union[_int, 'types.IntFilter']
    totalMarks: Union[_int, 'types.IntFilter']
    genre: 'GenreRelationFilter'
    ageCategory: 'AgeCategoryRelationFilter'
    book: 'BookRelationFilter'
    leader: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WeeklyResultWhereInputRecursive1', List['WeeklyResultWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['WeeklyResultWhereInputRecursive1']
    OR: List['WeeklyResultWhereInputRecursive1']
    NOT: List['WeeklyResultWhereInputRecursive1']


class WeeklyResultWhereInputRecursive1(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    genreId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    leaderUserId: Union[_int, 'types.IntFilter']
    totalMarks: Union[_int, 'types.IntFilter']
    genre: 'GenreRelationFilter'
    ageCategory: 'AgeCategoryRelationFilter'
    book: 'BookRelationFilter'
    leader: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WeeklyResultWhereInputRecursive2', List['WeeklyResultWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['WeeklyResultWhereInputRecursive2']
    OR: List['WeeklyResultWhereInputRecursive2']
    NOT: List['WeeklyResultWhereInputRecursive2']


class WeeklyResultWhereInputRecursive2(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    genreId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    leaderUserId: Union[_int, 'types.IntFilter']
    totalMarks: Union[_int, 'types.IntFilter']
    genre: 'GenreRelationFilter'
    ageCategory: 'AgeCategoryRelationFilter'
    book: 'BookRelationFilter'
    leader: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WeeklyResultWhereInputRecursive3', List['WeeklyResultWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['WeeklyResultWhereInputRecursive3']
    OR: List['WeeklyResultWhereInputRecursive3']
    NOT: List['WeeklyResultWhereInputRecursive3']


class WeeklyResultWhereInputRecursive3(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    genreId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    leaderUserId: Union[_int, 'types.IntFilter']
    totalMarks: Union[_int, 'types.IntFilter']
    genre: 'GenreRelationFilter'
    ageCategory: 'AgeCategoryRelationFilter'
    book: 'BookRelationFilter'
    leader: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['WeeklyResultWhereInputRecursive4', List['WeeklyResultWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['WeeklyResultWhereInputRecursive4']
    OR: List['WeeklyResultWhereInputRecursive4']
    NOT: List['WeeklyResultWhereInputRecursive4']


class WeeklyResultWhereInputRecursive4(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    weekNumber: Union[_int, 'types.IntFilter']
    genreId: Union[None, _str, 'types.StringFilter']
    ageCategoryId: Union[_int, 'types.IntFilter']
    bookId: Union[_int, 'types.IntFilter']
    leaderUserId: Union[_int, 'types.IntFilter']
    totalMarks: Union[_int, 'types.IntFilter']
    genre: 'GenreRelationFilter'
    ageCategory: 'AgeCategoryRelationFilter'
    book: 'BookRelationFilter'
    leader: 'UserRelationFilter'



# aggregate WeeklyResult types


    

class WeeklyResultScalarWhereWithAggregatesInput(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    leaderUserId: Union[_int, 'types.IntWithAggregatesFilter']
    totalMarks: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['WeeklyResultScalarWhereWithAggregatesInputRecursive1']
    OR: List['WeeklyResultScalarWhereWithAggregatesInputRecursive1']
    NOT: List['WeeklyResultScalarWhereWithAggregatesInputRecursive1']


class WeeklyResultScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    leaderUserId: Union[_int, 'types.IntWithAggregatesFilter']
    totalMarks: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['WeeklyResultScalarWhereWithAggregatesInputRecursive2']
    OR: List['WeeklyResultScalarWhereWithAggregatesInputRecursive2']
    NOT: List['WeeklyResultScalarWhereWithAggregatesInputRecursive2']


class WeeklyResultScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    leaderUserId: Union[_int, 'types.IntWithAggregatesFilter']
    totalMarks: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['WeeklyResultScalarWhereWithAggregatesInputRecursive3']
    OR: List['WeeklyResultScalarWhereWithAggregatesInputRecursive3']
    NOT: List['WeeklyResultScalarWhereWithAggregatesInputRecursive3']


class WeeklyResultScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    leaderUserId: Union[_int, 'types.IntWithAggregatesFilter']
    totalMarks: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['WeeklyResultScalarWhereWithAggregatesInputRecursive4']
    OR: List['WeeklyResultScalarWhereWithAggregatesInputRecursive4']
    NOT: List['WeeklyResultScalarWhereWithAggregatesInputRecursive4']


class WeeklyResultScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """WeeklyResult arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    weekNumber: Union[_int, 'types.IntWithAggregatesFilter']
    genreId: Union[_str, 'types.StringWithAggregatesFilter']
    ageCategoryId: Union[_int, 'types.IntWithAggregatesFilter']
    bookId: Union[_int, 'types.IntWithAggregatesFilter']
    leaderUserId: Union[_int, 'types.IntWithAggregatesFilter']
    totalMarks: Union[_int, 'types.IntWithAggregatesFilter']



class WeeklyResultGroupByOutput(TypedDict, total=False):
    id: _int
    weekNumber: _int
    genreId: _str
    ageCategoryId: _int
    bookId: _int
    leaderUserId: _int
    totalMarks: _int
    _sum: 'WeeklyResultSumAggregateOutput'
    _avg: 'WeeklyResultAvgAggregateOutput'
    _min: 'WeeklyResultMinAggregateOutput'
    _max: 'WeeklyResultMaxAggregateOutput'
    _count: 'WeeklyResultCountAggregateOutput'


class WeeklyResultAvgAggregateOutput(TypedDict, total=False):
    """WeeklyResult output for aggregating averages"""
    id: float
    weekNumber: float
    ageCategoryId: float
    bookId: float
    leaderUserId: float
    totalMarks: float


class WeeklyResultSumAggregateOutput(TypedDict, total=False):
    """WeeklyResult output for aggregating sums"""
    id: _int
    weekNumber: _int
    ageCategoryId: _int
    bookId: _int
    leaderUserId: _int
    totalMarks: _int


class WeeklyResultScalarAggregateOutput(TypedDict, total=False):
    """WeeklyResult output including scalar fields"""
    id: _int
    weekNumber: _int
    genreId: _str
    ageCategoryId: _int
    bookId: _int
    leaderUserId: _int
    totalMarks: _int


WeeklyResultMinAggregateOutput = WeeklyResultScalarAggregateOutput
WeeklyResultMaxAggregateOutput = WeeklyResultScalarAggregateOutput


class WeeklyResultMaxAggregateInput(TypedDict, total=False):
    """WeeklyResult input for aggregating by max"""
    id: bool
    weekNumber: bool
    genreId: bool
    ageCategoryId: bool
    bookId: bool
    leaderUserId: bool
    totalMarks: bool


class WeeklyResultMinAggregateInput(TypedDict, total=False):
    """WeeklyResult input for aggregating by min"""
    id: bool
    weekNumber: bool
    genreId: bool
    ageCategoryId: bool
    bookId: bool
    leaderUserId: bool
    totalMarks: bool


class WeeklyResultNumberAggregateInput(TypedDict, total=False):
    """WeeklyResult input for aggregating numbers"""
    id: bool
    weekNumber: bool
    ageCategoryId: bool
    bookId: bool
    leaderUserId: bool
    totalMarks: bool


WeeklyResultAvgAggregateInput = WeeklyResultNumberAggregateInput
WeeklyResultSumAggregateInput = WeeklyResultNumberAggregateInput


WeeklyResultCountAggregateInput = TypedDict(
    'WeeklyResultCountAggregateInput',
    {
        'id': bool,
        'weekNumber': bool,
        'genreId': bool,
        'ageCategoryId': bool,
        'bookId': bool,
        'leaderUserId': bool,
        'totalMarks': bool,
        '_all': bool,
    },
    total=False,
)

WeeklyResultCountAggregateOutput = TypedDict(
    'WeeklyResultCountAggregateOutput',
    {
        'id': int,
        'weekNumber': int,
        'genreId': int,
        'ageCategoryId': int,
        'bookId': int,
        'leaderUserId': int,
        'totalMarks': int,
        '_all': int,
    },
    total=False,
)


WeeklyResultKeys = Literal[
    'id',
    'weekNumber',
    'genreId',
    'ageCategoryId',
    'bookId',
    'leaderUserId',
    'totalMarks',
    'genre',
    'ageCategory',
    'book',
    'leader',
]
WeeklyResultScalarFieldKeys = Literal[
    'id',
    'weekNumber',
    'genreId',
    'ageCategoryId',
    'bookId',
    'leaderUserId',
    'totalMarks',
]
WeeklyResultScalarFieldKeysT = TypeVar('WeeklyResultScalarFieldKeysT', bound=WeeklyResultScalarFieldKeys)

WeeklyResultRelationalFieldKeys = Literal[
        'genre',
        'ageCategory',
        'book',
        'leader',
    ]

# Notification types

class NotificationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Notification create method"""
    id: _int
    userId: _int
    sentDate: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class NotificationCreateInput(NotificationOptionalCreateInput):
    """Required arguments to the Notification create method"""
    message: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class NotificationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Notification create method, without relations"""
    id: _int
    userId: _int
    sentDate: datetime.datetime


class NotificationCreateWithoutRelationsInput(NotificationOptionalCreateWithoutRelationsInput):
    """Required arguments to the Notification create method, without relations"""
    message: _str

class NotificationConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'NotificationCreateWithoutRelationsInput'
    where: 'NotificationWhereUniqueInput'

class NotificationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'NotificationCreateWithoutRelationsInput'
    connect: 'NotificationWhereUniqueInput'
    connect_or_create: 'NotificationConnectOrCreateWithoutRelationsInput'


class NotificationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['NotificationCreateWithoutRelationsInput', List['NotificationCreateWithoutRelationsInput']]
    connect: Union['NotificationWhereUniqueInput', List['NotificationWhereUniqueInput']]
    connect_or_create: Union['NotificationConnectOrCreateWithoutRelationsInput', List['NotificationConnectOrCreateWithoutRelationsInput']]

_NotificationWhereUnique_id_Input = TypedDict(
    '_NotificationWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

NotificationWhereUniqueInput = _NotificationWhereUnique_id_Input


class NotificationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    message: _str
    sentDate: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class NotificationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    message: _str
    sentDate: datetime.datetime


class NotificationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['NotificationCreateWithoutRelationsInput']
    connect: List['NotificationWhereUniqueInput']
    connect_or_create: List['NotificationConnectOrCreateWithoutRelationsInput']
    set: List['NotificationWhereUniqueInput']
    disconnect: List['NotificationWhereUniqueInput']
    delete: List['NotificationWhereUniqueInput']

    # TODO
    # update: List['NotificationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['NotificationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['NotificationScalarWhereInput']
    # upsert: List['NotificationUpserteWithWhereUniqueWithoutRelationsInput']


class NotificationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'NotificationCreateWithoutRelationsInput'
    connect: 'NotificationWhereUniqueInput'
    connect_or_create: 'NotificationConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'NotificationUpdateInput'
    # upsert: 'NotificationUpsertWithoutRelationsInput'


class NotificationUpsertInput(TypedDict):
    create: 'NotificationCreateInput'
    update: 'NotificationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Notification_id_OrderByInput = TypedDict(
    '_Notification_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Notification_userId_OrderByInput = TypedDict(
    '_Notification_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Notification_message_OrderByInput = TypedDict(
    '_Notification_message_OrderByInput',
    {
        'message': 'SortOrder',
    },
    total=True
)

_Notification_sentDate_OrderByInput = TypedDict(
    '_Notification_sentDate_OrderByInput',
    {
        'sentDate': 'SortOrder',
    },
    total=True
)

_Notification_RelevanceInner = TypedDict(
    '_Notification_RelevanceInner',
    {
        'fields': 'List[NotificationScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Notification_RelevanceOrderByInput = TypedDict(
    '_Notification_RelevanceOrderByInput',
    {
        '_relevance': '_Notification_RelevanceInner',
    },
    total=True
)

NotificationOrderByInput = Union[
    '_Notification_id_OrderByInput',
    '_Notification_userId_OrderByInput',
    '_Notification_message_OrderByInput',
    '_Notification_sentDate_OrderByInput',
    '_Notification_RelevanceOrderByInput',
]



# recursive Notification types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

NotificationRelationFilter = TypedDict(
    'NotificationRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class NotificationListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class NotificationInclude(TypedDict, total=False):
    """Notification relational arguments"""
    user: Union[bool, 'UserArgsFromNotification']


    

class UserIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromNotificationRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive1']


class UserIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromNotificationRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive2']


class UserIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromNotificationRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive3']


class UserIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromNotificationRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive4']


class UserIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class UserArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyUserArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    parent: Union[bool, 'GenreArgsFromNotificationRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromNotificationRecursive1']
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive1']


class GenreIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    parent: Union[bool, 'GenreArgsFromNotificationRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromNotificationRecursive2']
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive2']


class GenreIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    parent: Union[bool, 'GenreArgsFromNotificationRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromNotificationRecursive3']
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive3']


class GenreIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    parent: Union[bool, 'GenreArgsFromNotificationRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromNotificationRecursive4']
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive4']


class GenreIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class GenreArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyGenreArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive1']


class AgeCategoryIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive2']


class AgeCategoryIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive3']


class AgeCategoryIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    books: Union[bool, 'FindManyBookArgsFromNotificationRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive4']


class AgeCategoryIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class AgeCategoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyAgeCategoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    genre: Union[bool, 'GenreArgsFromNotificationRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive1']


class BookIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    genre: Union[bool, 'GenreArgsFromNotificationRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive2']


class BookIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    genre: Union[bool, 'GenreArgsFromNotificationRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive3']


class BookIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    genre: Union[bool, 'GenreArgsFromNotificationRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromNotificationRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromNotificationRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromNotificationRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromNotificationRecursive4']


class BookIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class BookArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyBookArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive1']
    book: Union[bool, 'BookArgsFromNotificationRecursive1']


class UserBookIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive2']
    book: Union[bool, 'BookArgsFromNotificationRecursive2']


class UserBookIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive3']
    book: Union[bool, 'BookArgsFromNotificationRecursive3']


class UserBookIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive4']
    book: Union[bool, 'BookArgsFromNotificationRecursive4']


class UserBookIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class UserBookArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyUserBookArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive1']
    book: Union[bool, 'BookArgsFromNotificationRecursive1']


class VoteIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive2']
    book: Union[bool, 'BookArgsFromNotificationRecursive2']


class VoteIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive3']
    book: Union[bool, 'BookArgsFromNotificationRecursive3']


class VoteIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive4']
    book: Union[bool, 'BookArgsFromNotificationRecursive4']


class VoteIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class VoteArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyVoteArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive1']
    book: Union[bool, 'BookArgsFromNotificationRecursive1']


class ReadingProgressIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive2']
    book: Union[bool, 'BookArgsFromNotificationRecursive2']


class ReadingProgressIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive3']
    book: Union[bool, 'BookArgsFromNotificationRecursive3']


class ReadingProgressIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive4']
    book: Union[bool, 'BookArgsFromNotificationRecursive4']


class ReadingProgressIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class ReadingProgressArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyReadingProgressArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    genre: Union[bool, 'GenreArgsFromNotificationRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive1']
    book: Union[bool, 'BookArgsFromNotificationRecursive1']
    leader: Union[bool, 'UserArgsFromNotificationRecursive1']


class WeeklyResultIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    genre: Union[bool, 'GenreArgsFromNotificationRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive2']
    book: Union[bool, 'BookArgsFromNotificationRecursive2']
    leader: Union[bool, 'UserArgsFromNotificationRecursive2']


class WeeklyResultIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    genre: Union[bool, 'GenreArgsFromNotificationRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive3']
    book: Union[bool, 'BookArgsFromNotificationRecursive3']
    leader: Union[bool, 'UserArgsFromNotificationRecursive3']


class WeeklyResultIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    genre: Union[bool, 'GenreArgsFromNotificationRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromNotificationRecursive4']
    book: Union[bool, 'BookArgsFromNotificationRecursive4']
    leader: Union[bool, 'UserArgsFromNotificationRecursive4']


class WeeklyResultIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class WeeklyResultArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyWeeklyResultArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive1']


class NotificationIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive2']


class NotificationIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive3']


class NotificationIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotificationRecursive4']


class NotificationIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class NotificationArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyNotificationArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    partner: Union[bool, 'PartnerArgsFromNotificationRecursive1']


class AdvertisementIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    partner: Union[bool, 'PartnerArgsFromNotificationRecursive2']


class AdvertisementIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    partner: Union[bool, 'PartnerArgsFromNotificationRecursive3']


class AdvertisementIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    partner: Union[bool, 'PartnerArgsFromNotificationRecursive4']


class AdvertisementIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class AdvertisementArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyAdvertisementArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromNotificationRecursive1']


class PartnerIncludeFromNotificationRecursive1(TypedDict, total=False):
    """Relational arguments for Notification"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromNotificationRecursive2']


class PartnerIncludeFromNotificationRecursive2(TypedDict, total=False):
    """Relational arguments for Notification"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromNotificationRecursive3']


class PartnerIncludeFromNotificationRecursive3(TypedDict, total=False):
    """Relational arguments for Notification"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromNotificationRecursive4']


class PartnerIncludeFromNotificationRecursive4(TypedDict, total=False):
    """Relational arguments for Notification"""

    

class PartnerArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    
    

class FindManyPartnerArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromNotificationRecursive1(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromNotificationRecursive2(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromNotificationRecursive3(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromNotificationRecursive4(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyNotificationArgs = FindManyNotificationArgsFromNotification
FindFirstNotificationArgs = FindManyNotificationArgsFromNotification


    

class NotificationWhereInput(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    message: Union[_str, 'types.StringFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive1', List['NotificationWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive1']
    OR: List['NotificationWhereInputRecursive1']
    NOT: List['NotificationWhereInputRecursive1']


class NotificationWhereInputRecursive1(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    message: Union[_str, 'types.StringFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive2', List['NotificationWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive2']
    OR: List['NotificationWhereInputRecursive2']
    NOT: List['NotificationWhereInputRecursive2']


class NotificationWhereInputRecursive2(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    message: Union[_str, 'types.StringFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive3', List['NotificationWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive3']
    OR: List['NotificationWhereInputRecursive3']
    NOT: List['NotificationWhereInputRecursive3']


class NotificationWhereInputRecursive3(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    message: Union[_str, 'types.StringFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['NotificationWhereInputRecursive4', List['NotificationWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInputRecursive4']
    OR: List['NotificationWhereInputRecursive4']
    NOT: List['NotificationWhereInputRecursive4']


class NotificationWhereInputRecursive4(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    userId: Union[_int, 'types.IntFilter']
    message: Union[_str, 'types.StringFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Notification types


    

class NotificationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive1']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive1']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive1']


class NotificationScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive2']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive2']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive2']


class NotificationScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive3']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive3']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive3']


class NotificationScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInputRecursive4']
    OR: List['NotificationScalarWhereWithAggregatesInputRecursive4']
    NOT: List['NotificationScalarWhereWithAggregatesInputRecursive4']


class NotificationScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    userId: Union[_int, 'types.IntWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    sentDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class NotificationGroupByOutput(TypedDict, total=False):
    id: _int
    userId: _int
    message: _str
    sentDate: datetime.datetime
    _sum: 'NotificationSumAggregateOutput'
    _avg: 'NotificationAvgAggregateOutput'
    _min: 'NotificationMinAggregateOutput'
    _max: 'NotificationMaxAggregateOutput'
    _count: 'NotificationCountAggregateOutput'


class NotificationAvgAggregateOutput(TypedDict, total=False):
    """Notification output for aggregating averages"""
    id: float
    userId: float


class NotificationSumAggregateOutput(TypedDict, total=False):
    """Notification output for aggregating sums"""
    id: _int
    userId: _int


class NotificationScalarAggregateOutput(TypedDict, total=False):
    """Notification output including scalar fields"""
    id: _int
    userId: _int
    message: _str
    sentDate: datetime.datetime


NotificationMinAggregateOutput = NotificationScalarAggregateOutput
NotificationMaxAggregateOutput = NotificationScalarAggregateOutput


class NotificationMaxAggregateInput(TypedDict, total=False):
    """Notification input for aggregating by max"""
    id: bool
    userId: bool
    message: bool
    sentDate: bool


class NotificationMinAggregateInput(TypedDict, total=False):
    """Notification input for aggregating by min"""
    id: bool
    userId: bool
    message: bool
    sentDate: bool


class NotificationNumberAggregateInput(TypedDict, total=False):
    """Notification input for aggregating numbers"""
    id: bool
    userId: bool


NotificationAvgAggregateInput = NotificationNumberAggregateInput
NotificationSumAggregateInput = NotificationNumberAggregateInput


NotificationCountAggregateInput = TypedDict(
    'NotificationCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'message': bool,
        'sentDate': bool,
        '_all': bool,
    },
    total=False,
)

NotificationCountAggregateOutput = TypedDict(
    'NotificationCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'message': int,
        'sentDate': int,
        '_all': int,
    },
    total=False,
)


NotificationKeys = Literal[
    'id',
    'userId',
    'message',
    'sentDate',
    'user',
]
NotificationScalarFieldKeys = Literal[
    'id',
    'userId',
    'message',
    'sentDate',
]
NotificationScalarFieldKeysT = TypeVar('NotificationScalarFieldKeysT', bound=NotificationScalarFieldKeys)

NotificationRelationalFieldKeys = Literal[
        'user',
    ]

# Advertisement types

class AdvertisementOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Advertisement create method"""
    id: _int
    partnerId: _int
    isActive: _bool
    partner: 'PartnerCreateNestedWithoutRelationsInput'


class AdvertisementCreateInput(AdvertisementOptionalCreateInput):
    """Required arguments to the Advertisement create method"""
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AdvertisementOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Advertisement create method, without relations"""
    id: _int
    partnerId: _int
    isActive: _bool


class AdvertisementCreateWithoutRelationsInput(AdvertisementOptionalCreateWithoutRelationsInput):
    """Required arguments to the Advertisement create method, without relations"""
    content: _str

class AdvertisementConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AdvertisementCreateWithoutRelationsInput'
    where: 'AdvertisementWhereUniqueInput'

class AdvertisementCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AdvertisementCreateWithoutRelationsInput'
    connect: 'AdvertisementWhereUniqueInput'
    connect_or_create: 'AdvertisementConnectOrCreateWithoutRelationsInput'


class AdvertisementCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AdvertisementCreateWithoutRelationsInput', List['AdvertisementCreateWithoutRelationsInput']]
    connect: Union['AdvertisementWhereUniqueInput', List['AdvertisementWhereUniqueInput']]
    connect_or_create: Union['AdvertisementConnectOrCreateWithoutRelationsInput', List['AdvertisementConnectOrCreateWithoutRelationsInput']]

_AdvertisementWhereUnique_id_Input = TypedDict(
    '_AdvertisementWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

AdvertisementWhereUniqueInput = _AdvertisementWhereUnique_id_Input


class AdvertisementUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    content: _str
    isActive: _bool
    partner: 'PartnerUpdateOneWithoutRelationsInput'


class AdvertisementUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    content: _str
    isActive: _bool


class AdvertisementUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AdvertisementCreateWithoutRelationsInput']
    connect: List['AdvertisementWhereUniqueInput']
    connect_or_create: List['AdvertisementConnectOrCreateWithoutRelationsInput']
    set: List['AdvertisementWhereUniqueInput']
    disconnect: List['AdvertisementWhereUniqueInput']
    delete: List['AdvertisementWhereUniqueInput']

    # TODO
    # update: List['AdvertisementUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AdvertisementUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AdvertisementScalarWhereInput']
    # upsert: List['AdvertisementUpserteWithWhereUniqueWithoutRelationsInput']


class AdvertisementUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AdvertisementCreateWithoutRelationsInput'
    connect: 'AdvertisementWhereUniqueInput'
    connect_or_create: 'AdvertisementConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AdvertisementUpdateInput'
    # upsert: 'AdvertisementUpsertWithoutRelationsInput'


class AdvertisementUpsertInput(TypedDict):
    create: 'AdvertisementCreateInput'
    update: 'AdvertisementUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Advertisement_id_OrderByInput = TypedDict(
    '_Advertisement_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Advertisement_content_OrderByInput = TypedDict(
    '_Advertisement_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Advertisement_partnerId_OrderByInput = TypedDict(
    '_Advertisement_partnerId_OrderByInput',
    {
        'partnerId': 'SortOrder',
    },
    total=True
)

_Advertisement_isActive_OrderByInput = TypedDict(
    '_Advertisement_isActive_OrderByInput',
    {
        'isActive': 'SortOrder',
    },
    total=True
)

_Advertisement_RelevanceInner = TypedDict(
    '_Advertisement_RelevanceInner',
    {
        'fields': 'List[AdvertisementScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Advertisement_RelevanceOrderByInput = TypedDict(
    '_Advertisement_RelevanceOrderByInput',
    {
        '_relevance': '_Advertisement_RelevanceInner',
    },
    total=True
)

AdvertisementOrderByInput = Union[
    '_Advertisement_id_OrderByInput',
    '_Advertisement_content_OrderByInput',
    '_Advertisement_partnerId_OrderByInput',
    '_Advertisement_isActive_OrderByInput',
    '_Advertisement_RelevanceOrderByInput',
]



# recursive Advertisement types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AdvertisementRelationFilter = TypedDict(
    'AdvertisementRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AdvertisementListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AdvertisementInclude(TypedDict, total=False):
    """Advertisement relational arguments"""
    partner: Union[bool, 'PartnerArgsFromAdvertisement']


    

class UserIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromAdvertisementRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive1']


class UserIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromAdvertisementRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive2']


class UserIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromAdvertisementRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive3']


class UserIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromAdvertisementRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive4']


class UserIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class UserArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyUserArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    parent: Union[bool, 'GenreArgsFromAdvertisementRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromAdvertisementRecursive1']
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive1']


class GenreIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    parent: Union[bool, 'GenreArgsFromAdvertisementRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromAdvertisementRecursive2']
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive2']


class GenreIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    parent: Union[bool, 'GenreArgsFromAdvertisementRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromAdvertisementRecursive3']
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive3']


class GenreIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    parent: Union[bool, 'GenreArgsFromAdvertisementRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromAdvertisementRecursive4']
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive4']


class GenreIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class GenreArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyGenreArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive1']


class AgeCategoryIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive2']


class AgeCategoryIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive3']


class AgeCategoryIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    books: Union[bool, 'FindManyBookArgsFromAdvertisementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive4']


class AgeCategoryIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class AgeCategoryArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyAgeCategoryArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive1']


class BookIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive2']


class BookIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive3']


class BookIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromAdvertisementRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromAdvertisementRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromAdvertisementRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromAdvertisementRecursive4']


class BookIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class BookArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyBookArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive1']


class UserBookIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive2']


class UserBookIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive3']


class UserBookIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive4']


class UserBookIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class UserBookArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyUserBookArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive1']


class VoteIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive2']


class VoteIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive3']


class VoteIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive4']


class VoteIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class VoteArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyVoteArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive1']


class ReadingProgressIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive2']


class ReadingProgressIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive3']


class ReadingProgressIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive4']


class ReadingProgressIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class ReadingProgressArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyReadingProgressArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive1']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive1']
    leader: Union[bool, 'UserArgsFromAdvertisementRecursive1']


class WeeklyResultIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive2']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive2']
    leader: Union[bool, 'UserArgsFromAdvertisementRecursive2']


class WeeklyResultIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive3']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive3']
    leader: Union[bool, 'UserArgsFromAdvertisementRecursive3']


class WeeklyResultIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    genre: Union[bool, 'GenreArgsFromAdvertisementRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromAdvertisementRecursive4']
    book: Union[bool, 'BookArgsFromAdvertisementRecursive4']
    leader: Union[bool, 'UserArgsFromAdvertisementRecursive4']


class WeeklyResultIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class WeeklyResultArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyWeeklyResultArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive1']


class NotificationIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive2']


class NotificationIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive3']


class NotificationIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    user: Union[bool, 'UserArgsFromAdvertisementRecursive4']


class NotificationIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class NotificationArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyNotificationArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    partner: Union[bool, 'PartnerArgsFromAdvertisementRecursive1']


class AdvertisementIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    partner: Union[bool, 'PartnerArgsFromAdvertisementRecursive2']


class AdvertisementIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    partner: Union[bool, 'PartnerArgsFromAdvertisementRecursive3']


class AdvertisementIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    partner: Union[bool, 'PartnerArgsFromAdvertisementRecursive4']


class AdvertisementIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class AdvertisementArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyAdvertisementArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromAdvertisement(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAdvertisementRecursive1']


class PartnerIncludeFromAdvertisementRecursive1(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAdvertisementRecursive2']


class PartnerIncludeFromAdvertisementRecursive2(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAdvertisementRecursive3']


class PartnerIncludeFromAdvertisementRecursive3(TypedDict, total=False):
    """Relational arguments for Advertisement"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromAdvertisementRecursive4']


class PartnerIncludeFromAdvertisementRecursive4(TypedDict, total=False):
    """Relational arguments for Advertisement"""

    

class PartnerArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    
    

class FindManyPartnerArgsFromAdvertisement(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromAdvertisementRecursive1(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromAdvertisementRecursive2(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromAdvertisementRecursive3(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromAdvertisementRecursive4(TypedDict, total=False):
    """Arguments for Advertisement"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyAdvertisementArgs = FindManyAdvertisementArgsFromAdvertisement
FindFirstAdvertisementArgs = FindManyAdvertisementArgsFromAdvertisement


    

class AdvertisementWhereInput(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    partnerId: Union[_int, 'types.IntFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    partner: 'PartnerRelationFilter'

    # should be noted that AND and NOT should be Union['AdvertisementWhereInputRecursive1', List['AdvertisementWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AdvertisementWhereInputRecursive1']
    OR: List['AdvertisementWhereInputRecursive1']
    NOT: List['AdvertisementWhereInputRecursive1']


class AdvertisementWhereInputRecursive1(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    partnerId: Union[_int, 'types.IntFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    partner: 'PartnerRelationFilter'

    # should be noted that AND and NOT should be Union['AdvertisementWhereInputRecursive2', List['AdvertisementWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AdvertisementWhereInputRecursive2']
    OR: List['AdvertisementWhereInputRecursive2']
    NOT: List['AdvertisementWhereInputRecursive2']


class AdvertisementWhereInputRecursive2(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    partnerId: Union[_int, 'types.IntFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    partner: 'PartnerRelationFilter'

    # should be noted that AND and NOT should be Union['AdvertisementWhereInputRecursive3', List['AdvertisementWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AdvertisementWhereInputRecursive3']
    OR: List['AdvertisementWhereInputRecursive3']
    NOT: List['AdvertisementWhereInputRecursive3']


class AdvertisementWhereInputRecursive3(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    partnerId: Union[_int, 'types.IntFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    partner: 'PartnerRelationFilter'

    # should be noted that AND and NOT should be Union['AdvertisementWhereInputRecursive4', List['AdvertisementWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AdvertisementWhereInputRecursive4']
    OR: List['AdvertisementWhereInputRecursive4']
    NOT: List['AdvertisementWhereInputRecursive4']


class AdvertisementWhereInputRecursive4(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    content: Union[_str, 'types.StringFilter']
    partnerId: Union[_int, 'types.IntFilter']
    isActive: Union[_bool, 'types.BooleanFilter']
    partner: 'PartnerRelationFilter'



# aggregate Advertisement types


    

class AdvertisementScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    partnerId: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['AdvertisementScalarWhereWithAggregatesInputRecursive1']
    OR: List['AdvertisementScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AdvertisementScalarWhereWithAggregatesInputRecursive1']


class AdvertisementScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    partnerId: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['AdvertisementScalarWhereWithAggregatesInputRecursive2']
    OR: List['AdvertisementScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AdvertisementScalarWhereWithAggregatesInputRecursive2']


class AdvertisementScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    partnerId: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['AdvertisementScalarWhereWithAggregatesInputRecursive3']
    OR: List['AdvertisementScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AdvertisementScalarWhereWithAggregatesInputRecursive3']


class AdvertisementScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    partnerId: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['AdvertisementScalarWhereWithAggregatesInputRecursive4']
    OR: List['AdvertisementScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AdvertisementScalarWhereWithAggregatesInputRecursive4']


class AdvertisementScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Advertisement arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    partnerId: Union[_int, 'types.IntWithAggregatesFilter']
    isActive: Union[_bool, 'types.BooleanWithAggregatesFilter']



class AdvertisementGroupByOutput(TypedDict, total=False):
    id: _int
    content: _str
    partnerId: _int
    isActive: _bool
    _sum: 'AdvertisementSumAggregateOutput'
    _avg: 'AdvertisementAvgAggregateOutput'
    _min: 'AdvertisementMinAggregateOutput'
    _max: 'AdvertisementMaxAggregateOutput'
    _count: 'AdvertisementCountAggregateOutput'


class AdvertisementAvgAggregateOutput(TypedDict, total=False):
    """Advertisement output for aggregating averages"""
    id: float
    partnerId: float


class AdvertisementSumAggregateOutput(TypedDict, total=False):
    """Advertisement output for aggregating sums"""
    id: _int
    partnerId: _int


class AdvertisementScalarAggregateOutput(TypedDict, total=False):
    """Advertisement output including scalar fields"""
    id: _int
    content: _str
    partnerId: _int
    isActive: _bool


AdvertisementMinAggregateOutput = AdvertisementScalarAggregateOutput
AdvertisementMaxAggregateOutput = AdvertisementScalarAggregateOutput


class AdvertisementMaxAggregateInput(TypedDict, total=False):
    """Advertisement input for aggregating by max"""
    id: bool
    content: bool
    partnerId: bool
    isActive: bool


class AdvertisementMinAggregateInput(TypedDict, total=False):
    """Advertisement input for aggregating by min"""
    id: bool
    content: bool
    partnerId: bool
    isActive: bool


class AdvertisementNumberAggregateInput(TypedDict, total=False):
    """Advertisement input for aggregating numbers"""
    id: bool
    partnerId: bool


AdvertisementAvgAggregateInput = AdvertisementNumberAggregateInput
AdvertisementSumAggregateInput = AdvertisementNumberAggregateInput


AdvertisementCountAggregateInput = TypedDict(
    'AdvertisementCountAggregateInput',
    {
        'id': bool,
        'content': bool,
        'partnerId': bool,
        'isActive': bool,
        '_all': bool,
    },
    total=False,
)

AdvertisementCountAggregateOutput = TypedDict(
    'AdvertisementCountAggregateOutput',
    {
        'id': int,
        'content': int,
        'partnerId': int,
        'isActive': int,
        '_all': int,
    },
    total=False,
)


AdvertisementKeys = Literal[
    'id',
    'content',
    'partnerId',
    'isActive',
    'partner',
]
AdvertisementScalarFieldKeys = Literal[
    'id',
    'content',
    'partnerId',
    'isActive',
]
AdvertisementScalarFieldKeysT = TypeVar('AdvertisementScalarFieldKeysT', bound=AdvertisementScalarFieldKeys)

AdvertisementRelationalFieldKeys = Literal[
        'partner',
    ]

# Partner types

class PartnerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Partner create method"""
    id: _int
    advertisements: 'AdvertisementCreateManyNestedWithoutRelationsInput'


class PartnerCreateInput(PartnerOptionalCreateInput):
    """Required arguments to the Partner create method"""
    name: _str
    contactInfo: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PartnerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Partner create method, without relations"""
    id: _int


class PartnerCreateWithoutRelationsInput(PartnerOptionalCreateWithoutRelationsInput):
    """Required arguments to the Partner create method, without relations"""
    name: _str
    contactInfo: _str

class PartnerConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PartnerCreateWithoutRelationsInput'
    where: 'PartnerWhereUniqueInput'

class PartnerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PartnerCreateWithoutRelationsInput'
    connect: 'PartnerWhereUniqueInput'
    connect_or_create: 'PartnerConnectOrCreateWithoutRelationsInput'


class PartnerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PartnerCreateWithoutRelationsInput', List['PartnerCreateWithoutRelationsInput']]
    connect: Union['PartnerWhereUniqueInput', List['PartnerWhereUniqueInput']]
    connect_or_create: Union['PartnerConnectOrCreateWithoutRelationsInput', List['PartnerConnectOrCreateWithoutRelationsInput']]

_PartnerWhereUnique_id_Input = TypedDict(
    '_PartnerWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

PartnerWhereUniqueInput = _PartnerWhereUnique_id_Input


class PartnerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    contactInfo: _str
    advertisements: 'AdvertisementUpdateManyWithoutRelationsInput'


class PartnerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    contactInfo: _str


class PartnerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PartnerCreateWithoutRelationsInput']
    connect: List['PartnerWhereUniqueInput']
    connect_or_create: List['PartnerConnectOrCreateWithoutRelationsInput']
    set: List['PartnerWhereUniqueInput']
    disconnect: List['PartnerWhereUniqueInput']
    delete: List['PartnerWhereUniqueInput']

    # TODO
    # update: List['PartnerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PartnerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PartnerScalarWhereInput']
    # upsert: List['PartnerUpserteWithWhereUniqueWithoutRelationsInput']


class PartnerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PartnerCreateWithoutRelationsInput'
    connect: 'PartnerWhereUniqueInput'
    connect_or_create: 'PartnerConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PartnerUpdateInput'
    # upsert: 'PartnerUpsertWithoutRelationsInput'


class PartnerUpsertInput(TypedDict):
    create: 'PartnerCreateInput'
    update: 'PartnerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Partner_id_OrderByInput = TypedDict(
    '_Partner_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Partner_name_OrderByInput = TypedDict(
    '_Partner_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Partner_contactInfo_OrderByInput = TypedDict(
    '_Partner_contactInfo_OrderByInput',
    {
        'contactInfo': 'SortOrder',
    },
    total=True
)

_Partner_RelevanceInner = TypedDict(
    '_Partner_RelevanceInner',
    {
        'fields': 'List[PartnerScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Partner_RelevanceOrderByInput = TypedDict(
    '_Partner_RelevanceOrderByInput',
    {
        '_relevance': '_Partner_RelevanceInner',
    },
    total=True
)

PartnerOrderByInput = Union[
    '_Partner_id_OrderByInput',
    '_Partner_name_OrderByInput',
    '_Partner_contactInfo_OrderByInput',
    '_Partner_RelevanceOrderByInput',
]



# recursive Partner types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PartnerRelationFilter = TypedDict(
    'PartnerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PartnerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PartnerInclude(TypedDict, total=False):
    """Partner relational arguments"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPartner']


    

class UserIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive1']
    notifications: Union[bool, 'FindManyNotificationArgsFromPartnerRecursive1']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive1']


class UserIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive2']
    notifications: Union[bool, 'FindManyNotificationArgsFromPartnerRecursive2']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive2']


class UserIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive3']
    notifications: Union[bool, 'FindManyNotificationArgsFromPartnerRecursive3']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive3']


class UserIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive4']
    notifications: Union[bool, 'FindManyNotificationArgsFromPartnerRecursive4']
    leaderResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive4']


class UserIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class UserArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyUserArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class GenreIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    parent: Union[bool, 'GenreArgsFromPartnerRecursive1']
    subgenres: Union[bool, 'FindManyGenreArgsFromPartnerRecursive1']
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive1']


class GenreIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    parent: Union[bool, 'GenreArgsFromPartnerRecursive2']
    subgenres: Union[bool, 'FindManyGenreArgsFromPartnerRecursive2']
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive2']


class GenreIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    parent: Union[bool, 'GenreArgsFromPartnerRecursive3']
    subgenres: Union[bool, 'FindManyGenreArgsFromPartnerRecursive3']
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive3']


class GenreIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    parent: Union[bool, 'GenreArgsFromPartnerRecursive4']
    subgenres: Union[bool, 'FindManyGenreArgsFromPartnerRecursive4']
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive4']


class GenreIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class GenreArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GenreIncludeFromGenreRecursive1'


class GenreArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GenreIncludeFromGenreRecursive2'


class GenreArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GenreIncludeFromGenreRecursive3'


class GenreArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'GenreIncludeFromGenreRecursive4'


class GenreArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyGenreArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive1'


class FindManyGenreArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive2'


class FindManyGenreArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive3'


class FindManyGenreArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    include: 'GenreIncludeFromGenreRecursive4'


class FindManyGenreArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['GenreOrderByInput', List['GenreOrderByInput']]
    where: 'GenreWhereInput'
    cursor: 'GenreWhereUniqueInput'
    distinct: List['GenreScalarFieldKeys']
    
    

class AgeCategoryIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive1']


class AgeCategoryIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive2']


class AgeCategoryIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive3']


class AgeCategoryIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    books: Union[bool, 'FindManyBookArgsFromPartnerRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive4']


class AgeCategoryIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class AgeCategoryArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class AgeCategoryArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class AgeCategoryArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class AgeCategoryArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class AgeCategoryArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyAgeCategoryArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive1'


class FindManyAgeCategoryArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive2'


class FindManyAgeCategoryArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive3'


class FindManyAgeCategoryArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    include: 'AgeCategoryIncludeFromAgeCategoryRecursive4'


class FindManyAgeCategoryArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AgeCategoryOrderByInput', List['AgeCategoryOrderByInput']]
    where: 'AgeCategoryWhereInput'
    cursor: 'AgeCategoryWhereUniqueInput'
    distinct: List['AgeCategoryScalarFieldKeys']
    
    

class BookIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    genre: Union[bool, 'GenreArgsFromPartnerRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive1']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive1']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive1']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive1']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive1']


class BookIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    genre: Union[bool, 'GenreArgsFromPartnerRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive2']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive2']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive2']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive2']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive2']


class BookIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    genre: Union[bool, 'GenreArgsFromPartnerRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive3']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive3']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive3']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive3']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive3']


class BookIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    genre: Union[bool, 'GenreArgsFromPartnerRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive4']
    votes: Union[bool, 'FindManyVoteArgsFromPartnerRecursive4']
    readingProgress: Union[bool, 'FindManyReadingProgressArgsFromPartnerRecursive4']
    weeklyResults: Union[bool, 'FindManyWeeklyResultArgsFromPartnerRecursive4']
    userBooks: Union[bool, 'FindManyUserBookArgsFromPartnerRecursive4']


class BookIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class BookArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'BookIncludeFromBookRecursive1'


class BookArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'BookIncludeFromBookRecursive2'


class BookArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'BookIncludeFromBookRecursive3'


class BookArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'BookIncludeFromBookRecursive4'


class BookArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyBookArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive1'


class FindManyBookArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive2'


class FindManyBookArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive3'


class FindManyBookArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    include: 'BookIncludeFromBookRecursive4'


class FindManyBookArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['BookOrderByInput', List['BookOrderByInput']]
    where: 'BookWhereInput'
    cursor: 'BookWhereUniqueInput'
    distinct: List['BookScalarFieldKeys']
    
    

class UserBookIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive1']
    book: Union[bool, 'BookArgsFromPartnerRecursive1']


class UserBookIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive2']
    book: Union[bool, 'BookArgsFromPartnerRecursive2']


class UserBookIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive3']
    book: Union[bool, 'BookArgsFromPartnerRecursive3']


class UserBookIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive4']
    book: Union[bool, 'BookArgsFromPartnerRecursive4']


class UserBookIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class UserBookArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserBookIncludeFromUserBookRecursive1'


class UserBookArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserBookIncludeFromUserBookRecursive2'


class UserBookArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserBookIncludeFromUserBookRecursive3'


class UserBookArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'UserBookIncludeFromUserBookRecursive4'


class UserBookArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyUserBookArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive1'


class FindManyUserBookArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive2'


class FindManyUserBookArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive3'


class FindManyUserBookArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    include: 'UserBookIncludeFromUserBookRecursive4'


class FindManyUserBookArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['UserBookOrderByInput', List['UserBookOrderByInput']]
    where: 'UserBookWhereInput'
    cursor: 'UserBookWhereUniqueInput'
    distinct: List['UserBookScalarFieldKeys']
    
    

class VoteIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive1']
    book: Union[bool, 'BookArgsFromPartnerRecursive1']


class VoteIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive2']
    book: Union[bool, 'BookArgsFromPartnerRecursive2']


class VoteIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive3']
    book: Union[bool, 'BookArgsFromPartnerRecursive3']


class VoteIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive4']
    book: Union[bool, 'BookArgsFromPartnerRecursive4']


class VoteIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class VoteArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'VoteIncludeFromVoteRecursive1'


class VoteArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'VoteIncludeFromVoteRecursive2'


class VoteArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'VoteIncludeFromVoteRecursive3'


class VoteArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'VoteIncludeFromVoteRecursive4'


class VoteArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyVoteArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive1'


class FindManyVoteArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive2'


class FindManyVoteArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive3'


class FindManyVoteArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    include: 'VoteIncludeFromVoteRecursive4'


class FindManyVoteArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['VoteOrderByInput', List['VoteOrderByInput']]
    where: 'VoteWhereInput'
    cursor: 'VoteWhereUniqueInput'
    distinct: List['VoteScalarFieldKeys']
    
    

class ReadingProgressIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive1']
    book: Union[bool, 'BookArgsFromPartnerRecursive1']


class ReadingProgressIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive2']
    book: Union[bool, 'BookArgsFromPartnerRecursive2']


class ReadingProgressIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive3']
    book: Union[bool, 'BookArgsFromPartnerRecursive3']


class ReadingProgressIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive4']
    book: Union[bool, 'BookArgsFromPartnerRecursive4']


class ReadingProgressIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class ReadingProgressArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class ReadingProgressArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class ReadingProgressArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class ReadingProgressArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class ReadingProgressArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyReadingProgressArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive1'


class FindManyReadingProgressArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive2'


class FindManyReadingProgressArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive3'


class FindManyReadingProgressArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    include: 'ReadingProgressIncludeFromReadingProgressRecursive4'


class FindManyReadingProgressArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['ReadingProgressOrderByInput', List['ReadingProgressOrderByInput']]
    where: 'ReadingProgressWhereInput'
    cursor: 'ReadingProgressWhereUniqueInput'
    distinct: List['ReadingProgressScalarFieldKeys']
    
    

class WeeklyResultIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    genre: Union[bool, 'GenreArgsFromPartnerRecursive1']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive1']
    book: Union[bool, 'BookArgsFromPartnerRecursive1']
    leader: Union[bool, 'UserArgsFromPartnerRecursive1']


class WeeklyResultIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    genre: Union[bool, 'GenreArgsFromPartnerRecursive2']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive2']
    book: Union[bool, 'BookArgsFromPartnerRecursive2']
    leader: Union[bool, 'UserArgsFromPartnerRecursive2']


class WeeklyResultIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    genre: Union[bool, 'GenreArgsFromPartnerRecursive3']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive3']
    book: Union[bool, 'BookArgsFromPartnerRecursive3']
    leader: Union[bool, 'UserArgsFromPartnerRecursive3']


class WeeklyResultIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    genre: Union[bool, 'GenreArgsFromPartnerRecursive4']
    ageCategory: Union[bool, 'AgeCategoryArgsFromPartnerRecursive4']
    book: Union[bool, 'BookArgsFromPartnerRecursive4']
    leader: Union[bool, 'UserArgsFromPartnerRecursive4']


class WeeklyResultIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class WeeklyResultArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class WeeklyResultArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class WeeklyResultArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class WeeklyResultArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class WeeklyResultArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyWeeklyResultArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive1'


class FindManyWeeklyResultArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive2'


class FindManyWeeklyResultArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive3'


class FindManyWeeklyResultArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    include: 'WeeklyResultIncludeFromWeeklyResultRecursive4'


class FindManyWeeklyResultArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['WeeklyResultOrderByInput', List['WeeklyResultOrderByInput']]
    where: 'WeeklyResultWhereInput'
    cursor: 'WeeklyResultWhereUniqueInput'
    distinct: List['WeeklyResultScalarFieldKeys']
    
    

class NotificationIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive1']


class NotificationIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive2']


class NotificationIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive3']


class NotificationIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    user: Union[bool, 'UserArgsFromPartnerRecursive4']


class NotificationIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class NotificationArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'NotificationIncludeFromNotificationRecursive1'


class NotificationArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'NotificationIncludeFromNotificationRecursive2'


class NotificationArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'NotificationIncludeFromNotificationRecursive3'


class NotificationArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'NotificationIncludeFromNotificationRecursive4'


class NotificationArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyNotificationArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive1'


class FindManyNotificationArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive2'


class FindManyNotificationArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive3'


class FindManyNotificationArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotificationRecursive4'


class FindManyNotificationArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    
    

class AdvertisementIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    partner: Union[bool, 'PartnerArgsFromPartnerRecursive1']


class AdvertisementIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    partner: Union[bool, 'PartnerArgsFromPartnerRecursive2']


class AdvertisementIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    partner: Union[bool, 'PartnerArgsFromPartnerRecursive3']


class AdvertisementIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    partner: Union[bool, 'PartnerArgsFromPartnerRecursive4']


class AdvertisementIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class AdvertisementArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class AdvertisementArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class AdvertisementArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class AdvertisementArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class AdvertisementArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyAdvertisementArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive1'


class FindManyAdvertisementArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive2'


class FindManyAdvertisementArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive3'


class FindManyAdvertisementArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    include: 'AdvertisementIncludeFromAdvertisementRecursive4'


class FindManyAdvertisementArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['AdvertisementOrderByInput', List['AdvertisementOrderByInput']]
    where: 'AdvertisementWhereInput'
    cursor: 'AdvertisementWhereUniqueInput'
    distinct: List['AdvertisementScalarFieldKeys']
    
    

class PartnerIncludeFromPartner(TypedDict, total=False):
    """Relational arguments for Partner"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPartnerRecursive1']


class PartnerIncludeFromPartnerRecursive1(TypedDict, total=False):
    """Relational arguments for Partner"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPartnerRecursive2']


class PartnerIncludeFromPartnerRecursive2(TypedDict, total=False):
    """Relational arguments for Partner"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPartnerRecursive3']


class PartnerIncludeFromPartnerRecursive3(TypedDict, total=False):
    """Relational arguments for Partner"""
    advertisements: Union[bool, 'FindManyAdvertisementArgsFromPartnerRecursive4']


class PartnerIncludeFromPartnerRecursive4(TypedDict, total=False):
    """Relational arguments for Partner"""

    

class PartnerArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PartnerIncludeFromPartnerRecursive1'


class PartnerArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PartnerIncludeFromPartnerRecursive2'


class PartnerArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PartnerIncludeFromPartnerRecursive3'


class PartnerArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    include: 'PartnerIncludeFromPartnerRecursive4'


class PartnerArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    
    

class FindManyPartnerArgsFromPartner(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive1'


class FindManyPartnerArgsFromPartnerRecursive1(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive2'


class FindManyPartnerArgsFromPartnerRecursive2(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive3'


class FindManyPartnerArgsFromPartnerRecursive3(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    include: 'PartnerIncludeFromPartnerRecursive4'


class FindManyPartnerArgsFromPartnerRecursive4(TypedDict, total=False):
    """Arguments for Partner"""
    take: int
    skip: int
    order_by: Union['PartnerOrderByInput', List['PartnerOrderByInput']]
    where: 'PartnerWhereInput'
    cursor: 'PartnerWhereUniqueInput'
    distinct: List['PartnerScalarFieldKeys']
    


FindManyPartnerArgs = FindManyPartnerArgsFromPartner
FindFirstPartnerArgs = FindManyPartnerArgsFromPartner


    

class PartnerWhereInput(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    contactInfo: Union[_str, 'types.StringFilter']
    advertisements: 'AdvertisementListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerWhereInputRecursive1', List['PartnerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PartnerWhereInputRecursive1']
    OR: List['PartnerWhereInputRecursive1']
    NOT: List['PartnerWhereInputRecursive1']


class PartnerWhereInputRecursive1(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    contactInfo: Union[_str, 'types.StringFilter']
    advertisements: 'AdvertisementListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerWhereInputRecursive2', List['PartnerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PartnerWhereInputRecursive2']
    OR: List['PartnerWhereInputRecursive2']
    NOT: List['PartnerWhereInputRecursive2']


class PartnerWhereInputRecursive2(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    contactInfo: Union[_str, 'types.StringFilter']
    advertisements: 'AdvertisementListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerWhereInputRecursive3', List['PartnerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PartnerWhereInputRecursive3']
    OR: List['PartnerWhereInputRecursive3']
    NOT: List['PartnerWhereInputRecursive3']


class PartnerWhereInputRecursive3(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    contactInfo: Union[_str, 'types.StringFilter']
    advertisements: 'AdvertisementListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerWhereInputRecursive4', List['PartnerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PartnerWhereInputRecursive4']
    OR: List['PartnerWhereInputRecursive4']
    NOT: List['PartnerWhereInputRecursive4']


class PartnerWhereInputRecursive4(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    contactInfo: Union[_str, 'types.StringFilter']
    advertisements: 'AdvertisementListRelationFilter'



# aggregate Partner types


    

class PartnerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    contactInfo: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PartnerScalarWhereWithAggregatesInputRecursive1']
    OR: List['PartnerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PartnerScalarWhereWithAggregatesInputRecursive1']


class PartnerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    contactInfo: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PartnerScalarWhereWithAggregatesInputRecursive2']
    OR: List['PartnerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PartnerScalarWhereWithAggregatesInputRecursive2']


class PartnerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    contactInfo: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PartnerScalarWhereWithAggregatesInputRecursive3']
    OR: List['PartnerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PartnerScalarWhereWithAggregatesInputRecursive3']


class PartnerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    contactInfo: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PartnerScalarWhereWithAggregatesInputRecursive4']
    OR: List['PartnerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PartnerScalarWhereWithAggregatesInputRecursive4']


class PartnerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Partner arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    contactInfo: Union[_str, 'types.StringWithAggregatesFilter']



class PartnerGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    contactInfo: _str
    _sum: 'PartnerSumAggregateOutput'
    _avg: 'PartnerAvgAggregateOutput'
    _min: 'PartnerMinAggregateOutput'
    _max: 'PartnerMaxAggregateOutput'
    _count: 'PartnerCountAggregateOutput'


class PartnerAvgAggregateOutput(TypedDict, total=False):
    """Partner output for aggregating averages"""
    id: float


class PartnerSumAggregateOutput(TypedDict, total=False):
    """Partner output for aggregating sums"""
    id: _int


class PartnerScalarAggregateOutput(TypedDict, total=False):
    """Partner output including scalar fields"""
    id: _int
    name: _str
    contactInfo: _str


PartnerMinAggregateOutput = PartnerScalarAggregateOutput
PartnerMaxAggregateOutput = PartnerScalarAggregateOutput


class PartnerMaxAggregateInput(TypedDict, total=False):
    """Partner input for aggregating by max"""
    id: bool
    name: bool
    contactInfo: bool


class PartnerMinAggregateInput(TypedDict, total=False):
    """Partner input for aggregating by min"""
    id: bool
    name: bool
    contactInfo: bool


class PartnerNumberAggregateInput(TypedDict, total=False):
    """Partner input for aggregating numbers"""
    id: bool


PartnerAvgAggregateInput = PartnerNumberAggregateInput
PartnerSumAggregateInput = PartnerNumberAggregateInput


PartnerCountAggregateInput = TypedDict(
    'PartnerCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'contactInfo': bool,
        '_all': bool,
    },
    total=False,
)

PartnerCountAggregateOutput = TypedDict(
    'PartnerCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'contactInfo': int,
        '_all': int,
    },
    total=False,
)


PartnerKeys = Literal[
    'id',
    'name',
    'contactInfo',
    'advertisements',
]
PartnerScalarFieldKeys = Literal[
    'id',
    'name',
    'contactInfo',
]
PartnerScalarFieldKeysT = TypeVar('PartnerScalarFieldKeysT', bound=PartnerScalarFieldKeys)

PartnerRelationalFieldKeys = Literal[
        'advertisements',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields