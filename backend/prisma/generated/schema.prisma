generator client {
  provider = "prisma-client-py"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  username              String    @unique
  passwordHash          String
  isPremium             Boolean   @default(false)
  premiumExpirationDate DateTime?
  hideAds               Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  registrationDate      DateTime  @default(now())
  about                 String?
  avatar                String?
  isActive              Boolean   @default(true)
  isStaff               Boolean   @default(false)
  isSuperuser           Boolean   @default(false)
  lastLogin             DateTime?

  // Relations
  groups           UserGroup[]
  permissions      UserPermission[]
  tokens           Token[]
  sessions         Session[]
  notifications    Notification[]
  readingProgress  ReadingProgress[]
  userBooks        UserBook[]
  votes            Vote[]
  leaderResults    WeeklyResult[]    @relation("Leader")
  userAchievements UserAchievement[]
}

model Group {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  users       UserGroup[]
  permissions GroupPermission[]
}

model Permission {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  codename  String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  users     UserPermission[]
  groups    GroupPermission[]
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}

model GroupPermission {
  id           Int        @id @default(autoincrement())
  groupId      Int
  permissionId Int
  createdAt    DateTime   @default(now())
  group        Group      @relation(fields: [groupId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([groupId, permissionId])
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id         Int      @id @default(autoincrement())
  userId     Int
  sessionKey String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  user       User     @relation(fields: [userId], references: [id])
}

model Genre {
  name          String
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
  id            Int            @id @default(autoincrement())
  parentId      Int?
  books         Book[]
  parent        Genre?         @relation("GenreToSubgenre", fields: [parentId], references: [id])
  subgenres     Genre[]        @relation("GenreToSubgenre")
  weeklyResults WeeklyResult[]
}

model AgeCategory {
  id            Int            @id @default(autoincrement())
  name          String
  books         Book[]
  weeklyResults WeeklyResult[]
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id                Int               @id @default(autoincrement())
  title             String
  authorId          Int
  author            Author            @relation(fields: [authorId], references: [id])
  description       String?
  coverUrl          String?
  externalId        String?           @unique
  ageCategoryId     Int
  rating            Float             @default(0)
  rating_count      Int               @default(0)
  isPremium         Boolean           @default(false)
  litresRating      Float?
  litresRatingCount Int?
  series            String?
  translator        String?
  volume            String?
  year              String?
  isbn              String?
  copyrightHolder   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  genreId           Int
  ageCategory       AgeCategory       @relation(fields: [ageCategoryId], references: [id])
  genre             Genre             @relation(fields: [genreId], references: [id])
  readingProgress   ReadingProgress[]
  userBooks         UserBook[]
  votes             Vote[]
  weeklyResults     WeeklyResult[]
}

model UserBook {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  status    String
  rating    Int?
  addedAt   DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
}

model Vote {
  id         Int      @id @default(autoincrement())
  userId     Int
  bookId     Int
  weekNumber Int
  voteDate   DateTime @default(now())
  book       Book     @relation(fields: [bookId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, bookId, weekNumber])
}

model ReadingProgress {
  id           Int      @id @default(autoincrement())
  userId       Int
  bookId       Int
  weekNumber   Int
  marks        Int      @default(0)
  progressDate DateTime @default(now())
  book         Book     @relation(fields: [bookId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, bookId, weekNumber])
}

model WeeklyResult {
  id            Int         @id @default(autoincrement())
  weekNumber    Int
  ageCategoryId Int
  bookId        Int
  leaderUserId  Int
  totalMarks    Int
  genreId       Int?
  ageCategory   AgeCategory @relation(fields: [ageCategoryId], references: [id])
  book          Book        @relation(fields: [bookId], references: [id])
  genre         Genre?      @relation(fields: [genreId], references: [id])
  leader        User        @relation("Leader", fields: [leaderUserId], references: [id])

  @@unique([weekNumber, genreId, ageCategoryId])
}

model Notification {
  id       Int      @id @default(autoincrement())
  userId   Int
  message  String
  sentDate DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
}

model Advertisement {
  id        Int     @id @default(autoincrement())
  content   String
  partnerId Int
  isActive  Boolean @default(true)
  partner   Partner @relation(fields: [partnerId], references: [id])
}

model Partner {
  id             Int             @id @default(autoincrement())
  name           String
  contactInfo    String
  advertisements Advertisement[]
}

model Achievement {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  users       UserAchievement[]
}

model UserAchievement {
  id            Int         @id @default(autoincrement())
  userId        Int
  achievementId Int
  earnedAt      DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

enum BookStatus {
  PLANNING
  READING
  READ
  DROPPED
}
