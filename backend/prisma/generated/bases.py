# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['User']] = 'User'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserActions[_PrismaModelT](client or get_client(), cls)


class BaseGroup(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Group']] = 'Group'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.GroupActions[_PrismaModelT]':
        from .client import get_client

        return actions.GroupActions[_PrismaModelT](client or get_client(), cls)


class BasePermission(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Permission']] = 'Permission'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PermissionActions[_PrismaModelT]':
        from .client import get_client

        return actions.PermissionActions[_PrismaModelT](client or get_client(), cls)


class BaseUserGroup(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserGroup']] = 'UserGroup'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserGroupActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserGroupActions[_PrismaModelT](client or get_client(), cls)


class BaseUserPermission(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserPermission']] = 'UserPermission'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserPermissionActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserPermissionActions[_PrismaModelT](client or get_client(), cls)


class BaseGroupPermission(_PrismaModel):
    __prisma_model__: ClassVar[Literal['GroupPermission']] = 'GroupPermission'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.GroupPermissionActions[_PrismaModelT]':
        from .client import get_client

        return actions.GroupPermissionActions[_PrismaModelT](client or get_client(), cls)


class BaseToken(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Token']] = 'Token'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.TokenActions[_PrismaModelT]':
        from .client import get_client

        return actions.TokenActions[_PrismaModelT](client or get_client(), cls)


class BaseSession(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Session']] = 'Session'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.SessionActions[_PrismaModelT]':
        from .client import get_client

        return actions.SessionActions[_PrismaModelT](client or get_client(), cls)


class BaseGenre(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Genre']] = 'Genre'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.GenreActions[_PrismaModelT]':
        from .client import get_client

        return actions.GenreActions[_PrismaModelT](client or get_client(), cls)


class BaseAgeCategory(_PrismaModel):
    __prisma_model__: ClassVar[Literal['AgeCategory']] = 'AgeCategory'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AgeCategoryActions[_PrismaModelT]':
        from .client import get_client

        return actions.AgeCategoryActions[_PrismaModelT](client or get_client(), cls)


class BaseAuthor(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Author']] = 'Author'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AuthorActions[_PrismaModelT]':
        from .client import get_client

        return actions.AuthorActions[_PrismaModelT](client or get_client(), cls)


class BaseBook(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Book']] = 'Book'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.BookActions[_PrismaModelT]':
        from .client import get_client

        return actions.BookActions[_PrismaModelT](client or get_client(), cls)


class BaseUserBook(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserBook']] = 'UserBook'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserBookActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserBookActions[_PrismaModelT](client or get_client(), cls)


class BaseVote(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Vote']] = 'Vote'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.VoteActions[_PrismaModelT]':
        from .client import get_client

        return actions.VoteActions[_PrismaModelT](client or get_client(), cls)


class BaseReadingProgress(_PrismaModel):
    __prisma_model__: ClassVar[Literal['ReadingProgress']] = 'ReadingProgress'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.ReadingProgressActions[_PrismaModelT]':
        from .client import get_client

        return actions.ReadingProgressActions[_PrismaModelT](client or get_client(), cls)


class BaseWeeklyResult(_PrismaModel):
    __prisma_model__: ClassVar[Literal['WeeklyResult']] = 'WeeklyResult'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.WeeklyResultActions[_PrismaModelT]':
        from .client import get_client

        return actions.WeeklyResultActions[_PrismaModelT](client or get_client(), cls)


class BaseNotification(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Notification']] = 'Notification'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.NotificationActions[_PrismaModelT]':
        from .client import get_client

        return actions.NotificationActions[_PrismaModelT](client or get_client(), cls)


class BaseAdvertisement(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Advertisement']] = 'Advertisement'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AdvertisementActions[_PrismaModelT]':
        from .client import get_client

        return actions.AdvertisementActions[_PrismaModelT](client or get_client(), cls)


class BasePartner(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Partner']] = 'Partner'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.PartnerActions[_PrismaModelT]':
        from .client import get_client

        return actions.PartnerActions[_PrismaModelT](client or get_client(), cls)


class BaseAchievement(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Achievement']] = 'Achievement'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AchievementActions[_PrismaModelT]':
        from .client import get_client

        return actions.AchievementActions[_PrismaModelT](client or get_client(), cls)


class BaseUserAchievement(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserAchievement']] = 'UserAchievement'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserAchievementActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserAchievementActions[_PrismaModelT](client or get_client(), cls)


class Baseauth_group(_PrismaModel):
    __prisma_model__: ClassVar[Literal['auth_group']] = 'auth_group'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.auth_groupActions[_PrismaModelT]':
        from .client import get_client

        return actions.auth_groupActions[_PrismaModelT](client or get_client(), cls)


class Baseauth_group_permissions(_PrismaModel):
    __prisma_model__: ClassVar[Literal['auth_group_permissions']] = 'auth_group_permissions'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.auth_group_permissionsActions[_PrismaModelT]':
        from .client import get_client

        return actions.auth_group_permissionsActions[_PrismaModelT](client or get_client(), cls)


class Baseauth_permission(_PrismaModel):
    __prisma_model__: ClassVar[Literal['auth_permission']] = 'auth_permission'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.auth_permissionActions[_PrismaModelT]':
        from .client import get_client

        return actions.auth_permissionActions[_PrismaModelT](client or get_client(), cls)


class Baseauthtoken_token(_PrismaModel):
    __prisma_model__: ClassVar[Literal['authtoken_token']] = 'authtoken_token'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.authtoken_tokenActions[_PrismaModelT]':
        from .client import get_client

        return actions.authtoken_tokenActions[_PrismaModelT](client or get_client(), cls)


class Basedjango_admin_log(_PrismaModel):
    __prisma_model__: ClassVar[Literal['django_admin_log']] = 'django_admin_log'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.django_admin_logActions[_PrismaModelT]':
        from .client import get_client

        return actions.django_admin_logActions[_PrismaModelT](client or get_client(), cls)


class Basedjango_content_type(_PrismaModel):
    __prisma_model__: ClassVar[Literal['django_content_type']] = 'django_content_type'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.django_content_typeActions[_PrismaModelT]':
        from .client import get_client

        return actions.django_content_typeActions[_PrismaModelT](client or get_client(), cls)


class Basedjango_migrations(_PrismaModel):
    __prisma_model__: ClassVar[Literal['django_migrations']] = 'django_migrations'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.django_migrationsActions[_PrismaModelT]':
        from .client import get_client

        return actions.django_migrationsActions[_PrismaModelT](client or get_client(), cls)


class Basedjango_session(_PrismaModel):
    __prisma_model__: ClassVar[Literal['django_session']] = 'django_session'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.django_sessionActions[_PrismaModelT]':
        from .client import get_client

        return actions.django_sessionActions[_PrismaModelT](client or get_client(), cls)


class Basetoken_blacklist_blacklistedtoken(_PrismaModel):
    __prisma_model__: ClassVar[Literal['token_blacklist_blacklistedtoken']] = 'token_blacklist_blacklistedtoken'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.token_blacklist_blacklistedtokenActions[_PrismaModelT]':
        from .client import get_client

        return actions.token_blacklist_blacklistedtokenActions[_PrismaModelT](client or get_client(), cls)


class Basetoken_blacklist_outstandingtoken(_PrismaModel):
    __prisma_model__: ClassVar[Literal['token_blacklist_outstandingtoken']] = 'token_blacklist_outstandingtoken'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.token_blacklist_outstandingtokenActions[_PrismaModelT]':
        from .client import get_client

        return actions.token_blacklist_outstandingtokenActions[_PrismaModelT](client or get_client(), cls)


class Baseusers_user(_PrismaModel):
    __prisma_model__: ClassVar[Literal['users_user']] = 'users_user'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.users_userActions[_PrismaModelT]':
        from .client import get_client

        return actions.users_userActions[_PrismaModelT](client or get_client(), cls)


class Baseusers_user_groups(_PrismaModel):
    __prisma_model__: ClassVar[Literal['users_user_groups']] = 'users_user_groups'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.users_user_groupsActions[_PrismaModelT]':
        from .client import get_client

        return actions.users_user_groupsActions[_PrismaModelT](client or get_client(), cls)


class Baseusers_user_user_permissions(_PrismaModel):
    __prisma_model__: ClassVar[Literal['users_user_user_permissions']] = 'users_user_user_permissions'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.users_user_user_permissionsActions[_PrismaModelT]':
        from .client import get_client

        return actions.users_user_user_permissionsActions[_PrismaModelT](client or get_client(), cls)


