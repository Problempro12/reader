#!/usr/bin/env python
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤ OPDS-–∑–∞–ø–∏—Å—è—Ö Flibusta
"""

import os
import sys
import django
import requests
import xml.etree.ElementTree as ET
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reader.settings')
django.setup()

from books.external_sources import FlibustaTorClient

def test_opds_links():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤ OPDS"""
    print("=== –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤ OPDS-–∑–∞–ø–∏—Å—è—Ö ===")
    
    client = FlibustaTorClient(use_tor=False)
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –Ω–∞–ø—Ä—è–º—É—é
        search_url = f"{client.base_url}/opds/search?searchType=books&searchTerm=–ü—É—à–∫–∏–Ω"
        print(f"URL –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥: {search_url}")
        
        response = requests.get(search_url, timeout=30)
        
        if response.status_code == 200:
            # –ü–∞—Ä—Å–∏–º XML
            root = ET.fromstring(response.content)
            ns = {'atom': 'http://www.w3.org/2005/Atom'}
            
            entries = root.findall('atom:entry', ns)
            print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∫–Ω–∏–≥: {len(entries)}")
            
            for i, entry in enumerate(entries[:2]):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø–∏—Å–∏
                title = entry.find('atom:title', ns)
                print(f"\nüìö –ö–Ω–∏–≥–∞ {i+1}: {title.text if title is not None else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
                links = entry.findall('atom:link', ns)
                print(f"  –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
                
                for j, link in enumerate(links):
                    rel = link.get('rel', '–Ω–µ—Ç rel')
                    href = link.get('href', '–Ω–µ—Ç href')
                    link_type = link.get('type', '–Ω–µ—Ç type')
                    
                    print(f"    –°—Å—ã–ª–∫–∞ {j+1}:")
                    print(f"      rel: {rel}")
                    print(f"      href: {href}")
                    print(f"      type: {link_type}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–ª—è –æ–±–ª–æ–∂–∫–∏
                    if 'image' in rel.lower() or 'thumbnail' in rel.lower():
                        print(f"      üñºÔ∏è  –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–õ–û–ñ–ö–ê!")
                    elif rel in ['http://opds-spec.org/acquisition', 'http://opds-spec.org/acquisition/open-access']:
                        print(f"      üì• –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                    elif rel == 'alternate':
                        print(f"      üîó –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞")
                    else:
                        print(f"      ‚ùì –î—Ä—É–≥–∞—è —Å—Å—ã–ª–∫–∞ (rel: {rel})")
                        
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    test_opds_links()