#!/usr/bin/env python
"""
–ò–º–ø–æ—Ä—Ç –∫–Ω–∏–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –§–ª–∏–±—É—Å—Ç—ã
"""

import os
import sys
import django
from typing import List, Dict, Any
from django.db import transaction

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reader.settings')
django.setup()

from books.models import Book, Author
from books.external_sources import FlibustaTorClient, ExternalBookSources, import_book_from_external_source

def import_books_by_category(category_url: str, count: int = 5) -> List[Dict[str, Any]]:
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–Ω–∏–≥–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    print(f"üìö –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç {count} –∫–Ω–∏–≥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...\n")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        client = FlibustaTorClient(use_tor=True)
        sources = ExternalBookSources(use_tor_for_flibusta=True)
        
        print(f"üîó –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_url}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        books_data = client.browse_books_by_category(category_url, sort_by_popularity=True, limit=count)
        
        if not books_data:
            print("‚ùå –ö–Ω–∏–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        print(f"üìñ –ù–∞–π–¥–µ–Ω–æ {len(books_data)} –∫–Ω–∏–≥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞\n")
        
        imported_books = []
        imported_count = 0
        errors = []
        
        with transaction.atomic():
            for i, book_data in enumerate(books_data, 1):
                print(f"üìñ {i}/{len(books_data)}. –ò–º–ø–æ—Ä—Ç: {book_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {book_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–Ω–∏–≥–∞
                    existing_book = Book.objects.filter(
                        title=book_data.get('title', ''),
                        author__name=book_data.get('author', '')
                    ).first()
                    
                    if existing_book:
                        print(f"   ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_book.id})")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞
                    author_name = book_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
                    author, created = Author.objects.get_or_create(
                        name=author_name,
                        defaults={'bio': ''}
                    )
                    
                    if created:
                        print(f"   üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–≤—Ç–æ—Ä: {author_name}")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–Ω–∏–≥–∏
                    print(f"   üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
                    content = import_book_from_external_source(book_data, 'flibusta', 'fb2', use_tor=True)
                    
                    if not content:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
                        errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è '{book_data.get('title', 'Unknown')}'")
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –∫–Ω–∏–≥–∏
                    description = book_data.get('description', '')
                    book_id = book_data.get('source_id') or book_data.get('id')
                    if book_id and not description:
                        try:
                            description = sources.get_book_description(book_id)
                        except:
                            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É —Å –ø–æ–ª–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                    book = Book.objects.create(
                        title=book_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        author=author,
                        description=description or '',
                        content=content,
                        cover_url=book_data.get('cover_url', ''),
                        genre=book_data.get('genre', '–û–±—â–µ–µ'),
                        source_id=book_id or '',
                        source_type='flibusta'
                    )
                    
                    imported_books.append({
                        'id': book.id,
                        'title': book.title,
                        'author': book.author.name,
                        'has_content': bool(book.content),
                        'has_cover': bool(book.cover_url)
                    })
                    
                    imported_count += 1
                    print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ (ID: {book.id})")
                    print(f"      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {'–î–∞' if book.content else '–ù–µ—Ç'}")
                    print(f"      –û–±–ª–æ–∂–∫–∞: {'–î–∞' if book.cover_url else '–ù–µ—Ç'}")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥–∏: {e}")
                    errors.append(f"Error importing '{book_data.get('title', 'Unknown')}': {str(e)}")
                    continue
                
                print()
        
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥")
        
        if imported_books:
            print("\nüìã –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:")
            for book in imported_books:
                print(f"   ‚Ä¢ {book['title']} - {book['author']} (ID: {book['id']})")
        
        if errors:
            print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∏ ({len(errors)}):")
            for error in errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"   ‚Ä¢ {error}")
        
        return imported_books
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return []

def get_fantasy_category_url():
    """–ü–æ–ª—É—á–∞–µ—Ç URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—ç–Ω—Ç–µ–∑–∏"""
    try:
        client = FlibustaTorClient(use_tor=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        print("üîç –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
        categories = client.browse_categories()
        
        if not categories:
            print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü–æ –∂–∞–Ω—Ä–∞–º"
        genres_category = None
        for category in categories:
            if any(keyword in category['name'].lower() for keyword in ['–∂–∞–Ω—Ä', 'genre']):
                genres_category = category
                print(f"üìÇ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞–Ω—Ä–æ–≤: {category['name']}")
                break
        
        if not genres_category:
            print("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞–Ω—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã
        print(f"üîç –ò—â–µ–º —Ñ—ç–Ω—Ç–µ–∑–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {genres_category['name']}")
        genre_items = client._get_categories_from_catalog(genres_category['url'], limit=100)
        
        # –ò—â–µ–º —Ñ—ç–Ω—Ç–µ–∑–∏ —Å—Ä–µ–¥–∏ –∂–∞–Ω—Ä–æ–≤
        fantasy_genre = None
        for item in genre_items:
            title = item.get('title', '').lower()
            if any(keyword in title for keyword in ['—Ñ—ç–Ω—Ç–µ–∑–∏', 'fantasy', '—Ñ–∞–Ω—Ç–∞—Å—Ç']):
                fantasy_genre = item
                print(f"üéØ –ù–∞–π–¥–µ–Ω –∂–∞–Ω—Ä —Ñ—ç–Ω—Ç–µ–∑–∏: {item.get('title')}")
                break
        
        if not fantasy_genre:
            print("‚ùå –ñ–∞–Ω—Ä —Ñ—ç–Ω—Ç–µ–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∂–∞–Ω—Ä
            if genre_items:
                fantasy_genre = genre_items[0]
                print(f"‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∂–∞–Ω—Ä: {fantasy_genre.get('title')}")
            else:
                return None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∂–∞–Ω—Ä–∞
        genre_url = fantasy_genre.get('download_url') or fantasy_genre.get('url', '')
        return genre_url
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        return None

if __name__ == '__main__':
    print("=== –ò–º–ø–æ—Ä—Ç –∫–Ω–∏–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        book_count = Book.objects.count()
        print(f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –ë–î: {book_count}")
        print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—ç–Ω—Ç–µ–∑–∏
    category_url = get_fantasy_category_url()
    
    if not category_url:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        sys.exit(1)
    
    print(f"üîó URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_url}\n")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º 5 –∫–Ω–∏–≥
    imported_books = import_books_by_category(category_url, count=5)
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(imported_books)} –∫–Ω–∏–≥")