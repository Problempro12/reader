#!/usr/bin/env python
"""
–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–Ω–∏–≥–∏ –∏–∑ Flibusta —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import os
import sys
import django
import requests
import json
import xml.etree.ElementTree as ET
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reader.settings')
django.setup()

from books.external_sources import FlibustaTorClient, search_external_books, import_book_from_external_source
from books.models import Book, Author
from django.contrib.auth.models import User

def test_flibusta_direct():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FlibustaTorClient"""
    
    print("=== –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç FlibustaTorClient ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–µ–∑ Tor –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    client = FlibustaTorClient(use_tor=False)
    
    query = "–ü—É—à–∫–∏–Ω"
    print(f"–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    print(f"OPDS URL: {client.opds_url}")
    print(f"Base URL: {client.base_url}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ OPDS
    search_url = f"{client.opds_url}/search?searchTerm={query}"
    print(f"\n–ó–∞–ø—Ä–æ—Å –∫: {search_url}")
    
    try:
        response = client.session.get(search_url, timeout=client.timeout)
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
        
        if response.status_code == 200:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
            content_preview = response.text[:1000]
            print(f"\n–ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:")
            print(content_preview)
            print("...")
            
            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å XML
            try:
                root = ET.fromstring(response.content)
                print(f"\nXML —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω. –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {root.tag}")
                
                # Namespace –¥–ª—è OPDS
                ns = {
                    'atom': 'http://www.w3.org/2005/Atom',
                    'opds': 'http://opds-spec.org/2010/catalog'
                }
                
                entries = root.findall('.//atom:entry', ns)
                print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(entries)}")
                
                for i, entry in enumerate(entries[:3]):
                    print(f"\n--- –ó–∞–ø–∏—Å—å {i+1} ---")
                    
                    title = entry.find('atom:title', ns)
                    author = entry.find('atom:author/atom:name', ns)
                    summary = entry.find('atom:summary', ns)
                    
                    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title.text if title is not None else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
                    print(f"–ê–≤—Ç–æ—Ä: {author.text if author is not None else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
                    print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {summary.text[:100] if summary is not None else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}...")
                    
                    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏
                    links = entry.findall('atom:link', ns)
                    download_links = []
                    for link in links:
                        rel = link.get('rel')
                        if rel == 'http://opds-spec.org/acquisition':
                            download_links.append({
                                'href': link.get('href'),
                                'type': link.get('type'),
                                'rel': rel
                            })
                    
                    print(f"–°—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {len(download_links)}")
                    for link in download_links:
                        print(f"  - {link['type']}: {link['href']}")
                        
            except ET.ParseError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ search_books
    print(f"\n=== –¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ search_books ===")
    try:
        books = client.search_books(query, limit=3)
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}")
        
        for i, book in enumerate(books):
            print(f"\nüìö –ö–Ω–∏–≥–∞ {i+1}:")
            print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {book.get('title')}")
            print(f"  –ê–≤—Ç–æ—Ä: {book.get('author')}")
            print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {book.get('description', '')[:100]}...")
            print(f"  –°—Å—ã–ª–∫–∏: {len(book.get('download_links', []))}")
            for link in book.get('download_links', []):
                print(f"    - {link.get('format')}: {link.get('url')}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ search_books: {e}")

def test_alternative_search():
    """–¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    print("\n=== –¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–∏—Å–∫–∞ ===")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    queries = ["–ü—É—à–∫–∏–Ω", "–¢–æ–ª—Å—Ç–æ–π", "–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–ï–≤–≥–µ–Ω–∏–π –û–Ω–µ–≥–∏–Ω"]
    
    for query in queries:
        print(f"\n–ü–æ–∏—Å–∫: {query}")
        try:
            results = search_external_books(
                query=query,
                limit=2,
                use_tor=False,
                sources=['flibusta']
            )
            
            flibusta_results = results.get('flibusta', [])
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(flibusta_results)}")
            
            for book in flibusta_results:
                print(f"  - {book.get('title')} ({book.get('author')})")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_manual_opds_request():
    """–†—É—á–Ω–æ–π —Ç–µ—Å—Ç OPDS –∑–∞–ø—Ä–æ—Å–∞"""
    
    print("\n=== –†—É—á–Ω–æ–π —Ç–µ—Å—Ç OPDS ===")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ OPDS URL
    opds_urls = [
        "http://flibusta.is/opds",
        "https://flibusta.is/opds",
        "http://flibusta.site/opds",
        "https://flibusta.site/opds"
    ]
    
    for base_url in opds_urls:
        print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º: {base_url}")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥
            response = requests.get(base_url, timeout=10)
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫
                search_url = f"{base_url}/search?searchTerm=–ü—É—à–∫–∏–Ω"
                search_response = requests.get(search_url, timeout=10)
                print(f"–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—É—Å: {search_response.status_code}")
                
                if search_response.status_code == 200:
                    print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    print(f"–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(search_response.content)} –±–∞–π—Ç")
                else:
                    print(f"‚ùå –ü–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Flibusta\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        book_count = Book.objects.count()
        print(f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –ë–î: {book_count}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_manual_opds_request()
    test_flibusta_direct()
    test_alternative_search()
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")